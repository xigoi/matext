/* Generated by the Nim Compiler v1.6.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI620765367 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620765331 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620764838 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620764760 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620764354 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620764172 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620764233 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620764086 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763069 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI704643079 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI620763763 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI671089002 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI671089014 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI385876137 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI620763708 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620756998 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620763099 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763093 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762893 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763208 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762661 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762727 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762806 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535032 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637535031 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637534222 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI620762155 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761582 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761836 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761830 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761678 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761645 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761224 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761426 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761420 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761380 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761337 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761268 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761235 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761790 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761747 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762028 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762022 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761632 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761638 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620762226 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762132 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762273 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761186 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761192 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620762364 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762445 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760975 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761020 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761098 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534217 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1191182594 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1191182502 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760208 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760330 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760269 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760396 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760457 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534211 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI637534724 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620760911 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760128 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759887 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759317 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759571 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759565 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759413 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759380 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758946 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759161 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759155 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759096 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759053 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758984 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758957 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759525 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759482 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759763 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759757 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759367 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759373 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620759958 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654311636 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758897 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758903 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620760023 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758888 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311427 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33555088 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555081 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311431 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654311428 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI654311493 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758234 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758488 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758482 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758330 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758297 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757882 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758078 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758072 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758020 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654311478 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757920 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757893 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758442 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758399 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758680 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758674 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758284 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758290 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620758854 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757833 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757839 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI452985127 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534854 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1191182747 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555129 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1191183475 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI721420349 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1191182342 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1191182810 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI905969736 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI905969743 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1191183413 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI1191182566 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1191183379 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1191182371 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1191182357 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1191182468 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1191182357 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1191182357, name: "success", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1191182357, name: "failure", len: 0, sons: null}}};
NTI1191182357.node = NNI1191182357;
NTI1191182371.base = NTI33554439;
var NNI1191182468 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI33554439, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1191182468.node = NNI1191182468;
NTI1191183379.base = NTI33554439;
var NNI1191182566 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI33554438, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1191182566.node = NNI1191182566;
NTI1191183413.base = NTI33554439;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI905969743 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI905969736, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI905969743.node = NNI905969743;
NTI1191182810.base = NTI33554439;
var NNI1191182342 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI1191182342.node = NNI1191182342;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI721420349 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI721420349.node = NNI721420349;
NTI1191183475.base = NTI33554439;
var NNI33555129 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555129.node = NNI33555129;
NTI33555129.base = NTI33555113;
NTI1191182747.base = NTI33554439;
var NNI637534854 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI637534854.node = NNI637534854;
NTI452985127.base = NTI33554439;
NTI620757833.base = NTI33554439;
var NNI620757839 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620757833, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620757839.node = NNI620757839;
NTI620758854.base = NTI33554439;
NTI620758284.base = NTI620757833;
var NNI620758290 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620758284, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620758290.node = NNI620758290;
NTI620758674.base = NTI620757833;
NTI620758680.base = NTI33554439;
NTI620758399.base = NTI620757833;
NTI620758442.base = NTI33554439;
NTI620757893.base = NTI33554439;
NTI620757920.base = NTI33554439;
NTI654311478.base = NTI33554439;
NTI620758020.base = NTI33554439;
NTI620758072.base = NTI33554439;
NTI620758078.base = NTI33554439;
NTI620757882.base = NTI33554439;
NTI620758297.base = NTI620757833;
NTI620758330.base = NTI33554439;
NTI620758482.base = NTI620757833;
NTI620758488.base = NTI33554439;
NTI620758234.base = NTI33554439;
NTI654311493.base = NTI33554439;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
NTI654311431.base = NTI33554439;
NTI33555081.base = NTI33555088;
var NNI654311427 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI654311427, name: "trfNone", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI654311427, name: "trfAlnum", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI654311427, name: "trfOperator", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI654311427, name: "trfBigOperator", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI654311427, name: "trfWord", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI654311427, name: "trfFraction", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI654311427, name: "trfSub", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI654311427, name: "trfSup", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI654311427, name: "trfPunctuation", len: 0, sons: null}}};
NTI654311427.node = NNI654311427;
var NNI654311428 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "rows", len: 0, typ: NTI654311431, name: "rows", sons: null}, 
{kind: 1, offset: "baseline", len: 0, typ: NTI33554456, name: "baseline", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI33555081, name: "width", sons: null}, 
{kind: 1, offset: "flag", len: 0, typ: NTI654311427, name: "flag", sons: null}]};
NTI654311428.node = NNI654311428;
var NNI620758888 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI654311428, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620758888.node = NNI620758888;
NTI620760023.base = NTI33554439;
NTI620758897.base = NTI654311428;
var NNI620758903 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620758897, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620758903.node = NNI620758903;
NTI654311636.base = NTI654311428;
NTI620759958.base = NTI33554439;
NTI620759367.base = NTI620758897;
var NNI620759373 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620759367, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620759373.node = NNI620759373;
NTI620759757.base = NTI620758897;
NTI620759763.base = NTI33554439;
NTI620759482.base = NTI620758897;
NTI620759525.base = NTI33554439;
NTI620758957.base = NTI654311428;
NTI620758984.base = NTI33554439;
NTI620759053.base = NTI654311428;
NTI620759096.base = NTI33554439;
NTI620759155.base = NTI654311428;
NTI620759161.base = NTI33554439;
NTI620758946.base = NTI654311428;
NTI620759380.base = NTI620758897;
NTI620759413.base = NTI33554439;
NTI620759565.base = NTI620758897;
NTI620759571.base = NTI33554439;
NTI620759317.base = NTI33554439;
NTI620759887.base = NTI654311428;
NTI620760128.base = NTI33554439;
NTI620760911.base = NTI33554439;
var NNI637534211 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI637534211, name: "fItalic", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI637534211, name: "fBold", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI637534211, name: "fScript", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI637534211, name: "fFraktur", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI637534211, name: "fDoubleStruck", len: 0, sons: null}}};
NTI637534211.node = NNI637534211;
var NNI637534724 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI637534211, name: "Field1", sons: null}]};
NTI637534724.node = NNI637534724;
NTI620760457.base = NTI33554439;
NTI620760396.base = NTI33554439;
NTI620760269.base = NTI33554439;
NTI620760330.base = NTI33554439;
NTI620760208.base = NTI33554439;
NTI1191182502.base = NTI33554439;
NTI1191182594.base = NTI33554439;
var NNI637534217 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI654311428, name: "Field1", sons: null}]};
NTI637534217.node = NNI637534217;
NTI620761098.base = NTI33554439;
NTI620761020.base = NTI33554439;
NTI620760975.base = NTI33554439;
NTI620762445.base = NTI33554439;
NTI620762364.base = NTI33554439;
NTI620761186.base = NTI33554438;
var NNI620761192 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620761186, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620761192.node = NNI620761192;
NTI620762273.base = NTI33554439;
NTI620762132.base = NTI33554438;
NTI620762226.base = NTI33554439;
NTI620761632.base = NTI620761186;
var NNI620761638 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1191182357, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620761632, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1191182371, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620761638.node = NNI620761638;
NTI620762022.base = NTI620761186;
NTI620762028.base = NTI33554439;
NTI620761747.base = NTI620761186;
NTI620761790.base = NTI33554439;
NTI620761235.base = NTI33554438;
NTI620761268.base = NTI33554439;
NTI620761337.base = NTI33554438;
NTI620761380.base = NTI33554439;
NTI620761420.base = NTI33554438;
NTI620761426.base = NTI33554439;
NTI620761224.base = NTI33554438;
NTI620761645.base = NTI620761186;
NTI620761678.base = NTI33554439;
NTI620761830.base = NTI620761186;
NTI620761836.base = NTI33554439;
NTI620761582.base = NTI33554439;
NTI620762155.base = NTI33554438;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
NTI33555126.base = NTI33555125;
var NNI637534222 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI654311428, name: "Field1", sons: null}]};
NTI637534222.node = NNI637534222;
var NNI637535032 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI637535032.node = NNI637535032;
var NNI637535031 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI637535032, name: "Field1", sons: null}]};
NTI637535031.node = NNI637535031;
NTI620762806.base = NTI33554439;
NTI620762727.base = NTI33554439;
NTI620762661.base = NTI33554439;
NTI620763208.base = NTI33554439;
NTI620762893.base = NTI33554439;
NTI620763093.base = NTI654311428;
NTI620763099.base = NTI33554439;
var NNI620756998 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}]};
NTI620756998.node = NNI620756998;
NTI620763708.base = NTI385876137;
NTI671089014.base = NTI33554439;
NTI671089002.base = NTI33554439;
NTI620763763.base = NTI704643079;
NTI620763069.base = NTI654311428;
NTI620764086.base = NTI33554439;
NTI620764233.base = NTI33554439;
NTI620764172.base = NTI33554439;
NTI620764354.base = NTI33554439;
NTI620764760.base = NTI33554439;
NTI620764838.base = NTI33554439;
var NNI620765331 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI654311428, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI654311428, name: "Field1", sons: null}]};
NTI620765331.node = NNI620765331;
NTI620765367.base = NTI33554439;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

    switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557132(ti_33557143))) {
      result_33557152 = src_33557142;
      }
      else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }
      
      break;
    case 19:
            if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      }
      else {
        for (var key in dest_33557141) { delete dest_33557141[key]; }
      }
      for (var key in src_33557142) { dest_33557141[key] = src_33557142[key]; }
      result_33557152 = dest_33557141;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557143.base == null))) {
      result_33557152 = nimCopy(dest_33557141, src_33557142, ti_33557143.base);
      }
      else {
      if ((ti_33557143.kind == 17)) {
      result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {m_type: ti_33557143} : dest_33557141;
      }
      else {
        result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {} : dest_33557141;
      }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557142 === null) {
        result_33557152 = null;
      }
      else {
        if (dest_33557141 === null || dest_33557141 === undefined || dest_33557141.length != src_33557142.length) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(result_33557152[i], src_33557142[i], ti_33557143.base);
        }
      }
    
      break;
    case 28:
            if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }
    
      break;
    default: 
      result_33557152 = src_33557142;
      break;
    }

  return result_33557152;

}

function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556894) {
        return new Array(len_33556894);
  

  
}

function toJSStr(s_33556808) {
                    var Temporary5;
            var Temporary7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break Label2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556859 = c_33556846.toString(16);
                  if ((((code_33556859) == null ? 0 : (code_33556859).length) == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Temporary5 = true; else {                      Temporary5 = (s_33556808[i_33556844] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556845 += 1;
        }
    } while (false);
    if (res_33556843.length < j_33556845) { for (var i = res_33556843.length ; i < j_33556845 ; ++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}

function raiseException(e_33556668, ename_33556669) {
    e_33556668.name = ename_33556669;
    if ((excHandler == 0)) {
    unhandledException(e_33556668);
    }
    
    throw e_33556668;

  
}

function addInt(a_33556941, b_33556942) {
        var result = a_33556941 + b_33556942;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557190, a_33557191, b_33557192) {
      var Temporary1;

  var result_33557193 = 0;

  BeforeRet: do {
      if (!(a_33557191 <= i_33557190)) Temporary1 = false; else {        Temporary1 = (i_33557190 <= b_33557192);      }    if (Temporary1) {
    result_33557193 = i_33557190;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557193;

}

function chckIndx(i_33557185, a_33557186, b_33557187) {
      var Temporary1;

  var result_33557188 = 0;

  BeforeRet: do {
      if (!(a_33557186 <= i_33557185)) Temporary1 = false; else {        Temporary1 = (i_33557185 <= b_33557187);      }    if (Temporary1) {
    result_33557188 = i_33557185;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557185, a_33557186, b_33557187);
    }
    
  } while (false);

  return result_33557188;

}

function subInt(a_33556945, b_33556946) {
        var result = a_33556945 - b_33556946;
    checkOverflowInt(result);
    return result;
  

  
}

function cstrToNimstr(c_33556805) {
      var ln = c_33556805.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556805.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556805.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function addChar(x_33557256, c_33557257) {
    x_33557256.push(c_33557257);

  
}
var ConstSet2 = setConstr([48, 57]);

function mulInt(a_33556949, b_33556950) {
        var result = a_33556949 * b_33556950;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([65, 90]);

function nimMax(a_33556999, b_33557000) {
    var Temporary1;

  var result_33557001 = 0;

  BeforeRet: do {
    if ((b_33557000 <= a_33556999)) {
    Temporary1 = a_33556999;
    }
    else {
    Temporary1 = b_33557000;
    }
    
    result_33557001 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557001;

}

function nimMin(a_33556995, b_33556996) {
    var Temporary1;

  var result_33556997 = 0;

  BeforeRet: do {
    if ((a_33556995 <= b_33556996)) {
    Temporary1 = a_33556995;
    }
    else {
    Temporary1 = b_33556996;
    }
    
    result_33556997 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556997;

}
var ConstSet6 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var ConstSet7 = setConstr(1);

function raiseFieldError2(f_33556779, discVal_33556780) {
    raiseException({message: (f_33556779 || []).concat(discVal_33556780 || [],makeNimstrLit("\'") || []), parent: null, m_type: NTI33555129, name: null, trace: [], up: null}, "FieldDefect");

  
}

function nimBoolToStr(x_33556515) {
  var result_33556516 = [];

    if (x_33556515) {
    result_33556516 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33556516 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33556516;

}

function reprDiscriminant(e_33557425, typ_33557426) {
    var Temporary1;

  var result_33557427 = [];

    switch (typ_33557426.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557425, typ_33557426);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557425 == 0)));
      break;
    default: 
      Temporary1 = HEX24_335544323(e_33557425);
      break;
    }
    result_33557427 = nimCopy(null, Temporary1, NTI33554439);

  return result_33557427;

}
var ConstSet8 = setConstr(1);

function nimCharToStr(x_33556518) {
  var result_33556519 = [];

    result_33556519 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556519[0] = x_33556518;

  return result_33556519;

}
var ConstSet9 = setConstr(1);
var ConstSet10 = setConstr(0);
var ConstSet11 = setConstr(1);
var ConstSet12 = setConstr(1);
var ConstSet13 = setConstr(0);
var ConstSet14 = setConstr(0);
var ConstSet15 = setConstr(1);
var ConstSet16 = setConstr(0);
var ConstSet17 = setConstr(1);
var ConstSet18 = setConstr(0);
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr(0);
var ConstSet21 = setConstr(1);

function eqStrings(a_33556932, b_33556933) {
        if (a_33556932 == b_33556933) return true;
    if (a_33556932 === null && b_33556933.length == 0) return true;
    if (b_33556933 === null && a_33556932.length == 0) return true;
    if ((!a_33556932) || (!b_33556933)) return false;
    var alen = a_33556932.length;
    if (alen != b_33556933.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556932[i] != b_33556933[i]) return false;
    return true;
  

  
}
var ConstSet22 = setConstr(0);
var ConstSet23 = setConstr(1);
var ConstSet24 = setConstr(0);
var ConstSet25 = setConstr(1);
var ConstSet26 = setConstr(0);
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(1);
var ConstSet29 = setConstr(1);
var ConstSet30 = setConstr(0);
var ConstSet31 = setConstr(1);
var ConstSet32 = setConstr(0);
var ConstSet33 = setConstr(1);
var ConstSet34 = setConstr(1);
var ConstSet35 = setConstr(0);
var ConstSet36 = setConstr(0);
var ConstSet37 = setConstr(1);
var ConstSet38 = setConstr(0);
var ConstSet39 = setConstr(1);
var ConstSet40 = setConstr(0);
var ConstSet41 = setConstr(1);
var ConstSet42 = setConstr(0);
var ConstSet43 = setConstr(1);
var ConstSet44 = setConstr(0);
var ConstSet45 = setConstr(1);
var ConstSet46 = setConstr(0);
var ConstSet47 = setConstr(1);
var ConstSet48 = setConstr(0);
var ConstSet49 = setConstr(1);
var ConstSet50 = setConstr(1);
var ConstSet51 = setConstr(2, 3, 8);
var ConstSet52 = setConstr(1, 4);
var ConstSet53 = setConstr(1);
var ConstSet54 = setConstr(1);
var ConstSet55 = setConstr(0);
var ConstSet56 = setConstr(1);
var ConstSet57 = setConstr(1);
      var fontExceptions_637534346 = [[{Field0: 104, Field1: makeNimstrLit("\xE2\x84\x8E")}], [], [{Field0: 66, Field1: makeNimstrLit("\xE2\x84\xAC")}, {Field0: 69, Field1: makeNimstrLit("\xE2\x84\xB0")}, {Field0: 70, Field1: makeNimstrLit("\xE2\x84\xB1")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8B")}, {Field0: 73, Field1: makeNimstrLit("\xE2\x84\x90")}, {Field0: 76, Field1: makeNimstrLit("\xE2\x84\x92")}, {Field0: 77, Field1: makeNimstrLit("\xE2\x84\xB3")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9B")}, {Field0: 101, Field1: makeNimstrLit("\xE2\x84\xAF")}, {Field0: 103, Field1: makeNimstrLit("\xE2\x84\x8A")}, {Field0: 111, Field1: makeNimstrLit("\xE2\x84\xB4")}], [{Field0: 67, Field1: makeNimstrLit("\xE2\x84\xAD")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8C")}, {Field0: 73, Field1: makeNimstrLit("\xE2\x84\x91")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9C")}, {Field0: 90, Field1: makeNimstrLit("\xE2\x84\xA8")}], [{Field0: 67, Field1: makeNimstrLit("\xE2\x84\x82")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8D")}, {Field0: 78, Field1: makeNimstrLit("\xE2\x84\x95")}, {Field0: 80, Field1: makeNimstrLit("\xE2\x84\x99")}, {Field0: 81, Field1: makeNimstrLit("\xE2\x84\x9A")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9D")}, {Field0: 90, Field1: makeNimstrLit("\xE2\x84\xA4")}]];
    var fontStarts_637534325 = new Int32Array([119860, 119808, 119964, 120068, 120120]);
var fontsByName_637534324 = [{Field0: makeNimstrLit("\\mathit"), Field1: 0}, {Field0: makeNimstrLit("\\mathbf"), Field1: 1}, {Field0: makeNimstrLit("\\mathcal"), Field1: 2}, {Field0: makeNimstrLit("\\mathfrak"), Field1: 3}, {Field0: makeNimstrLit("\\mathbb"), Field1: 4}];
var ConstSet58 = setConstr(1);
var ConstSet59 = setConstr(1);
var ConstSet60 = setConstr(0);
var ConstSet61 = setConstr(1);
var ConstSet62 = setConstr(1);
var ConstSet63 = setConstr(0);
var ConstSet64 = setConstr(1);
var ConstSet65 = setConstr(1);
var ConstSet66 = setConstr(0);
var ConstSet67 = setConstr(1);
var ConstSet68 = setConstr(1);
var ConstSet69 = setConstr(0);
var ConstSet70 = setConstr(1);
var ConstSet71 = setConstr(1);
var ConstSet72 = setConstr(0);
var delimiters_637534323 = [{Field0: makeNimstrLit("("), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lparen"), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(")"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rparen"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("["), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lbrack"), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("]"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rbrack"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\{"), Field1: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lbrace"), Field1: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\}"), Field1: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rbrace"), Field1: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA8"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\langle"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lang"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA9"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rangle"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rang"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\vert"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\Vert"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x88"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lceil"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x89"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rceil"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8A"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lfloor"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8B"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rfloor"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA6"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\llbracket"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA7"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rrbracket"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}];
var ConstSet73 = setConstr(1);
var ConstSet74 = setConstr(0);
var ConstSet75 = setConstr(1);
var ConstSet76 = setConstr(1);
var ConstSet77 = setConstr(0);
var ConstSet78 = setConstr(0);
var ConstSet79 = setConstr(1);
var ConstSet80 = setConstr(0);
var ConstSet81 = setConstr(1);
var ConstSet82 = setConstr(1);
var ConstSet83 = setConstr(0);
var ConstSet84 = setConstr(1);
var ConstSet85 = setConstr(0);
var ConstSet86 = setConstr(1);
var ConstSet87 = setConstr(1);
var ConstSet88 = setConstr(0);
var ConstSet89 = setConstr(0);
var ConstSet90 = setConstr(1);
var ConstSet91 = setConstr(0);
var ConstSet92 = setConstr(1);
var ConstSet93 = setConstr(0);
var ConstSet94 = setConstr(1);
var ConstSet95 = setConstr(0);
var ConstSet96 = setConstr(1);
var ConstSet97 = setConstr(0);
var ConstSet98 = setConstr(1);
var ConstSet99 = setConstr(0);
var ConstSet100 = setConstr(1);
var ConstSet101 = setConstr(0);
var ConstSet102 = setConstr(1);
var ConstSet103 = setConstr(1);

function divInt(a_33556953, b_33556954) {
        if (b_33556954 == 0) raiseDivByZero();
    if (b_33556954 == -1 && a_33556953 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556953 / b_33556954);
  

  
}

function modInt(a_33556957, b_33556958) {
        if (b_33556958 == 0) raiseDivByZero();
    if (b_33556958 == -1 && a_33556957 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556957 % b_33556958);
  

  
}
    var commands_637535932 = {data: [{Field0: 773313536, Field1: makeNimstrLit("between"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: -1275910144, Field1: makeNimstrLit("varsupsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -1044255742, Field1: makeNimstrLit("boxdot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1805090809, Field1: makeNimstrLit("Complex"), Field2: {rows: [makeNimstrLit("C")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1296414729, Field1: makeNimstrLit("ddag"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -2143612919, Field1: makeNimstrLit("Box"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 690548749, Field1: makeNimstrLit("tau"), Field2: {rows: [makeNimstrLit("\xCF\x84")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -949300208, Field1: makeNimstrLit("rho"), Field2: {rows: [makeNimstrLit("\xCF\x81")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 374125587, Field1: makeNimstrLit("nearrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1939687445, Field1: makeNimstrLit("hookrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -262745065, Field1: makeNimstrLit("bigstar"), Field2: {rows: [makeNimstrLit("\xE2\x98\x85")], baseline: 0, width: 1, flag: 0}}, {Field0: 638361624, Field1: makeNimstrLit("smallint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: 1181947928, Field1: makeNimstrLit("searrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1376556004, Field1: makeNimstrLit("LaTeX"), Field2: {rows: [makeNimstrLit("L T X"), makeNimstrLit(" A E ")], baseline: 0, width: 5, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1177595934, Field1: makeNimstrLit("oint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAE")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -522425310, Field1: makeNimstrLit("geq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 482634787, Field1: makeNimstrLit("neg"), Field2: {rows: [makeNimstrLit("\xC2\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 699467812, Field1: makeNimstrLit("nvdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 385061925, Field1: makeNimstrLit("nabla"), Field2: {rows: [makeNimstrLit("\xE2\x88\x87")], baseline: 0, width: 1, flag: 0}}, {Field0: 1299890214, Field1: makeNimstrLit("subset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1847849000, Field1: makeNimstrLit("varUpsilon"), Field2: {rows: [makeNimstrLit("\xCE\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2128973781, Field1: makeNimstrLit("i"), Field2: {rows: [makeNimstrLit("\xC4\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1474680876, Field1: makeNimstrLit("uarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -1454298068, Field1: makeNimstrLit("nprec"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 598008878, Field1: makeNimstrLit("eqsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 1714570287, Field1: makeNimstrLit("emptyset"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1088214061, Field1: makeNimstrLit("nu"), Field2: {rows: [makeNimstrLit("\xCE\xBD")], baseline: 0, width: 1, flag: 1}}, {Field0: 181399601, Field1: makeNimstrLit("circledcirc"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: 444384306, Field1: makeNimstrLit("rightsquigarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 174735408, Field1: makeNimstrLit("textdaggerdbl"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -612250570, Field1: makeNimstrLit("Gamma"), Field2: {rows: [makeNimstrLit("\xCE\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: 340107318, Field1: makeNimstrLit("argmin"), Field2: {rows: [makeNimstrLit("arg\xE2\x80\x89min")], baseline: 0, width: 7, flag: 4}}, {Field0: -1880859592, Field1: makeNimstrLit("Phi"), Field2: {rows: [makeNimstrLit("\xCE\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: -601339847, Field1: makeNimstrLit("prec"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 644534329, Field1: makeNimstrLit("omega"), Field2: {rows: [makeNimstrLit("\xCF\x89")], baseline: 0, width: 1, flag: 1}}, {Field0: 299158587, Field1: makeNimstrLit("looparrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1695671356, Field1: makeNimstrLit("mid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661594566, Field1: makeNimstrLit("lozenge"), Field2: {rows: [makeNimstrLit("\xE2\x97\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -965019585, Field1: makeNimstrLit("dotsb"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: -353695681, Field1: makeNimstrLit("cos"), Field2: {rows: [makeNimstrLit("cos")], baseline: 0, width: 3, flag: 4}}, {Field0: -337936319, Field1: makeNimstrLit("xi"), Field2: {rows: [makeNimstrLit("\xCE\xBE")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -482070460, Field1: makeNimstrLit("triangleq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x9C")], baseline: 0, width: 1, flag: 2}}, {Field0: 1865025605, Field1: makeNimstrLit("upharpoonright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: -99402684, Field1: makeNimstrLit("llbracket"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -595749816, Field1: makeNimstrLit("Rrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: 444818505, Field1: makeNimstrLit("twoheadleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 949833801, Field1: makeNimstrLit("dashv"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 731926604, Field1: makeNimstrLit("Rho"), Field2: {rows: [makeNimstrLit("P")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -152946609, Field1: makeNimstrLit("Lrarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 999038032, Field1: makeNimstrLit("models"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 856149071, Field1: makeNimstrLit("liminf"), Field2: {rows: [makeNimstrLit("lim inf")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 260524116, Field1: makeNimstrLit("div"), Field2: {rows: [makeNimstrLit("\xC3\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1743740842, Field1: makeNimstrLit("varsigma"), Field2: {rows: [makeNimstrLit("\xCF\x82")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 152217691, Field1: makeNimstrLit("to"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -232435621, Field1: makeNimstrLit("leftrightarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: -1894549413, Field1: makeNimstrLit("gimel"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -977484706, Field1: makeNimstrLit("textunderscore"), Field2: {rows: [makeNimstrLit("_")], baseline: 0, width: 1, flag: 0}}, {Field0: -653542309, Field1: makeNimstrLit("hom"), Field2: {rows: [makeNimstrLit("hom")], baseline: 0, width: 3, flag: 4}}, {Field0: -836744096, Field1: makeNimstrLit("leftleftarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 778788961, Field1: makeNimstrLit("bigvee"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x81")], baseline: 0, width: 1, flag: 3}}, {Field0: 213332064, Field1: makeNimstrLit("precsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: 727641187, Field1: makeNimstrLit("minuscoloncolon"), Field2: {rows: [makeNimstrLit("::: :, \xE2\x88\x92\xE2\x88\xB7")], baseline: 0, width: 9, flag: 2}}, {Field0: -561121181, Field1: makeNimstrLit("backsim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: 282381413, Field1: makeNimstrLit("gneq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 460405857, Field1: makeNimstrLit("Vert"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1072275553, Field1: makeNimstrLit("AA"), Field2: {rows: [makeNimstrLit("\xC3\x85")], baseline: 0, width: 1, flag: 1}}, {Field0: 259182696, Field1: makeNimstrLit("gt"), Field2: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 2}}, {Field0: -510372764, Field1: makeNimstrLit("---"), Field2: {rows: [makeNimstrLit("\xE2\x80\x94")], baseline: 0, width: 1, flag: 0}}, {Field0: 1338973290, Field1: makeNimstrLit("vdots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 749951083, Field1: makeNimstrLit("eta"), Field2: {rows: [makeNimstrLit("\xCE\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1938319251, Field1: makeNimstrLit("oiiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB0")], baseline: 0, width: 1, flag: 3}}, {Field0: 1672714350, Field1: makeNimstrLit("unrhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -587095952, Field1: makeNimstrLit("ntrianglelefteq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1364552818, Field1: makeNimstrLit("notin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: -718976910, Field1: makeNimstrLit("Sigma"), Field2: {rows: [makeNimstrLit("\xCE\xA3")], baseline: 0, width: 1, flag: 1}}, {Field0: -331592588, Field1: makeNimstrLit("lbrace"), Field2: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: -2046516107, Field1: makeNimstrLit("rArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1988400011, Field1: makeNimstrLit("gnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1748272243, Field1: makeNimstrLit("o"), Field2: {rows: [makeNimstrLit("\xC3\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 312313973, Field1: makeNimstrLit("dotsi"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 19161209, Field1: makeNimstrLit("ddagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -1893200774, Field1: makeNimstrLit("ln"), Field2: {rows: [makeNimstrLit("ln")], baseline: 0, width: 2, flag: 4}}, {Field0: -100797317, Field1: makeNimstrLit("downdownarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: -1755413380, Field1: makeNimstrLit("subsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2084440962, Field1: makeNimstrLit("parallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 977130622, Field1: makeNimstrLit("gamma"), Field2: {rows: [makeNimstrLit("\xCE\xB3")], baseline: 0, width: 1, flag: 1}}, {Field0: 1135297664, Field1: makeNimstrLit("uArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -296721281, Field1: makeNimstrLit("ddots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xB1")], baseline: 0, width: 1, flag: 0}}, {Field0: -222212994, Field1: makeNimstrLit("clubs"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: -1164247933, Field1: makeNimstrLit("boxplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1514094724, Field1: makeNimstrLit("dagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1311469697, Field1: makeNimstrLit("cotg"), Field2: {rows: [makeNimstrLit("cotg")], baseline: 0, width: 4, flag: 4}}, {Field0: 490725510, Field1: makeNimstrLit("because"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 966588552, Field1: makeNimstrLit("leftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -999892852, Field1: makeNimstrLit("ne"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: -1858303860, Field1: makeNimstrLit("iota"), Field2: {rows: [makeNimstrLit("\xCE\xB9")], baseline: 0, width: 1, flag: 1}}, {Field0: 1746366604, Field1: makeNimstrLit("rq"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 619178129, Field1: makeNimstrLit("&"), Field2: {rows: [makeNimstrLit("&")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 732241043, Field1: makeNimstrLit("doteq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 58222740, Field1: makeNimstrLit("sh"), Field2: {rows: [makeNimstrLit("sh")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -797167466, Field1: makeNimstrLit("gtreqqless"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1171929957, Field1: makeNimstrLit("--"), Field2: {rows: [makeNimstrLit("\xE2\x80\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: -1089103717, Field1: makeNimstrLit("blacktriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x97\x80")], baseline: 0, width: 1, flag: 0}}, {Field0: 1035649181, Field1: makeNimstrLit("Z"), Field2: {rows: [makeNimstrLit("Z")], baseline: 0, width: 1, flag: 1}}, {Field0: -2091908962, Field1: makeNimstrLit("gtreqless"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: 965928095, Field1: makeNimstrLit("Delta"), Field2: {rows: [makeNimstrLit("\xCE\x94")], baseline: 0, width: 1, flag: 1}}, {Field0: -420720480, Field1: makeNimstrLit("textasciitilde"), Field2: {rows: [makeNimstrLit("~")], baseline: 0, width: 1, flag: 0}}, {Field0: -778712927, Field1: makeNimstrLit("Join"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1789499230, Field1: makeNimstrLit("Leftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 1590319267, Field1: makeNimstrLit("ominus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 1997743268, Field1: makeNimstrLit("lt"), Field2: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 2}}, {Field0: -1355677533, Field1: makeNimstrLit("reals"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -523187031, Field1: makeNimstrLit("iint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAC")], baseline: 0, width: 1, flag: 3}}, {Field0: -1036495703, Field1: makeNimstrLit("bigsqcup"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x86")], baseline: 0, width: 1, flag: 3}}, {Field0: 128442538, Field1: makeNimstrLit("cosh"), Field2: {rows: [makeNimstrLit("cosh")], baseline: 0, width: 4, flag: 4}}, {Field0: -2114553684, Field1: makeNimstrLit("textellipsis"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1448098991, Field1: makeNimstrLit("lessapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -1900930897, Field1: makeNimstrLit("precnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1279032140, Field1: makeNimstrLit("mapsto"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 659410101, Field1: makeNimstrLit("biguplus"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x84")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 561724599, Field1: makeNimstrLit("lesseqqgtr"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1809787065, Field1: makeNimstrLit("amalg"), Field2: {rows: [makeNimstrLit("\xE2\xA8\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -37402437, Field1: makeNimstrLit("sum"), Field2: {rows: [makeNimstrLit("\xE2\x88\x91")], baseline: 0, width: 1, flag: 3}}, {Field0: 1885254844, Field1: makeNimstrLit("lor"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -1271205699, Field1: makeNimstrLit("harr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -9535301, Field1: makeNimstrLit("rrbracket"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: 784871615, Field1: makeNimstrLit("nleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 1326387387, Field1: makeNimstrLit("csc"), Field2: {rows: [makeNimstrLit("csc")], baseline: 0, width: 3, flag: 4}}, {Field0: -1490766655, Field1: makeNimstrLit("textquoteleft"), Field2: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -422736700, Field1: makeNimstrLit("oslash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 1286160581, Field1: makeNimstrLit("bigcirc"), Field2: {rows: [makeNimstrLit("\xE2\x97\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: 239622342, Field1: makeNimstrLit("twoheadrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: -142582585, Field1: makeNimstrLit("land"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -108495675, Field1: makeNimstrLit("upuparrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 1882464453, Field1: makeNimstrLit("pitchfork"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 695680199, Field1: makeNimstrLit("nsucc"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: 1379611846, Field1: makeNimstrLit("nsupseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 1519946951, Field1: makeNimstrLit("dotso"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1121218765, Field1: makeNimstrLit("rightthreetimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661306674, Field1: makeNimstrLit("Bumpeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: -1584718641, Field1: makeNimstrLit("Doteq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 2014841039, Field1: makeNimstrLit("succneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -159647535, Field1: makeNimstrLit("upsilon"), Field2: {rows: [makeNimstrLit("\xCF\x85")], baseline: 0, width: 1, flag: 1}}, {Field0: 1363198162, Field1: makeNimstrLit("curlyeqsucc"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9F")], baseline: 0, width: 1, flag: 2}}, {Field0: -884689710, Field1: makeNimstrLit("vartheta"), Field2: {rows: [makeNimstrLit("\xCF\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: -1843728178, Field1: makeNimstrLit("colon"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 0}}, {Field0: -1445616431, Field1: makeNimstrLit("surd"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9A")], baseline: 0, width: 1, flag: 0}}, {Field0: 457960649, Field1: makeNimstrLit("textbackslash"), Field2: {rows: [makeNimstrLit("\\")], baseline: 0, width: 1, flag: 0}}, {Field0: -435545897, Field1: makeNimstrLit("longrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -1222909744, Field1: makeNimstrLit("sect"), Field2: {rows: [makeNimstrLit("\xC2\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: -2121057065, Field1: makeNimstrLit("sin"), Field2: {rows: [makeNimstrLit("sin")], baseline: 0, width: 3, flag: 4}}, {Field0: -1726815019, Field1: makeNimstrLit("cth"), Field2: {rows: [makeNimstrLit("cth")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 979290334, Field1: makeNimstrLit("dots"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1312209120, Field1: makeNimstrLit("ldotp"), Field2: {rows: [makeNimstrLit(".")], baseline: 0, width: 1, flag: 2}}, {Field0: 861523169, Field1: makeNimstrLit("approxcolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88:")], baseline: 0, width: 2, flag: 2}}, {Field0: 2048828642, Field1: makeNimstrLit("upharpoonleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1199991581, Field1: makeNimstrLit("tg"), Field2: {rows: [makeNimstrLit("tg")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1893927147, Field1: makeNimstrLit("gtrdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -1959936789, Field1: makeNimstrLit("succeq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2132660463, Field1: makeNimstrLit("lrarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 488165615, Field1: makeNimstrLit("top"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA4")], baseline: 0, width: 1, flag: 0}}, {Field0: -606145295, Field1: makeNimstrLit("ll"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1807494389, Field1: makeNimstrLit("diamonds"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 192740599, Field1: makeNimstrLit("succapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -560628486, Field1: makeNimstrLit("min"), Field2: {rows: [makeNimstrLit("min")], baseline: 0, width: 3, flag: 4}}, {Field0: 1285704955, Field1: makeNimstrLit("longleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1234765051, Field1: makeNimstrLit("inf"), Field2: {rows: [makeNimstrLit("inf")], baseline: 0, width: 3, flag: 4}}, {Field0: -978306819, Field1: makeNimstrLit("projlim"), Field2: {rows: [makeNimstrLit("proj lim")], baseline: 0, width: 8, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1846918907, Field1: makeNimstrLit("impliedby"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: -1475488507, Field1: makeNimstrLit("Lleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1549492486, Field1: makeNimstrLit("equalscolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -1609219833, Field1: makeNimstrLit("blacksquare"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1089001737, Field1: makeNimstrLit("Supset"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -989102838, Field1: makeNimstrLit("preceq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1645364493, Field1: makeNimstrLit("rightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1458530034, Field1: makeNimstrLit("vartriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 1612016911, Field1: makeNimstrLit("bigoplus"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x81")], baseline: 0, width: 1, flag: 3}}, {Field0: 491266320, Field1: makeNimstrLit("lessdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 131900689, Field1: makeNimstrLit("in"), Field2: {rows: [makeNimstrLit("\xE2\x88\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -359701233, Field1: makeNimstrLit("dag"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: -187569904, Field1: makeNimstrLit("cot"), Field2: {rows: [makeNimstrLit("cot")], baseline: 0, width: 3, flag: 4}}, {Field0: -1545899756, Field1: makeNimstrLit("Game"), Field2: {rows: [makeNimstrLit("\xE2\x85\x81")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1835041046, Field1: makeNimstrLit("ntrianglerighteq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 1895304471, Field1: makeNimstrLit("gg"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: -1002856168, Field1: makeNimstrLit("exists"), Field2: {rows: [makeNimstrLit("\xE2\x88\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: 1855977753, Field1: makeNimstrLit("barwedge"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: -13362922, Field1: makeNimstrLit("varPhi"), Field2: {rows: [makeNimstrLit("\xCE\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1924908771, Field1: makeNimstrLit("Colonsim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1350079776, Field1: makeNimstrLit("ctg"), Field2: {rows: [makeNimstrLit("ctg")], baseline: 0, width: 3, flag: 4}}, {Field0: -419504863, Field1: makeNimstrLit("rightarrowtail"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1088790238, Field1: makeNimstrLit("pm"), Field2: {rows: [makeNimstrLit("\xC2\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1071612201, Field1: makeNimstrLit("oiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAF")], baseline: 0, width: 1, flag: 3}}, {Field0: -1023749846, Field1: makeNimstrLit("leq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2009879247, Field1: makeNimstrLit("unlhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 627659057, Field1: makeNimstrLit("Lambda"), Field2: {rows: [makeNimstrLit("\xCE\x9B")], baseline: 0, width: 1, flag: 1}}, {Field0: -1787755213, Field1: makeNimstrLit("oplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -184680143, Field1: makeNimstrLit("triangleright"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB9")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1440444105, Field1: makeNimstrLit("bigwedge"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x80")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -760926919, Field1: makeNimstrLit("diagdown"), Field2: {rows: [makeNimstrLit("\xE2\x95\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 535853370, Field1: makeNimstrLit("iiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAD")], baseline: 0, width: 1, flag: 3}}, {Field0: 1989892411, Field1: makeNimstrLit("cap"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -1078095557, Field1: makeNimstrLit("ngeqslant"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: -407561924, Field1: makeNimstrLit("arcsin"), Field2: {rows: [makeNimstrLit("arcsin")], baseline: 0, width: 6, flag: 4}}, {Field0: -490111682, Field1: makeNimstrLit("curlywedge"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1772874048, Field1: makeNimstrLit("mod"), Field2: {rows: [makeNimstrLit("bmod")], baseline: 0, width: 4, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1858042554, Field1: makeNimstrLit("square"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -1357095609, Field1: makeNimstrLit("uparrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -52651705, Field1: makeNimstrLit("Diamond"), Field2: {rows: [makeNimstrLit("\xE2\x97\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -817700533, Field1: makeNimstrLit("sqsupseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1135570613, Field1: makeNimstrLit("multimap"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -30619314, Field1: makeNimstrLit("therefore"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 55854415, Field1: makeNimstrLit("smallsmile"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 468669778, Field1: makeNimstrLit("isin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1293458094, Field1: makeNimstrLit("restriction"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: 179645778, Field1: makeNimstrLit("Longleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: -970868397, Field1: makeNimstrLit("sube"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 125073749, Field1: makeNimstrLit("nsupseteqq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 353154387, Field1: makeNimstrLit("ntriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: -1536889512, Field1: makeNimstrLit("succsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1381979816, Field1: makeNimstrLit("neq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 9375058, Field1: makeNimstrLit("Re"), Field2: {rows: [makeNimstrLit("\xE2\x84\x9C")], baseline: 0, width: 1, flag: 1}}, {Field0: -1778153125, Field1: makeNimstrLit("And"), Field2: {rows: [makeNimstrLit("&")], baseline: 0, width: 1, flag: 2}}, {Field0: 2108854619, Field1: makeNimstrLit("aleph"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: -727795363, Field1: makeNimstrLit("boxtimes"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1245973854, Field1: makeNimstrLit("Larr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1574408866, Field1: makeNimstrLit("lArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -722184869, Field1: makeNimstrLit("AE"), Field2: {rows: [makeNimstrLit("\xC3\x86")], baseline: 0, width: 1, flag: 1}}, {Field0: -996418216, Field1: makeNimstrLit("infin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9E")], baseline: 0, width: 1, flag: 0}}, {Field0: 940000598, Field1: makeNimstrLit("Dagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 432784739, Field1: makeNimstrLit("varDelta"), Field2: {rows: [makeNimstrLit("\xCE\x94")], baseline: 0, width: 1, flag: 1}}, {Field0: 1717310812, Field1: makeNimstrLit("yen"), Field2: {rows: [makeNimstrLit("\xC2\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1287358821, Field1: makeNimstrLit("varTheta"), Field2: {rows: [makeNimstrLit("\xCE\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -140368539, Field1: makeNimstrLit("blacktriangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 1128273242, Field1: makeNimstrLit("degree"), Field2: {rows: [makeNimstrLit("\xC2\xB0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1182784865, Field1: makeNimstrLit("sup"), Field2: {rows: [makeNimstrLit("sup")], baseline: 0, width: 3, flag: 4}}, {Field0: 118212969, Field1: makeNimstrLit("eth"), Field2: {rows: [makeNimstrLit("\xC3\xB0")], baseline: 0, width: 1, flag: 1}}, {Field0: -970887830, Field1: makeNimstrLit("nsucceq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -69842580, Field1: makeNimstrLit("flat"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAD")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1415733615, Field1: makeNimstrLit("colonsim"), Field2: {rows: [makeNimstrLit(":\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: 1135244656, Field1: makeNimstrLit("nsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: -857002639, Field1: makeNimstrLit("Lsh"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1069478258, Field1: makeNimstrLit("vert"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1989233008, Field1: makeNimstrLit("thetasym"), Field2: {rows: [makeNimstrLit("\xCF\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 1164383599, Field1: makeNimstrLit("ldots"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 222810489, Field1: makeNimstrLit("sim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1532834170, Field1: makeNimstrLit("nparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 597902715, Field1: makeNimstrLit("ge"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: -1771227780, Field1: makeNimstrLit("centerdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 742864253, Field1: makeNimstrLit("sqsupset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1658382981, Field1: makeNimstrLit("Epsilon"), Field2: {rows: [makeNimstrLit("E")], baseline: 0, width: 1, flag: 1}}, {Field0: -650839681, Field1: makeNimstrLit("thickapprox"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1698018951, Field1: makeNimstrLit("Chi"), Field2: {rows: [makeNimstrLit("X")], baseline: 0, width: 1, flag: 1}}, {Field0: 428323201, Field1: makeNimstrLit("longmapsto"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1829878146, Field1: makeNimstrLit("textregistered"), Field2: {rows: [makeNimstrLit("\xC2\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -967296636, Field1: makeNimstrLit("lbrack"), Field2: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: -862051963, Field1: makeNimstrLit("nleq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1726809478, Field1: makeNimstrLit("colonminus"), Field2: {rows: [makeNimstrLit(":\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1240069752, Field1: makeNimstrLit("divideontimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: -1122236023, Field1: makeNimstrLit("perp"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 448181641, Field1: makeNimstrLit("prime"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: -1049345653, Field1: makeNimstrLit("supsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -186772081, Field1: makeNimstrLit("lnot"), Field2: {rows: [makeNimstrLit("\xC2\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1143282064, Field1: makeNimstrLit("doublecup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1355421295, Field1: makeNimstrLit("forall"), Field2: {rows: [makeNimstrLit("\xE2\x88\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 780416399, Field1: makeNimstrLit("leftharpoondown"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: 851116435, Field1: makeNimstrLit("coloneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -2076267116, Field1: makeNimstrLit("leadsto"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: -1095375470, Field1: makeNimstrLit("ncong"), Field2: {rows: [makeNimstrLit("\xE2\x89\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 1902103956, Field1: makeNimstrLit("varPi"), Field2: {rows: [makeNimstrLit("\xCE\xA0")], baseline: 0, width: 1, flag: 1}}, {Field0: -1114860145, Field1: makeNimstrLit("chi"), Field2: {rows: [makeNimstrLit("\xCF\x87")], baseline: 0, width: 1, flag: 1}}, {Field0: -137865835, Field1: makeNimstrLit("maltese"), Field2: {rows: [makeNimstrLit("\xE2\x9C\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1222922649, Field1: makeNimstrLit("dblcolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 142935450, Field1: makeNimstrLit("succ"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: -235331173, Field1: makeNimstrLit("smallsetminus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 153636250, Field1: makeNimstrLit("det"), Field2: {rows: [makeNimstrLit("det")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -534911583, Field1: makeNimstrLit("dashleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 331403682, Field1: makeNimstrLit("leqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 309436835, Field1: makeNimstrLit("textquoteright"), Field2: {rows: [makeNimstrLit("\xE2\x80\x99")], baseline: 0, width: 1, flag: 0}}, {Field0: 183010724, Field1: makeNimstrLit("doteqdot"), Field2: {rows: [makeNimstrLit("\xE2\x89\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -140396123, Field1: makeNimstrLit("geqslant"), Field2: {rows: [makeNimstrLit("\xE2\xA9\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: -822921819, Field1: makeNimstrLit("textquotedblleft"), Field2: {rows: [makeNimstrLit("\xE2\x80\x9C")], baseline: 0, width: 1, flag: 0}}, {Field0: 1216695713, Field1: makeNimstrLit("diagup"), Field2: {rows: [makeNimstrLit("\xE2\x95\xB1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2022730153, Field1: makeNimstrLit("beta"), Field2: {rows: [makeNimstrLit("\xCE\xB2")], baseline: 0, width: 1, flag: 1}}, {Field0: 923832745, Field1: makeNimstrLit("aa"), Field2: {rows: [makeNimstrLit("\xC3\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 483458475, Field1: makeNimstrLit("rbrack"), Field2: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: -701556308, Field1: makeNimstrLit("curvearrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -495585874, Field1: makeNimstrLit("sigma"), Field2: {rows: [makeNimstrLit("\xCF\x83")], baseline: 0, width: 1, flag: 1}}, {Field0: 937655727, Field1: makeNimstrLit("geqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -1858229842, Field1: makeNimstrLit("arctan"), Field2: {rows: [makeNimstrLit("arctan")], baseline: 0, width: 6, flag: 4}}, {Field0: -212827727, Field1: makeNimstrLit("larr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1177094581, Field1: makeNimstrLit("bigcup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x83")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 744779191, Field1: makeNimstrLit("le"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -189880903, Field1: makeNimstrLit("lll"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: -665286215, Field1: makeNimstrLit("varepsilon"), Field2: {rows: [makeNimstrLit("\xCE\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 1679721915, Field1: makeNimstrLit("ratio"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 438242753, Field1: makeNimstrLit("lfloor"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: -991056446, Field1: makeNimstrLit("smallfrown"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1690050109, Field1: makeNimstrLit("bullet"), Field2: {rows: [makeNimstrLit("\xE2\x88\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: -1543983676, Field1: makeNimstrLit("doublecap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1111792189, Field1: makeNimstrLit("varsupsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 1936615876, Field1: makeNimstrLit("Alpha"), Field2: {rows: [makeNimstrLit("A")], baseline: 0, width: 1, flag: 1}}, {Field0: -204029499, Field1: makeNimstrLit("epsilon"), Field2: {rows: [makeNimstrLit("\xCF\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 2041800129, Field1: makeNimstrLit("R"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: -1642090039, Field1: makeNimstrLit("wp"), Field2: {rows: [makeNimstrLit("\xE2\x84\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: 1401058759, Field1: makeNimstrLit("arcctg"), Field2: {rows: [makeNimstrLit("arcctg")], baseline: 0, width: 6, flag: 4}}, {Field0: 1577711051, Field1: makeNimstrLit("textbraceright"), Field2: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: -769423932, Field1: makeNimstrLit("arg"), Field2: {rows: [makeNimstrLit("arg")], baseline: 0, width: 3, flag: 4}}, {Field0: 1246567885, Field1: makeNimstrLit("pounds"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: -1440281138, Field1: makeNimstrLit("otimes"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 311781838, Field1: makeNimstrLit("copyright"), Field2: {rows: [makeNimstrLit("\xC2\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: -61369904, Field1: makeNimstrLit("intop"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: 492728785, Field1: makeNimstrLit("supset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -610245166, Field1: makeNimstrLit("Coloneqq"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7=")], baseline: 0, width: 2, flag: 2}}, {Field0: -337772077, Field1: makeNimstrLit("nmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 1533272532, Field1: makeNimstrLit("varsubsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -481215022, Field1: makeNimstrLit("lceil"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: 2059920854, Field1: makeNimstrLit("downarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -332135977, Field1: makeNimstrLit("exist"), Field2: {rows: [makeNimstrLit("\xE2\x88\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -883057194, Field1: makeNimstrLit("imageof"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1847278041, Field1: makeNimstrLit("origof"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -2116573739, Field1: makeNimstrLit("textdegree"), Field2: {rows: [makeNimstrLit("\xC2\xB0")], baseline: 0, width: 1, flag: 0}}, {Field0: -799040039, Field1: makeNimstrLit("spadesuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: -221915691, Field1: makeNimstrLit("exp"), Field2: {rows: [makeNimstrLit("exp")], baseline: 0, width: 3, flag: 4}}, {Field0: 665108957, Field1: makeNimstrLit("coprod"), Field2: {rows: [makeNimstrLit("\xE2\x88\x90")], baseline: 0, width: 1, flag: 3}}, {Field0: 1630840286, Field1: makeNimstrLit("mho"), Field2: {rows: [makeNimstrLit("\xE2\x84\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: -830267937, Field1: makeNimstrLit("int"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: -2139331129, Field1: makeNimstrLit("limsup"), Field2: {rows: [makeNimstrLit("lim sup")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1610263010, Field1: makeNimstrLit("leftthreetimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 1114208738, Field1: makeNimstrLit("varnothing"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1077534179, Field1: makeNimstrLit("owns"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 212498914, Field1: makeNimstrLit("Vdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -927282717, Field1: makeNimstrLit("gneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 1208823271, Field1: makeNimstrLit("swarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 1831684584, Field1: makeNimstrLit("lparen"), Field2: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: -1218212375, Field1: makeNimstrLit("curlyeqprec"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1897493989, Field1: makeNimstrLit("Nu"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: -695635477, Field1: makeNimstrLit("dashrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1443886612, Field1: makeNimstrLit("succnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 1807167981, Field1: makeNimstrLit("rang"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: 1580248552, Field1: makeNimstrLit("lambda"), Field2: {rows: [makeNimstrLit("\xCE\xBB")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -133512720, Field1: makeNimstrLit("iff"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 371297779, Field1: makeNimstrLit("circleddash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1649025525, Field1: makeNimstrLit("backepsilon"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -102348297, Field1: makeNimstrLit("circ"), Field2: {rows: [makeNimstrLit("\xE2\x88\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 738677240, Field1: makeNimstrLit("Leftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -991826440, Field1: makeNimstrLit("nwarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1333410309, Field1: makeNimstrLit("hookleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -879801861, Field1: makeNimstrLit("risingdotseq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 383633919, Field1: makeNimstrLit("preccurlyeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 317083140, Field1: makeNimstrLit("bigodot"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x80")], baseline: 0, width: 1, flag: 3}}, {Field0: 1446722052, Field1: makeNimstrLit("sqcap"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1995516410, Field1: makeNimstrLit("gets"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1374693881, Field1: makeNimstrLit("P"), Field2: {rows: [makeNimstrLit("\xC2\xB6")], baseline: 0, width: 1, flag: 0}}, {Field0: -943235580, Field1: makeNimstrLit("ker"), Field2: {rows: [makeNimstrLit("ker")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1626003955, Field1: makeNimstrLit("prod"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8F")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1262346769, Field1: makeNimstrLit("leftarrowtail"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1225410029, Field1: makeNimstrLit("checkmark"), Field2: {rows: [makeNimstrLit("\xE2\x9C\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: -926707180, Field1: makeNimstrLit("image"), Field2: {rows: [makeNimstrLit("\xE2\x84\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -925142501, Field1: makeNimstrLit("curvearrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: -110310885, Field1: makeNimstrLit("equiv"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 286669341, Field1: makeNimstrLit("Eqcolon"), Field2: {rows: [makeNimstrLit("::: :, \xE2\x88\x92\xE2\x88\xB7")], baseline: 0, width: 9, flag: 2}}, {Field0: -1745527269, Field1: makeNimstrLit("bot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1511302685, Field1: makeNimstrLit("mathsterling"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1146067423, Field1: makeNimstrLit("hbar"), Field2: {rows: [makeNimstrLit("\xE2\x84\x8F")], baseline: 0, width: 1, flag: 1}}, {Field0: -2105364958, Field1: makeNimstrLit("subseteqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 891442723, Field1: makeNimstrLit("Theta"), Field2: {rows: [makeNimstrLit("\xCE\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -77740508, Field1: makeNimstrLit("backsimeq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 1783373347, Field1: makeNimstrLit("backprime"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB5")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1891844648, Field1: makeNimstrLit("Zeta"), Field2: {rows: [makeNimstrLit("Z")], baseline: 0, width: 1, flag: 1}}, {Field0: 656361001, Field1: makeNimstrLit("darr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1435107798, Field1: makeNimstrLit("succnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 26894892, Field1: makeNimstrLit("Iota"), Field2: {rows: [makeNimstrLit("I")], baseline: 0, width: 1, flag: 1}}, {Field0: 1836716588, Field1: makeNimstrLit("zeta"), Field2: {rows: [makeNimstrLit("\xCE\xB6")], baseline: 0, width: 1, flag: 1}}, {Field0: -1691615698, Field1: makeNimstrLit("Longleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 891450927, Field1: makeNimstrLit("rightleftharpoons"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1635509713, Field1: makeNimstrLit("Kappa"), Field2: {rows: [makeNimstrLit("K")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1001673268, Field1: makeNimstrLit("blacktriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1501875765, Field1: makeNimstrLit("Tau"), Field2: {rows: [makeNimstrLit("T")], baseline: 0, width: 1, flag: 1}}, {Field0: 1552782902, Field1: makeNimstrLit("frown"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1521156553, Field1: makeNimstrLit("nleqslant"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 136607286, Field1: makeNimstrLit("}"), Field2: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: -326324681, Field1: makeNimstrLit("varXi"), Field2: {rows: [makeNimstrLit("\xCE\x9E")], baseline: 0, width: 1, flag: 1}}, {Field0: -898344391, Field1: makeNimstrLit("j"), Field2: {rows: [makeNimstrLit("\xC8\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -503503303, Field1: makeNimstrLit("sdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 0}}, {Field0: 1284465212, Field1: makeNimstrLit("infty"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9E")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1178661438, Field1: makeNimstrLit("alef"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1269727808, Field1: makeNimstrLit("textbardbl"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2085733821, Field1: makeNimstrLit("times"), Field2: {rows: [makeNimstrLit("\xC3\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 561956424, Field1: makeNimstrLit("eqslantgtr"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 919873098, Field1: makeNimstrLit("leftharpoonup"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 468909643, Field1: makeNimstrLit("supe"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: -1482317238, Field1: makeNimstrLit("nsubseteqq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 1515227725, Field1: makeNimstrLit("Cap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1300055474, Field1: makeNimstrLit("circlearrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: -2128052658, Field1: makeNimstrLit("Harr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1337989708, Field1: makeNimstrLit("nshortmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: -1105456559, Field1: makeNimstrLit("sqsubseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -2146981297, Field1: makeNimstrLit("ngeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: -1793030581, Field1: makeNimstrLit("KaTeX"), Field2: {rows: [makeNimstrLit("K T X"), makeNimstrLit(" A E ")], baseline: 0, width: 5, flag: 0}}, {Field0: 1056518736, Field1: makeNimstrLit("measuredangle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -507666860, Field1: makeNimstrLit("textsterling"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1070808661, Field1: makeNimstrLit("lg"), Field2: {rows: [makeNimstrLit("lg")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1870681688, Field1: makeNimstrLit("heartsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 19948121, Field1: makeNimstrLit("sqsubset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 193524313, Field1: makeNimstrLit("gvertneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 2123680347, Field1: makeNimstrLit("ast"), Field2: {rows: [makeNimstrLit("\xE2\x88\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -1287315876, Field1: makeNimstrLit("Omega"), Field2: {rows: [makeNimstrLit("\xCE\xA9")], baseline: 0, width: 1, flag: 1}}, {Field0: 1827362397, Field1: makeNimstrLit("veebar"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: 699052638, Field1: makeNimstrLit("jmath"), Field2: {rows: [makeNimstrLit("\xC8\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -1798255009, Field1: makeNimstrLit("ngtr"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1932101027, Field1: makeNimstrLit("textbraceleft"), Field2: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1924743581, Field1: makeNimstrLit("Im"), Field2: {rows: [makeNimstrLit("\xE2\x84\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 1990097508, Field1: makeNimstrLit("vartriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: -414576028, Field1: makeNimstrLit("lim"), Field2: {rows: [makeNimstrLit("lim")], baseline: 0, width: 3, flag: 4}}, {Field0: -1006869914, Field1: makeNimstrLit("sec"), Field2: {rows: [makeNimstrLit("sec")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1552102808, Field1: makeNimstrLit("hearts"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1000346218, Field1: makeNimstrLit("wedge"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: 587550314, Field1: makeNimstrLit("rfloor"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: 729784939, Field1: makeNimstrLit("Reals"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: 152785517, Field1: makeNimstrLit("vDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 793982576, Field1: makeNimstrLit("gcd"), Field2: {rows: [makeNimstrLit("gcd")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 458373746, Field1: makeNimstrLit("Rightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -468514189, Field1: makeNimstrLit("nLeftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1771689589, Field1: makeNimstrLit("textasciicircum"), Field2: {rows: [makeNimstrLit("^")], baseline: 0, width: 1, flag: 0}}, {Field0: 1260526198, Field1: makeNimstrLit("trianglerighteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 208938615, Field1: makeNimstrLit("theta"), Field2: {rows: [makeNimstrLit("\xCE\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 910490232, Field1: makeNimstrLit("coloneq"), Field2: {rows: [makeNimstrLit(":\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1997622910, Field1: makeNimstrLit("leqslant"), Field2: {rows: [makeNimstrLit("\xE2\xA9\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: -918172033, Field1: makeNimstrLit("looparrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: 1684372096, Field1: makeNimstrLit("precneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -425875838, Field1: makeNimstrLit("nsubseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1122263421, Field1: makeNimstrLit("imath"), Field2: {rows: [makeNimstrLit("\xEE\x84\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1607821956, Field1: makeNimstrLit("Vvdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1635205767, Field1: makeNimstrLit("bigotimes"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x82")], baseline: 0, width: 1, flag: 3}}, {Field0: 2111140487, Field1: makeNimstrLit("eqcirc"), Field2: {rows: [makeNimstrLit("\xE2\x89\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 860426889, Field1: makeNimstrLit("shortparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 1892319880, Field1: makeNimstrLit("omicron"), Field2: {rows: [makeNimstrLit("\xCE\xBF")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1703044749, Field1: makeNimstrLit("nshortparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 845622926, Field1: makeNimstrLit("beth"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB6")], baseline: 0, width: 1, flag: 1}}, {Field0: 1257085583, Field1: makeNimstrLit("gtrsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1417107824, Field1: makeNimstrLit("lesssim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: 1990401680, Field1: makeNimstrLit("varSigma"), Field2: {rows: [makeNimstrLit("\xCE\xA3")], baseline: 0, width: 1, flag: 1}}, {Field0: 382401167, Field1: makeNimstrLit("textdagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -143540585, Field1: makeNimstrLit("eqslantless"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -315963751, Field1: makeNimstrLit("Psi"), Field2: {rows: [makeNimstrLit("\xCE\xA8")], baseline: 0, width: 1, flag: 1}}, {Field0: -49342823, Field1: makeNimstrLit("spades"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1618291044, Field1: makeNimstrLit("natnums"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: -188891491, Field1: makeNimstrLit("varpropto"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1256799583, Field1: makeNimstrLit("Coloneq"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1476694365, Field1: makeNimstrLit("rightleftarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x84")], baseline: 0, width: 1, flag: 2}}, {Field0: 90499748, Field1: makeNimstrLit("gtrapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1630717273, Field1: makeNimstrLit("textless"), Field2: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 626711210, Field1: makeNimstrLit("dotsm"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -282832210, Field1: makeNimstrLit("mathellipsis"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1055529648, Field1: makeNimstrLit("colonapprox"), Field2: {rows: [makeNimstrLit(":\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: -839167311, Field1: makeNimstrLit("{"), Field2: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: 1306761904, Field1: makeNimstrLit("lq"), Field2: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 198273717, Field1: makeNimstrLit("textendash"), Field2: {rows: [makeNimstrLit("\xE2\x80\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: -436731210, Field1: makeNimstrLit("lhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 867351226, Field1: makeNimstrLit("vdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: 77870779, Field1: makeNimstrLit("Finv"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB2")], baseline: 0, width: 1, flag: 1}}, {Field0: -1633238340, Field1: makeNimstrLit("sqcup"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1012737726, Field1: makeNimstrLit("setminus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 1166910142, Field1: makeNimstrLit("O"), Field2: {rows: [makeNimstrLit("\xC3\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -788264256, Field1: makeNimstrLit("lrArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1404075712, Field1: makeNimstrLit("succcurlyeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: -708164930, Field1: makeNimstrLit("real"), Field2: {rows: [makeNimstrLit("\xE2\x84\x9C")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1582218556, Field1: makeNimstrLit("rbrace"), Field2: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: -1623751995, Field1: makeNimstrLit("rhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 2118272708, Field1: makeNimstrLit("rangle"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2128061129, Field1: makeNimstrLit("implies"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -128053556, Field1: makeNimstrLit("rarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: 1485563597, Field1: makeNimstrLit("intercal"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: -1783832884, Field1: makeNimstrLit("tan"), Field2: {rows: [makeNimstrLit("tan")], baseline: 0, width: 3, flag: 4}}, {Field0: -508692785, Field1: makeNimstrLit("natural"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: -1571214640, Field1: makeNimstrLit("simeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: 1649711825, Field1: makeNimstrLit("sphericalangle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 968579795, Field1: makeNimstrLit("arctg"), Field2: {rows: [makeNimstrLit("arctg")], baseline: 0, width: 5, flag: 4}}, {Field0: -2087052588, Field1: makeNimstrLit("S"), Field2: {rows: [makeNimstrLit("\xC2\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1940638425, Field1: makeNimstrLit("triangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBD")], baseline: 0, width: 1, flag: 0}}, {Field0: 444881626, Field1: makeNimstrLit("nRightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 151659227, Field1: makeNimstrLit("complement"), Field2: {rows: [makeNimstrLit("\xE2\x88\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: -1693292837, Field1: makeNimstrLit("downharpoonleft"), Field2: {rows: [makeNimstrLit("\xE2\x87\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -4439333, Field1: makeNimstrLit("nLeftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: -1212450082, Field1: makeNimstrLit("ch"), Field2: {rows: [makeNimstrLit("ch")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1868119328, Field1: makeNimstrLit("nrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: -318407968, Field1: makeNimstrLit("thicksim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 345991905, Field1: makeNimstrLit("Pi"), Field2: {rows: [makeNimstrLit("\xCE\xA0")], baseline: 0, width: 1, flag: 1}}, {Field0: 631217891, Field1: makeNimstrLit("eqcolon"), Field2: {rows: [makeNimstrLit(">>> >, \xE2\x88\xB9")], baseline: 0, width: 8, flag: 2}}, {Field0: 1697382115, Field1: makeNimstrLit("varkappa"), Field2: {rows: [makeNimstrLit("\xCF\xB0")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 497549031, Field1: makeNimstrLit("ell"), Field2: {rows: [makeNimstrLit("\xE2\x84\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: -1187357976, Field1: makeNimstrLit("mu"), Field2: {rows: [makeNimstrLit("\xCE\xBC")], baseline: 0, width: 1, flag: 1}}, {Field0: -1972195609, Field1: makeNimstrLit("dim"), Field2: {rows: [makeNimstrLit("dim")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1516935444, Field1: makeNimstrLit("lnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1945859345, Field1: makeNimstrLit("OE"), Field2: {rows: [makeNimstrLit("\xC5\x92")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1631707890, Field1: makeNimstrLit("textbar"), Field2: {rows: [makeNimstrLit("|")], baseline: 0, width: 1, flag: 0}}, {Field0: 156381939, Field1: makeNimstrLit("TeX"), Field2: {rows: [makeNimstrLit("T X"), makeNimstrLit(" E ")], baseline: 0, width: 3, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -737534219, Field1: makeNimstrLit("ltimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: -567946507, Field1: makeNimstrLit("Rarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -189001994, Field1: makeNimstrLit("vartriangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 1167593205, Field1: makeNimstrLit("varPsi"), Field2: {rows: [makeNimstrLit("\xCE\xA8")], baseline: 0, width: 1, flag: 1}}, {Field0: 820849399, Field1: makeNimstrLit("psi"), Field2: {rows: [makeNimstrLit("\xCF\x88")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -728388867, Field1: makeNimstrLit("npreceq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1786403073, Field1: makeNimstrLit("lneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -44866816, Field1: makeNimstrLit("Eta"), Field2: {rows: [makeNimstrLit("H")], baseline: 0, width: 1, flag: 1}}, {Field0: -1857517823, Field1: makeNimstrLit("gtrless"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 398077695, Field1: makeNimstrLit("%"), Field2: {rows: [makeNimstrLit("%")], baseline: 0, width: 1, flag: 0}}, {Field0: 892005123, Field1: makeNimstrLit("_"), Field2: {rows: [makeNimstrLit("_")], baseline: 0, width: 1, flag: 0}}, {Field0: 233755396, Field1: makeNimstrLit("Bbbk"), Field2: {rows: [makeNimstrLit("k")], baseline: 0, width: 1, flag: 1}}, {Field0: -1970031867, Field1: makeNimstrLit("vee"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 839637767, Field1: makeNimstrLit("lang"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1432461559, Field1: makeNimstrLit("vcentcolon"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -944697589, Field1: makeNimstrLit("varrho"), Field2: {rows: [makeNimstrLit("\xCF\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1484265230, Field1: makeNimstrLit("varpi"), Field2: {rows: [makeNimstrLit("\xCF\x96")], baseline: 0, width: 1, flag: 1}}, {Field0: 93506319, Field1: makeNimstrLit("hslash"), Field2: {rows: [makeNimstrLit("\xE2\x84\x8F")], baseline: 0, width: 1, flag: 1}}, {Field0: 723635984, Field1: makeNimstrLit("sinh"), Field2: {rows: [makeNimstrLit("sinh")], baseline: 0, width: 4, flag: 4}}, {Field0: -808573167, Field1: makeNimstrLit("mp"), Field2: {rows: [makeNimstrLit("\xE2\x88\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -831156463, Field1: makeNimstrLit("nVdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1011195116, Field1: makeNimstrLit("leftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -316506345, Field1: makeNimstrLit("rceil"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1905710309, Field1: makeNimstrLit("Rsh"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1628249312, Field1: makeNimstrLit("Colonapprox"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2032217310, Field1: makeNimstrLit("shortmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1282881757, Field1: makeNimstrLit("wr"), Field2: {rows: [makeNimstrLit("\xE2\x89\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 201751332, Field1: makeNimstrLit("circledR"), Field2: {rows: [makeNimstrLit("\xC2\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1853396185, Field1: makeNimstrLit("ni"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -1194945752, Field1: makeNimstrLit("Updownarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -2121473240, Field1: makeNimstrLit("cosec"), Field2: {rows: [makeNimstrLit("cosec")], baseline: 0, width: 5, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -418823380, Field1: makeNimstrLit("delta"), Field2: {rows: [makeNimstrLit("\xCE\xB4")], baseline: 0, width: 1, flag: 1}}, {Field0: 64160556, Field1: makeNimstrLit("diamondsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 1405992750, Field1: makeNimstrLit("eqqcolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: 1068375855, Field1: makeNimstrLit("Uarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 1201711918, Field1: makeNimstrLit("lvertneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 129810225, Field1: makeNimstrLit("sub"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -616156365, Field1: makeNimstrLit("Upsilon"), Field2: {rows: [makeNimstrLit("\xCE\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 965596985, Field1: makeNimstrLit("Cup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 377626426, Field1: makeNimstrLit("dotplus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1447029955, Field1: makeNimstrLit("alpha"), Field2: {rows: [makeNimstrLit("\xCE\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1388739390, Field1: makeNimstrLit("cdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -1317677249, Field1: makeNimstrLit("weierp"), Field2: {rows: [makeNimstrLit("\xE2\x84\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: 126402368, Field1: makeNimstrLit("boxminus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9F")], baseline: 0, width: 1, flag: 2}}, {Field0: 927969088, Field1: makeNimstrLit("supseteqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: -978777278, Field1: makeNimstrLit("propto"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 2044716865, Field1: makeNimstrLit("ss"), Field2: {rows: [makeNimstrLit("\xC3\x9F")], baseline: 0, width: 1, flag: 1}}, {Field0: -838084796, Field1: makeNimstrLit("lessgtr"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -829358270, Field1: makeNimstrLit("textquotedblright"), Field2: {rows: [makeNimstrLit("\xE2\x80\x9D")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 711529291, Field1: makeNimstrLit("|"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: -389900469, Field1: makeNimstrLit("textdollar"), Field2: {rows: [makeNimstrLit("$")], baseline: 0, width: 1, flag: 0}}, {Field0: 598895437, Field1: makeNimstrLit("minuscolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1151690575, Field1: makeNimstrLit("#"), Field2: {rows: [makeNimstrLit("#")], baseline: 0, width: 1, flag: 0}}, {Field0: -582685872, Field1: makeNimstrLit("Darr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 1181199183, Field1: makeNimstrLit("triangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x97\x83")], baseline: 0, width: 1, flag: 0}}, {Field0: -1009115312, Field1: makeNimstrLit("minuso"), Field2: {rows: [makeNimstrLit("\xE2\xA6\xB5")], baseline: 0, width: 1, flag: 0}}, {Field0: 499530577, Field1: makeNimstrLit("plim"), Field2: {rows: [makeNimstrLit("plim")], baseline: 0, width: 4, flag: 4}}, {Field0: -114982060, Field1: makeNimstrLit("nleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: -1058309292, Field1: makeNimstrLit("smile"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 437992278, Field1: makeNimstrLit("precapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1034010455, Field1: makeNimstrLit("hArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1814794072, Field1: makeNimstrLit("nexists"), Field2: {rows: [makeNimstrLit("\xE2\x88\x84")], baseline: 0, width: 1, flag: 2}}, {Field0: -848168103, Field1: makeNimstrLit("simcoloncolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: -2083237030, Field1: makeNimstrLit("trianglelefteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 624996184, Field1: makeNimstrLit("nVDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: -508762280, Field1: makeNimstrLit("varGamma"), Field2: {rows: [makeNimstrLit("\xCE\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: -582062244, Field1: makeNimstrLit("pi"), Field2: {rows: [makeNimstrLit("\xCF\x80")], baseline: 0, width: 1, flag: 1}}, {Field0: 485069654, Field1: makeNimstrLit("triangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1089835168, Field1: makeNimstrLit("approxeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1376821406, Field1: makeNimstrLit("bigtriangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBD")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1165389980, Field1: makeNimstrLit("downharpoonright"), Field2: {rows: [makeNimstrLit("\xE2\x87\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: -498708635, Field1: makeNimstrLit("supseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 1390254950, Field1: makeNimstrLit("varOmega"), Field2: {rows: [makeNimstrLit("\xCE\xA9")], baseline: 0, width: 1, flag: 1}}, {Field0: 113278823, Field1: makeNimstrLit("cup"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 775896934, Field1: makeNimstrLit("cnums"), Field2: {rows: [makeNimstrLit("C")], baseline: 0, width: 1, flag: 1}}, {Field0: -1421636764, Field1: makeNimstrLit("angle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1368969066, Field1: makeNimstrLit("Omicron"), Field2: {rows: [makeNimstrLit("O")], baseline: 0, width: 1, flag: 1}}, {Field0: -1825022101, Field1: makeNimstrLit("dotsc"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1049816935, Field1: makeNimstrLit("sharp"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -660215953, Field1: makeNimstrLit("blacktriangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBC")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 701244274, Field1: makeNimstrLit("empty"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -164919438, Field1: makeNimstrLit("gnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -1450188941, Field1: makeNimstrLit("star"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x86")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1706303621, Field1: makeNimstrLit("dArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -250139779, Field1: makeNimstrLit("textemdash"), Field2: {rows: [makeNimstrLit("\xE2\x80\x94")], baseline: 0, width: 1, flag: 0}}, {Field0: 1726374782, Field1: makeNimstrLit("circledS"), Field2: {rows: [makeNimstrLit("\xE2\x93\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: 268964735, Field1: makeNimstrLit("circledast"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: -722765953, Field1: makeNimstrLit("fallingdotseq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 978164610, Field1: makeNimstrLit("nless"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 1202677635, Field1: makeNimstrLit("rparen"), Field2: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: 1073095556, Field1: makeNimstrLit("phi"), Field2: {rows: [makeNimstrLit("\xCF\x95")], baseline: 0, width: 1, flag: 1}}, {Field0: 450942853, Field1: makeNimstrLit("$"), Field2: {rows: [makeNimstrLit("$")], baseline: 0, width: 1, flag: 0}}, {Field0: 104139654, Field1: makeNimstrLit("doublebarwedge"), Field2: {rows: [makeNimstrLit("\xE2\xA9\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: -902326395, Field1: makeNimstrLit("arccos"), Field2: {rows: [makeNimstrLit("arccos")], baseline: 0, width: 6, flag: 4}}, {Field0: -296343675, Field1: makeNimstrLit("tanh"), Field2: {rows: [makeNimstrLit("tanh")], baseline: 0, width: 4, flag: 4}}, {Field0: -1878301815, Field1: makeNimstrLit("rightharpoonup"), Field2: {rows: [makeNimstrLit("\xE2\x87\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 1586769802, Field1: makeNimstrLit("llless"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 1991520139, Field1: makeNimstrLit("alefsym"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 773731214, Field1: makeNimstrLit("subsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1642151823, Field1: makeNimstrLit("supsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -399796335, Field1: makeNimstrLit("curlyvee"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1863581586, Field1: makeNimstrLit("clubsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1089098643, Field1: makeNimstrLit("circeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -983711852, Field1: makeNimstrLit("bumpeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 626165651, Field1: makeNimstrLit("cdots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -135784553, Field1: makeNimstrLit("rightrightarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -347878501, Field1: makeNimstrLit("rightharpoondown"), Field2: {rows: [makeNimstrLit("\xE2\x87\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: 1961500571, Field1: makeNimstrLit("Subset"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1325636708, Field1: makeNimstrLit("partial"), Field2: {rows: [makeNimstrLit("\xE2\x88\x82")], baseline: 0, width: 1, flag: 1}}, {Field0: -1030514789, Field1: makeNimstrLit("max"), Field2: {rows: [makeNimstrLit("max")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -647533664, Field1: makeNimstrLit("circlearrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2088133539, Field1: makeNimstrLit("notni"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1130670173, Field1: makeNimstrLit("Uparrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 1251576741, Field1: makeNimstrLit("asymp"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: -949496923, Field1: makeNimstrLit("varLambda"), Field2: {rows: [makeNimstrLit("\xCE\x9B")], baseline: 0, width: 1, flag: 1}}, {Field0: 508142500, Field1: makeNimstrLit("textgreater"), Field2: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 0}}, {Field0: -1519553629, Field1: makeNimstrLit("blacklozenge"), Field2: {rows: [makeNimstrLit("\xE2\xA7\xAB")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -902478933, Field1: makeNimstrLit("longleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 2018705324, Field1: makeNimstrLit("digamma"), Field2: {rows: [makeNimstrLit("\xCF\x9D")], baseline: 0, width: 1, flag: 1}}, {Field0: -1187603539, Field1: makeNimstrLit("bigcap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x82")], baseline: 0, width: 1, flag: 3}}, {Field0: 1543318445, Field1: makeNimstrLit("daleth"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -433189967, Field1: makeNimstrLit("N"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: 924587953, Field1: makeNimstrLit("diamond"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x84")], baseline: 0, width: 1, flag: 0}}, {Field0: 1813402546, Field1: makeNimstrLit("coth"), Field2: {rows: [makeNimstrLit("coth")], baseline: 0, width: 4, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -817291339, Field1: makeNimstrLit("updownarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -769796170, Field1: makeNimstrLit("kappa"), Field2: {rows: [makeNimstrLit("\xCE\xBA")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1976659016, Field1: makeNimstrLit("rtimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1928334405, Field1: makeNimstrLit("varsubsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: -31274052, Field1: makeNimstrLit("Eqqcolon"), Field2: {rows: [makeNimstrLit("=\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: 1465733053, Field1: makeNimstrLit("approx"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -166071362, Field1: makeNimstrLit("subseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1005448255, Field1: makeNimstrLit("ae"), Field2: {rows: [makeNimstrLit("\xC3\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -774891575, Field1: makeNimstrLit("Downarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 886597579, Field1: makeNimstrLit("deg"), Field2: {rows: [makeNimstrLit("deg")], baseline: 0, width: 3, flag: 4}}, {Field0: 747939788, Field1: makeNimstrLit("argmax"), Field2: {rows: [makeNimstrLit("arg\xE2\x80\x89max")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2054813647, Field1: makeNimstrLit("bigtriangleup"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -288939055, Field1: makeNimstrLit("gggtr"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -996883499, Field1: makeNimstrLit("nleqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1772959704, Field1: makeNimstrLit("lneq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 1375335385, Field1: makeNimstrLit("leftrightsquigarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 1312613338, Field1: makeNimstrLit("nvDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 846101468, Field1: makeNimstrLit("ntriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: -2075499555, Field1: makeNimstrLit("precnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -2025091106, Field1: makeNimstrLit("cdotp"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -606648354, Field1: makeNimstrLit("Longrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1515557918, Field1: makeNimstrLit("uplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1908426722, Field1: makeNimstrLit("Mu"), Field2: {rows: [makeNimstrLit("M")], baseline: 0, width: 1, flag: 1}}, {Field0: -2045698077, Field1: makeNimstrLit("Pr"), Field2: {rows: [makeNimstrLit("Pr")], baseline: 0, width: 2, flag: 4}}, {Field0: -757661723, Field1: makeNimstrLit("th"), Field2: {rows: [makeNimstrLit("th")], baseline: 0, width: 2, flag: 4}}, {Field0: 1227092966, Field1: makeNimstrLit("lnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: -573794331, Field1: makeNimstrLit("injlim"), Field2: {rows: [makeNimstrLit("inj\xE2\x80\x89lim")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -810559509, Field1: makeNimstrLit("cong"), Field2: {rows: [makeNimstrLit("\xE2\x89\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1662921708, Field1: makeNimstrLit("Xi"), Field2: {rows: [makeNimstrLit("\xCE\x9E")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -753883154, Field1: makeNimstrLit("varphi"), Field2: {rows: [makeNimstrLit("\xCF\x86")], baseline: 0, width: 1, flag: 1}}, {Field0: 783613935, Field1: makeNimstrLit("leftrightharpoons"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -826565649, Field1: makeNimstrLit("lesseqgtr"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: -2057048081, Field1: makeNimstrLit("ggg"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661005840, Field1: makeNimstrLit("simcolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC:")], baseline: 0, width: 2, flag: 2}}, {Field0: 816394223, Field1: makeNimstrLit("ngeqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 1170508784, Field1: makeNimstrLit("langle"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1927886855, Field1: makeNimstrLit("Beta"), Field2: {rows: [makeNimstrLit("B")], baseline: 0, width: 1, flag: 1}}, {Field0: -1420442630, Field1: makeNimstrLit("bowtie"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1390482437, Field1: makeNimstrLit("odot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 1269585915, Field1: makeNimstrLit("plusmn"), Field2: {rows: [makeNimstrLit("\xC2\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 1408007165, Field1: makeNimstrLit("oe"), Field2: {rows: [makeNimstrLit("\xC5\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: 1811268606, Field1: makeNimstrLit("log"), Field2: {rows: [makeNimstrLit("log")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}], counter: 663};
var nonCommands_637535956 = [{Field0: makeNimstrLit("+"), Field1: {rows: [makeNimstrLit("+")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("-"), Field1: {rows: [makeNimstrLit("\xE2\x88\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("*"), Field1: {rows: [makeNimstrLit("\xE2\x88\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("/"), Field1: {rows: [makeNimstrLit("/")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("="), Field1: {rows: [makeNimstrLit("=")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("<"), Field1: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit(">"), Field1: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("\x1Bqualscoloncolon"), Field1: {rows: [makeNimstrLit("=\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x07pproxcoloncolon"), Field1: {rows: [makeNimstrLit("\xE2\x89\x88\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonapprox"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonminus"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Dolonequals"), Field1: {rows: [makeNimstrLit("\xE2\x89\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonequals"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7=")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonsim"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolon"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("("), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(")"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("["), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("]"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA8"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA9"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x88"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x89"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8A"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8B"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA6"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA7"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(","), Field1: {rows: [makeNimstrLit(",")], baseline: 0, width: 1, flag: 8}}, {Field0: makeNimstrLit(":"), Field1: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 8}}, {Field0: makeNimstrLit("`"), Field1: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\""), Field1: {rows: [makeNimstrLit("\"")], baseline: 0, width: 1, flag: 0}}];
var simpleDiacritics_637534551 = [{Field0: makeNimstrLit("\\acute"), Field1: {Field0: makeNimstrLit("\xCC\x81"), Field1: makeNimstrLit("\xCB\x8F")}}, {Field0: makeNimstrLit("\\bar"), Field1: {Field0: makeNimstrLit("\xCC\x84"), Field1: makeNimstrLit("_")}}, {Field0: makeNimstrLit("\\breve"), Field1: {Field0: makeNimstrLit("\xCC\x86"), Field1: makeNimstrLit("\xE2\x8F\x91")}}, {Field0: makeNimstrLit("\\check"), Field1: {Field0: makeNimstrLit("\xCC\x8C"), Field1: makeNimstrLit("\xCB\x87")}}, {Field0: makeNimstrLit("\\dot"), Field1: {Field0: makeNimstrLit("\xCC\x87"), Field1: makeNimstrLit(".")}}, {Field0: makeNimstrLit("\\ddot"), Field1: {Field0: makeNimstrLit("\xCC\x88"), Field1: makeNimstrLit("\xC2\xA8")}}, {Field0: makeNimstrLit("\\grave"), Field1: {Field0: makeNimstrLit("\xCC\x80"), Field1: makeNimstrLit("\xCB\x8E")}}, {Field0: makeNimstrLit("\\hat"), Field1: {Field0: makeNimstrLit("\xCC\x82"), Field1: makeNimstrLit("\xEA\x9E\x88")}}, {Field0: makeNimstrLit("\\not"), Field1: {Field0: makeNimstrLit("\xCC\xB8"), Field1: makeNimstrLit("/")}}, {Field0: makeNimstrLit("\\tilde"), Field1: {Field0: makeNimstrLit("\xCC\x83"), Field1: makeNimstrLit("\xCB\xB7")}}, {Field0: makeNimstrLit("\\vec"), Field1: {Field0: makeNimstrLit("\xE2\x83\x97"), Field1: makeNimstrLit("\xE2\x86\x92")}}];
var ConstSet104 = setConstr(1);
var ConstSet105 = setConstr(0);
var ConstSet106 = setConstr(1);
var ConstSet107 = setConstr(1);
var ConstSet108 = setConstr(0);
var ConstSet109 = setConstr(1);
var ConstSet110 = setConstr(1);
var ConstSet111 = setConstr(0);
    var alignFuncs_654312342 = [HEX3Aanonymous_654312330, HEX3Aanonymous_654312334, HEX3Aanonymous_654312338];
var ConstSet112 = setConstr(1);
var ConstSet113 = setConstr(1);
var ConstSet114 = setConstr(0);
var ConstSet115 = setConstr(1);
var ConstSet116 = setConstr(1);
var ConstSet117 = setConstr(1);
var ConstSet118 = setConstr(1);
var ConstSet119 = setConstr(0);
var ConstSet120 = setConstr(0);
      var delimiterParts_620758385 = {data: [{Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 132032417, Field1: makeNimstrLit("\xE2\x88\xA5"), Field2: {Field0: makeNimstrLit("\xE2\x95\x91"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x91")}}, {Field0: 1632932802, Field1: makeNimstrLit("["), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA1"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA3")}}, {Field0: -289087198, Field1: makeNimstrLit("\xE2\x9F\xA7"), Field2: {Field0: makeNimstrLit("\xE2\x95\x96"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x9C")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -436772347, Field1: makeNimstrLit(")"), Field2: {Field0: makeNimstrLit("\xE2\x8E\x9E"), Field1: makeNimstrLit("\xE2\x8E\x9F"), Field2: makeNimstrLit("\xE2\x8E\xA0")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -1827680438, Field1: makeNimstrLit("\xE2\x8C\x88"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA1"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA2")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 501150701, Field1: makeNimstrLit("("), Field2: {Field0: makeNimstrLit("\xE2\x8E\x9B"), Field1: makeNimstrLit("\xE2\x8E\x9C"), Field2: makeNimstrLit("\xE2\x8E\x9D")}}, {Field0: 243936301, Field1: makeNimstrLit("\xE2\x8C\x8A"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA2"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA3")}}, {Field0: 1380037103, Field1: makeNimstrLit("\xE2\x9F\xA6"), Field2: {Field0: makeNimstrLit("\xE2\x95\x93"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x99")}}, {Field0: 1862135120, Field1: makeNimstrLit("]"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA4"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA6")}}, {Field0: -696588431, Field1: makeNimstrLit("\xE2\x8C\x8B"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA5"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA6")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -1377921419, Field1: makeNimstrLit("\xE2\x88\xA3"), Field2: {Field0: makeNimstrLit("\xE2\x94\x82"), Field1: makeNimstrLit("\xE2\x94\x82"), Field2: makeNimstrLit("\xE2\x94\x82")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -2091933701, Field1: makeNimstrLit("\xE2\x8C\x89"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA4"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA5")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}], counter: 12};
var ConstSet121 = setConstr(1);
var ConstSet122 = setConstr(1);
var ConstSet123 = setConstr(0);
var ConstSet124 = setConstr(1);
var ConstSet125 = setConstr(1);
var ConstSet126 = setConstr(0);
var ConstSet127 = setConstr(1);
var ConstSet128 = setConstr(1);
var ConstSet129 = setConstr(0);
var ConstSet130 = setConstr(1);
var ConstSet131 = setConstr(1);
var ConstSet132 = setConstr(0);
var ConstSet133 = setConstr(1);
var ConstSet134 = setConstr(0);
var ConstSet135 = setConstr(3, 4);
var ConstSet136 = setConstr(3, 4);
var ConstSet137 = setConstr(1);
var ConstSet138 = setConstr(1);
var ConstSet139 = setConstr(0);
var ConstSet140 = setConstr(0);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_1107296418 = [0];

function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !((ConstSet1[ti_33557133.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557134;

}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
    switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557147.sons.length; i++) {
      nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
    }
    
      break;
    case 3:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }
    
      break;
    }

  
}

function succeedImpl_1191183349(inputInHEX60gensym43_1191183350, valueInHEX60gensym43_1191183351, tailInHEX60gensym43_1191183352) {
  var result_1191183354 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1191183354 = nimCopy(result_1191183354, {kind: 0, value: nimCopy(null, valueInHEX60gensym43_1191183351, NTI33554439), tail: nimCopy(null, tailInHEX60gensym43_1191183352, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_1191183350, NTI33554439), expected: []}, NTI1191182468);

  return result_1191183354;

}

function failImpl_1191183356(inputInHEX60gensym43_1191183357, expectedInHEX60gensym43_1191183358, tailInHEX60gensym43_1191183359) {
  var result_1191183361 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1191183361 = nimCopy(result_1191183361, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym43_1191183358, NTI1191183379), tail: nimCopy(null, tailInHEX60gensym43_1191183359, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_1191183357, NTI33554439), value: []}, NTI1191182468);

  return result_1191183361;

}

function succeedImpl_1191183385(inputInHEX60gensym45_1191183386, valueInHEX60gensym45_1191183387, tailInHEX60gensym45_1191183388) {
  var result_1191183390 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1191183390 = nimCopy(result_1191183390, {kind: 0, value: valueInHEX60gensym45_1191183387, tail: nimCopy(null, tailInHEX60gensym45_1191183388, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_1191183386, NTI33554439), expected: []}, NTI1191182566);

  return result_1191183390;

}

function failImpl_1191183392(inputInHEX60gensym45_1191183393, expectedInHEX60gensym45_1191183394, tailInHEX60gensym45_1191183395) {
  var result_1191183397 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1191183397 = nimCopy(result_1191183397, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym45_1191183394, NTI1191183413), tail: nimCopy(null, tailInHEX60gensym45_1191183395, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_1191183393, NTI33554439), value: 0}, NTI1191182566);

  return result_1191183397;

}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
          if (x_33556421[x_33556421_Idx] === null) { x_33556421[x_33556421_Idx] = []; }
      var off = x_33556421[x_33556421_Idx].length;
      x_33556421[x_33556421_Idx].length += y_33556422.length;
      for (var i = 0; i < y_33556422.length; ++i) {
        x_33556421[x_33556421_Idx][off+i] = y_33556422.charCodeAt(i);
      }
    

  
}

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

    result_33556829 = new Array(len_33556828); for (var i = 0 ; i < len_33556828 ; ++i) { result_33556829[i] = null; }
  return result_33556829;

}

function unhandledException(e_33556664) {
    var buf_33556665 = [[]];
    if (!(((e_33556664.message).length == 0))) {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);;
    }
    else {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));;
    add_33556420(buf_33556665, 0, e_33556664.name);
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556666 = toJSStr(buf_33556665[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556666);
  }
  else {
    throw cbuf_33556666;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556939) {
        if (a_33556939 > 2147483647 || a_33556939 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_1191183568 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1191183568 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_1191183568;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_1191183568 = addInt(i_1191183568, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function raiseIndexError(i_33556755, a_33556756, b_33556757) {
    var Temporary1;

    if ((b_33556757 < a_33556756)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556755) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556756) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556757) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function HEX5BHEX5D_973081754(s_973081757, x_973081758) {
  var result_973081759 = [];

    var a_973081761 = x_973081758.a;
    var L_973081763 = addInt(subInt(subInt((s_973081757).length, x_973081758.b), a_973081761), 1);
    result_973081759 = nimCopy(null, mnewString(chckRange(L_973081763, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_973081768 = 0;
      var i_637535921 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_637535921 < L_973081763)) break Label3;
            i_973081768 = i_637535921;
            result_973081759[chckIndx(i_973081768, 0, (result_973081759).length - 1)] = s_973081757[chckIndx(addInt(i_973081768, a_973081761), 0, (s_973081757).length - 1)];
            i_637535921 = addInt(i_637535921, 1);
          }
      } while (false);
    } while (false);

  return result_973081759;

}

function HEX2EHEX2E_905969744(a_905969747, b_905969748) {
  var result_905969751 = ({a: 0, b: 0});

    result_905969751 = nimCopy(result_905969751, {a: a_905969747, b: b_905969748}, NTI905969743);

  return result_905969751;

}

function nsuFindChar(s_671090165, sub_671090166, start_671090167, last_671090168) {
    var Temporary1;

  var result_671090169 = 0;

  BeforeRet: do {
    if ((last_671090168 == 0)) {
    Temporary1 = (s_671090165).length - 1;
    }
    else {
    Temporary1 = last_671090168;
    }
    
    var last_671090170 = Temporary1;
    Label2: do {
      var i_671090180 = 0;
      var colontmp__1191183582 = 0;
      colontmp__1191183582 = start_671090167;
      var res_1191183583 = colontmp__1191183582;
      Label3: do {
          Label4: while (true) {
          if (!(res_1191183583 <= last_671090170)) break Label4;
            i_671090180 = res_1191183583;
            if ((sub_671090166 == s_671090165[chckIndx(i_671090180, 0, (s_671090165).length - 1)])) {
            result_671090169 = i_671090180;
            break BeforeRet;
            }
            
            res_1191183583 = addInt(res_1191183583, 1);
          }
      } while (false);
    } while (false);
    result_671090169 = -1;
    break BeforeRet;
  } while (false);

  return result_671090169;

}

function fill_671090107(a_671090109, value_671090110) {
    var xHEX60gensym166_671090116 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(xHEX60gensym166_671090116 <= (a_671090109).length - 1)) break Label2;
          a_671090109[chckIndx(xHEX60gensym166_671090116, 0, (a_671090109).length - 1)] = value_671090110;
          xHEX60gensym166_671090116 = addInt(xHEX60gensym166_671090116, 1);
        }
    } while (false);

  
}

function nsuInitSkipTable(a_671090104, sub_671090105) {
    var m_671090106 = (sub_671090105).length;
    fill_671090107(a_671090104, m_671090106);
    Label1: do {
      var i_671090125 = 0;
      var colontmp__1191183586 = 0;
      colontmp__1191183586 = subInt(m_671090106, 1);
      var i_1191183587 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1191183587 < colontmp__1191183586)) break Label3;
            i_671090125 = i_1191183587;
            a_671090104[chckIndx(sub_671090105[chckIndx(i_671090125, 0, (sub_671090105).length - 1)], 0, (a_671090104).length - 1)] = subInt(subInt(m_671090106, 1), i_671090125);
            i_1191183587 = addInt(i_1191183587, 1);
          }
      } while (false);
    } while (false);

  
}

function nsuFindStrA(a_671090145, s_671090146, sub_671090147, start_671090148, last_671090149) {
    var Temporary1;

  var result_671090150 = 0;

  BeforeRet: do {
    if ((last_671090149 == 0)) {
    Temporary1 = (s_671090146).length - 1;
    }
    else {
    Temporary1 = last_671090149;
    }
    
    var last_671090151 = Temporary1;
    var subLast_671090152 = subInt((sub_671090147).length, 1);
    if ((subLast_671090152 == -1)) {
    result_671090150 = start_671090148;
    break BeforeRet;
    }
    
    var skip_671090153 = start_671090148;
    Label2: do {
        Label3: while (true) {
        if (!(subLast_671090152 <= subInt(last_671090151, skip_671090153))) break Label3;
          var i_671090154 = subLast_671090152;
          Label4: do {
              Label5: while (true) {
              if (!(s_671090146[chckIndx(addInt(skip_671090153, i_671090154), 0, (s_671090146).length - 1)] == sub_671090147[chckIndx(i_671090154, 0, (sub_671090147).length - 1)])) break Label5;
                if ((i_671090154 == 0)) {
                result_671090150 = skip_671090153;
                break BeforeRet;
                }
                
                i_671090154 = subInt(i_671090154, 1);
              }
          } while (false);
          skip_671090153 = addInt(skip_671090153, a_671090145[chckIndx(s_671090146[chckIndx(addInt(skip_671090153, subLast_671090152), 0, (s_671090146).length - 1)], 0, (a_671090145).length - 1)]);
        }
    } while (false);
    result_671090150 = -1;
    break BeforeRet;
  } while (false);

  return result_671090150;

}

function nsuFindStr(s_671090198, sub_671090199, start_671090200, last_671090201) {
  var result_671090202 = 0;

  BeforeRet: do {
    if ((subInt((s_671090198).length, start_671090200) < (sub_671090199).length)) {
    result_671090202 = -1;
    break BeforeRet;
    }
    
    if (((sub_671090199).length == 1)) {
    result_671090202 = nsuFindChar(s_671090198, sub_671090199[chckIndx(0, 0, (sub_671090199).length - 1)], start_671090200, last_671090201);
    break BeforeRet;
    }
    
    var a_671090204 = [new Int32Array(256)];
    nsuInitSkipTable(a_671090204[0], sub_671090199);
    result_671090202 = nsuFindStrA(a_671090204[0], s_671090198, sub_671090199, start_671090200, last_671090201);
  } while (false);

  return result_671090202;

}

function findBounds_1191182344(s_1191182345, r_1191182346) {
  var result_1191182347 = {Field0: 0, Field1: 0};

  BeforeRet: do {
    var m_1191182348 = toJSStr(s_1191182345).match(r_1191182346);
    if (!(((m_1191182348) == null))) {
    var start_1191182356 = nsuFindStr(s_1191182345, cstrToNimstr(m_1191182348[chckIndx(0, 0, (m_1191182348).length - 1)]), 0, 0);
    var colontmp__1191183573 = start_1191182356;
    var colontmp__1191183574 = subInt(addInt(start_1191182356, ((m_1191182348[chckIndx(0, 0, (m_1191182348).length - 1)]) == null ? 0 : (m_1191182348[chckIndx(0, 0, (m_1191182348).length - 1)]).length)), 1);
    result_1191182347 = nimCopy(result_1191182347, {Field0: colontmp__1191183573, Field1: colontmp__1191183574}, NTI1191182342);
    break BeforeRet;
    }
    
    var colontmp__1191183575 = -1;
    var colontmp__1191183576 = 0;
    result_1191182347 = nimCopy(result_1191182347, {Field0: colontmp__1191183575, Field1: colontmp__1191183576}, NTI1191182342);
    break BeforeRet;
  } while (false);

  return result_1191182347;

}

function invalidFormatString_671090765() {
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");

  
}

function toLowerAscii_1006632961(c_1006632962) {
  var result_1006632963 = 0;

    if ((ConstSet5[c_1006632962] != undefined)) {
    result_1006632963 = chckRange(addInt(c_1006632962, 32), 0, 255);
    }
    else {
      result_1006632963 = c_1006632962;
    }
    

  return result_1006632963;

}

function nsuCmpIgnoreStyle(a_671088830, b_671088831) {
          var Temporary7;
          var Temporary8;

  var result_671088832 = 0;

  BeforeRet: do {
    var aLenHEX60gensym25_671088841 = (a_671088830).length;
    var bLenHEX60gensym25_671088842 = (b_671088831).length;
    var iHEX60gensym25_671088843 = 0;
    var jHEX60gensym25_671088844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          Label3: do {
              Label4: while (true) {
              if (!((iHEX60gensym25_671088843 < aLenHEX60gensym25_671088841) && (a_671088830[iHEX60gensym25_671088843] == 95))) break Label4;
                iHEX60gensym25_671088843 += 1;
              }
          } while (false);
          Label5: do {
              Label6: while (true) {
              if (!((jHEX60gensym25_671088844 < bLenHEX60gensym25_671088842) && (b_671088831[jHEX60gensym25_671088844] == 95))) break Label6;
                jHEX60gensym25_671088844 += 1;
              }
          } while (false);
          if ((iHEX60gensym25_671088843 < aLenHEX60gensym25_671088841)) {
          Temporary7 = toLowerAscii_1006632961(a_671088830[iHEX60gensym25_671088843]);
          }
          else {
          Temporary7 = 0;
          }
          
          var aaHEX60gensym25_671088853 = Temporary7;
          if ((jHEX60gensym25_671088844 < bLenHEX60gensym25_671088842)) {
          Temporary8 = toLowerAscii_1006632961(b_671088831[jHEX60gensym25_671088844]);
          }
          else {
          Temporary8 = 0;
          }
          
          var bbHEX60gensym25_671088854 = Temporary8;
          result_671088832 = (aaHEX60gensym25_671088853 - bbHEX60gensym25_671088854);
          if (!((result_671088832 == 0))) {
          break BeforeRet;
          }
          
          if ((aLenHEX60gensym25_671088841 <= iHEX60gensym25_671088843)) {
          if ((bLenHEX60gensym25_671088842 <= jHEX60gensym25_671088844)) {
          result_671088832 = 0;
          break BeforeRet;
          }
          
          result_671088832 = -1;
          break BeforeRet;
          }
          else {
          if ((bLenHEX60gensym25_671088842 <= jHEX60gensym25_671088844)) {
          result_671088832 = 1;
          break BeforeRet;
          }
          }
          iHEX60gensym25_671088843 += 1;
          jHEX60gensym25_671088844 += 1;
        }
    } while (false);
  } while (false);

  return result_671088832;

}

function findNormalized_671090753(x_671090754, inArray_671090755) {
  var result_671090756 = 0;

  BeforeRet: do {
    var i_671090757 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_671090757 < (inArray_671090755).length - 1)) break Label2;
          if ((nsuCmpIgnoreStyle(x_671090754, inArray_671090755[chckIndx(i_671090757, 0, (inArray_671090755).length - 1)]) == 0)) {
          result_671090756 = i_671090757;
          break BeforeRet;
          }
          
          i_671090757 = addInt(i_671090757, 2);
        }
    } while (false);
    result_671090756 = -1;
    break BeforeRet;
  } while (false);

  return result_671090756;

}

function substr_33557922(s_33557923, first_33557924, last_33557925) {
  var result_33557926 = [];

    var first_33557927 = nimMax(first_33557924, 0);
    var L_33557928 = nimMax(addInt(subInt(nimMin(last_33557925, (s_33557923).length - 1), first_33557927), 1), 0);
    result_33557926 = nimCopy(null, mnewString(chckRange(L_33557928, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557933 = 0;
      var colontmp__637534317 = 0;
      colontmp__637534317 = subInt(L_33557928, 1);
      var res_637534318 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_637534318 <= colontmp__637534317)) break Label3;
            i_33557933 = res_637534318;
            result_33557926[chckIndx(i_33557933, 0, (result_33557926).length - 1)] = s_33557923[chckIndx(addInt(i_33557933, first_33557927), 0, (s_33557923).length - 1)];
            res_637534318 = addInt(res_637534318, 1);
          }
      } while (false);
    } while (false);

  return result_33557926;

}

function nsuAddf(s_671090768, s_671090768_Idx, formatstr_671090769, a_671090770) {
                  var Temporary5;
            var Temporary6;
              var Temporary7;
            var Temporary10;
              var Temporary11;
                var Temporary12;
                  var Temporary15;
              var Temporary16;

    var i_671090772 = 0;
    var num_671090773 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_671090772 < (formatstr_671090769).length)) break Label2;
          if (((formatstr_671090769[chckIndx(i_671090772, 0, (formatstr_671090769).length - 1)] == 36) && (addInt(i_671090772, 1) < (formatstr_671090769).length))) {
          switch (formatstr_671090769[chckIndx(addInt(i_671090772, 1), 0, (formatstr_671090769).length - 1)]) {
          case 35:
            if (((a_671090770).length - 1 < num_671090773)) {
            invalidFormatString_671090765();
            }
            
            s_671090768[s_671090768_Idx].push.apply(s_671090768[s_671090768_Idx], a_671090770[chckIndx(num_671090773, 0, (a_671090770).length - 1)]);;
            i_671090772 = addInt(i_671090772, 2);
            num_671090773 = addInt(num_671090773, 1);
            break;
          case 36:
            addChar(s_671090768[s_671090768_Idx], 36);;
            i_671090772 = addInt(i_671090772, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            var j_671090789 = 0;
            i_671090772 = addInt(i_671090772, 1);
            var negative_671090794 = (formatstr_671090769[chckIndx(i_671090772, 0, (formatstr_671090769).length - 1)] == 45);
            if (negative_671090794) {
            i_671090772 = addInt(i_671090772, 1);
            }
            
            Label3: do {
                Label4: while (true) {
                  if (!(i_671090772 < (formatstr_671090769).length)) Temporary5 = false; else {                    Temporary5 = (ConstSet2[formatstr_671090769[chckIndx(i_671090772, 0, (formatstr_671090769).length - 1)]] != undefined);                  }                if (!Temporary5) break Label4;
                  j_671090789 = subInt(addInt(mulInt(j_671090789, 10), formatstr_671090769[chckIndx(i_671090772, 0, (formatstr_671090769).length - 1)]), 48);
                  i_671090772 = addInt(i_671090772, 1);
                }
            } while (false);
            if (!(negative_671090794)) {
            Temporary6 = subInt(j_671090789, 1);
            }
            else {
            Temporary6 = subInt((a_671090770).length, j_671090789);
            }
            
            var idx_671090817 = Temporary6;
              if ((idx_671090817 < 0)) Temporary7 = true; else {                Temporary7 = ((a_671090770).length - 1 < idx_671090817);              }            if (Temporary7) {
            invalidFormatString_671090765();
            }
            
            s_671090768[s_671090768_Idx].push.apply(s_671090768[s_671090768_Idx], a_671090770[chckIndx(idx_671090817, 0, (a_671090770).length - 1)]);;
            break;
          case 123:
            var j_671090821 = addInt(i_671090772, 2);
            var k_671090822 = 0;
            var negative_671090823 = (formatstr_671090769[chckIndx(j_671090821, 0, (formatstr_671090769).length - 1)] == 45);
            if (negative_671090823) {
            j_671090821 = addInt(j_671090821, 1);
            }
            
            var isNumber_671090828 = 0;
            Label8: do {
                Label9: while (true) {
                if (!((j_671090821 < (formatstr_671090769).length) && !((ConstSet3[formatstr_671090769[chckIndx(j_671090821, 0, (formatstr_671090769).length - 1)]] != undefined)))) break Label9;
                  if ((ConstSet4[formatstr_671090769[chckIndx(j_671090821, 0, (formatstr_671090769).length - 1)]] != undefined)) {
                  k_671090822 = subInt(addInt(mulInt(k_671090822, 10), formatstr_671090769[chckIndx(j_671090821, 0, (formatstr_671090769).length - 1)]), 48);
                  if ((isNumber_671090828 == 0)) {
                  isNumber_671090828 = 1;
                  }
                  
                  }
                  else {
                    isNumber_671090828 = -1;
                  }
                  
                  j_671090821 = addInt(j_671090821, 1);
                }
            } while (false);
            if ((isNumber_671090828 == 1)) {
            if (!(negative_671090823)) {
            Temporary10 = subInt(k_671090822, 1);
            }
            else {
            Temporary10 = subInt((a_671090770).length, k_671090822);
            }
            
            var idx_671090850 = Temporary10;
              if ((idx_671090850 < 0)) Temporary11 = true; else {                Temporary11 = ((a_671090770).length - 1 < idx_671090850);              }            if (Temporary11) {
            invalidFormatString_671090765();
            }
            
            s_671090768[s_671090768_Idx].push.apply(s_671090768[s_671090768_Idx], a_671090770[chckIndx(idx_671090850, 0, (a_671090770).length - 1)]);;
            }
            else {
              var x_671090854 = findNormalized_671090753(substr_33557922(formatstr_671090769, addInt(i_671090772, 2), subInt(j_671090821, 1)), a_671090770);
                if (!(0 <= x_671090854)) Temporary12 = false; else {                  Temporary12 = (x_671090854 < (a_671090770).length - 1);                }              if (Temporary12) {
              s_671090768[s_671090768_Idx].push.apply(s_671090768[s_671090768_Idx], a_671090770[chckIndx(addInt(x_671090854, 1), 0, (a_671090770).length - 1)]);;
              }
              else {
              invalidFormatString_671090765();
              }
              
            }
            
            i_671090772 = addInt(j_671090821, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            var j_671090858 = addInt(i_671090772, 1);
            Label13: do {
                Label14: while (true) {
                  if (!(j_671090858 < (formatstr_671090769).length)) Temporary15 = false; else {                    Temporary15 = (ConstSet6[formatstr_671090769[chckIndx(j_671090858, 0, (formatstr_671090769).length - 1)]] != undefined);                  }                if (!Temporary15) break Label14;
                  j_671090858 = addInt(j_671090858, 1);
                }
            } while (false);
            var x_671090867 = findNormalized_671090753(substr_33557922(formatstr_671090769, addInt(i_671090772, 1), subInt(j_671090858, 1)), a_671090770);
              if (!(0 <= x_671090867)) Temporary16 = false; else {                Temporary16 = (x_671090867 < (a_671090770).length - 1);              }            if (Temporary16) {
            s_671090768[s_671090768_Idx].push.apply(s_671090768[s_671090768_Idx], a_671090770[chckIndx(addInt(x_671090867, 1), 0, (a_671090770).length - 1)]);;
            }
            else {
            invalidFormatString_671090765();
            }
            
            i_671090772 = j_671090858;
            break;
          default: 
            invalidFormatString_671090765();
            break;
          }
          }
          else {
            addChar(s_671090768[s_671090768_Idx], formatstr_671090769[chckIndx(i_671090772, 0, (formatstr_671090769).length - 1)]);;
            i_671090772 = addInt(i_671090772, 1);
          }
          
        }
    } while (false);

  
}

function nsuFormatSingleElem(formatstr_671090887, a_671090888) {
  var result_671090889 = [[]];

    result_671090889[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_671090889, 0, formatstr_671090887, [nimCopy(null, a_671090888, NTI33554439)]);

  return result_671090889[0];

}

function HEX5BHEX5D_973079404(s_973079407, x_973079408) {
  var result_973079409 = [];

    var a_973079411 = x_973079408.a;
    var L_973079413 = addInt(subInt(x_973079408.b, a_973079411), 1);
    result_973079409 = nimCopy(null, mnewString(chckRange(L_973079413, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_973079418 = 0;
      var i_1191183601 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1191183601 < L_973079413)) break Label3;
            i_973079418 = i_1191183601;
            result_973079409[chckIndx(i_973079418, 0, (result_973079409).length - 1)] = s_973079407[chckIndx(addInt(i_973079418, a_973079411), 0, (s_973079407).length - 1)];
            i_1191183601 = addInt(i_1191183601, 1);
          }
      } while (false);
    } while (false);

  return result_973079409;

}

function HEX2EHEX2E_973079379(a_973079382, b_973079383) {
  var result_973079384 = ({a: 0, b: 0});

    result_973079384 = nimCopy(result_973079384, {a: a_973079382, b: b_973079383}, NTI721420349);

  return result_973079384;

}

function regex_1191182850(expect_1191182851) {

function succeedImpl_1191182865(inputInHEX60gensym20_1191182866, valueInHEX60gensym20_1191182867, tailInHEX60gensym20_1191182868) {
  var result_1191182870 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1191182870 = nimCopy(result_1191182870, {kind: 0, value: nimCopy(null, valueInHEX60gensym20_1191182867, NTI33554439), tail: nimCopy(null, tailInHEX60gensym20_1191182868, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_1191182866, NTI33554439), expected: []}, NTI1191182468);

  return result_1191182870;

}

function failImpl_1191182872(inputInHEX60gensym20_1191182873, expectedInHEX60gensym20_1191182874, tailInHEX60gensym20_1191182875) {
  var result_1191182877 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1191182877 = nimCopy(result_1191182877, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym20_1191182874, NTI1191182810), tail: nimCopy(null, tailInHEX60gensym20_1191182875, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_1191182873, NTI33554439), value: []}, NTI1191182468);

  return result_1191182877;

}
      expect_1191182851 = nimCopy(null, expect_1191182851, NTI33554439);
      
function HEX3Aanonymous_1191182880(input_1191182881) {
        var result_1191182883 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1191182884 = succeedImpl_1191182865;
          var fail_1191182885 = failImpl_1191182872;
          var bounds_1191182886 = findBounds_1191182344(input_1191182881, expreg_1191182854);
          if (!((bounds_1191182886["Field0"] == 0))) {
          result_1191182883 = nimCopy(result_1191182883, fail_1191182885(input_1191182881, [nsuFormatSingleElem(makeNimstrLit("match for regex \'$1\'"), expect_1191182851)], input_1191182881), NTI1191182468);
          break BeforeRet;
          }
          
          result_1191182883 = nimCopy(result_1191182883, succeed_1191182884(input_1191182881, HEX5BHEX5D_973079404(input_1191182881, HEX2EHEX2E_973079379(0, bounds_1191182886["Field1"])), HEX5BHEX5D_973081754(input_1191182881, HEX2EHEX2E_905969744(addInt(bounds_1191182886["Field1"], 1), 1))), NTI1191182468);
        } while (false);

        return result_1191182883;

      }

  var result_1191182853 = null;

    var expreg_1191182854 = new RegExp(toJSStr(expect_1191182851));
    Label1: do {
    } while (false);
    result_1191182853 = {body: HEX3Aanonymous_1191182880};

  return result_1191182853;

}

function parse_1191183306(p_1191183308, input_1191183309) {
  var result_1191183310 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1191183308.body == null)) {
    result_1191183310 = nimCopy(result_1191183310, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1191183309, NTI33554439), fromInput: nimCopy(null, input_1191183309, NTI33554439), value: 0}, NTI1191182566);
    break BeforeRet;
    }
    
    result_1191183310 = nimCopy(result_1191183310, p_1191183308.body(input_1191183309), NTI1191182566);
  } while (false);

  return result_1191183310;

}

function HEX26_654311539(x_654311541, y_654311542) {
  var result_654311543 = [];

    result_654311543 = new Array(chckRange(addInt((x_654311541).length, (y_654311542).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_654311541).length, (y_654311542).length), 0, 2147483647) ; ++i) { result_654311543[i] = []; }    Label1: do {
      var i_654311561 = 0;
      var colontmp__1191183605 = 0;
      colontmp__1191183605 = subInt((x_654311541).length, 1);
      var res_1191183606 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1191183606 <= colontmp__1191183605)) break Label3;
            i_654311561 = res_1191183606;
            result_654311543[chckIndx(i_654311561, 0, (result_654311543).length - 1)] = nimCopy(null, x_654311541[chckIndx(i_654311561, 0, (x_654311541).length - 1)], NTI33554439);
            res_1191183606 = addInt(res_1191183606, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_654311569 = 0;
      var colontmp__1191183609 = 0;
      colontmp__1191183609 = subInt((y_654311542).length, 1);
      var res_1191183610 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_1191183610 <= colontmp__1191183609)) break Label6;
            i_654311569 = res_1191183610;
            result_654311543[chckIndx(addInt(i_654311569, (x_654311541).length), 0, (result_654311543).length - 1)] = nimCopy(null, y_654311542[chckIndx(i_654311569, 0, (y_654311542).length - 1)], NTI33554439);
            res_1191183610 = addInt(res_1191183610, 1);
          }
      } while (false);
    } while (false);

  return result_654311543;

}

function reprEnum(e_33557401, typ_33557402) {
  var result_33557403 = [];

    var tmp_33557404 = false;
    var item_33557405 = typ_33557402.node.sons[e_33557401];
    tmp_33557404 = item_33557405 !== undefined
    if (tmp_33557404) {
    result_33557403 = nimCopy(null, makeNimstrLit(item_33557405.name), NTI33554439);
    }
    else {
      result_33557403 = nimCopy(null, (HEX24_335544323(e_33557401) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557403;

}

function HEX7C_1191183450(a_1191183452, b_1191183453) {

function succeedImpl_1191183465(inputInHEX60gensym49_1191183466, valueInHEX60gensym49_1191183467, tailInHEX60gensym49_1191183468) {
  var result_1191183470 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1191183470 = nimCopy(result_1191183470, {kind: 0, value: valueInHEX60gensym49_1191183467, tail: nimCopy(null, tailInHEX60gensym49_1191183468, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_1191183466, NTI33554439), expected: []}, NTI1191182566);

  return result_1191183470;

}

function failImpl_1191183472(inputInHEX60gensym49_1191183473, expectedInHEX60gensym49_1191183474, tailInHEX60gensym49_1191183475) {
  var result_1191183477 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1191183477 = nimCopy(result_1191183477, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym49_1191183474, NTI1191183475), tail: nimCopy(null, tailInHEX60gensym49_1191183475, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_1191183473, NTI33554439), value: 0}, NTI1191182566);

  return result_1191183477;

}
      
function HEX3Aanonymous_1191183480(input_1191183481) {
          var Temporary1;
          var Temporary2;

        var result_1191183483 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1191183484 = succeedImpl_1191183465;
          var fail_1191183485 = failImpl_1191183472;
          var result1_1191183498 = parse_1191183306(a_1191183452, input_1191183481);
          if ((result1_1191183498.kind == 0)) {
          result_1191183483 = nimCopy(result_1191183483, result1_1191183498, NTI1191182566);
          break BeforeRet;
          }
          
          var result2_1191183515 = parse_1191183306(b_1191183453, input_1191183481);
          if ((result2_1191183515.kind == 0)) {
          result_1191183483 = nimCopy(result_1191183483, result2_1191183515, NTI1191182566);
          break BeforeRet;
          }
          
          var Temporary1 = result1_1191183498;
          if (ConstSet7[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1191182357)); }
          var Temporary2 = result2_1191183515;
          if (ConstSet8[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
          result_1191183483 = nimCopy(result_1191183483, fail_1191183485(input_1191183481, HEX26_654311539(Temporary1.expected, Temporary2.expected), input_1191183481), NTI1191182566);
        } while (false);

        return result_1191183483;

      }

  var result_1191183454 = null;

    Label1: do {
    } while (false);
    result_1191183454 = {body: HEX3Aanonymous_1191183480};

  return result_1191183454;

}

function contains_637534489(s_637534493, value_637534494) {
  var result_637534495 = false;

    result_637534495 = ((s_637534493.a <= value_637534494) && (value_637534494 <= s_637534493.b));

  return result_637534495;

}

function nsuFormatOpenArray(formatstr_671090876, a_671090877) {
  var result_671090878 = [[]];

    result_671090878[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_671090878, 0, formatstr_671090876, a_671090877);

  return result_671090878[0];

}

function c_1191182775(expect_1191182777) {

function succeedImpl_1191182790(inputInHEX60gensym14_1191182791, valueInHEX60gensym14_1191182792, tailInHEX60gensym14_1191182793) {
  var result_1191182795 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1191182795 = nimCopy(result_1191182795, {kind: 0, value: valueInHEX60gensym14_1191182792, tail: nimCopy(null, tailInHEX60gensym14_1191182793, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym14_1191182791, NTI33554439), expected: []}, NTI1191182566);

  return result_1191182795;

}

function failImpl_1191182797(inputInHEX60gensym14_1191182798, expectedInHEX60gensym14_1191182799, tailInHEX60gensym14_1191182800) {
  var result_1191182802 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1191182802 = nimCopy(result_1191182802, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym14_1191182799, NTI1191182747), tail: nimCopy(null, tailInHEX60gensym14_1191182800, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym14_1191182798, NTI33554439), value: 0}, NTI1191182566);

  return result_1191182802;

}
      expect_1191182777 = nimCopy(null, expect_1191182777, NTI637534854);
      
function HEX3Aanonymous_1191182805(input_1191182806) {
            var Temporary1;

        var result_1191182808 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1191182809 = succeedImpl_1191182790;
          var fail_1191182810 = failImpl_1191182797;
            if (!(0 < (input_1191182806).length)) Temporary1 = false; else {              Temporary1 = contains_637534489(expect_1191182777, input_1191182806[chckIndx(0, 0, (input_1191182806).length - 1)]);            }          if (Temporary1) {
          result_1191182808 = nimCopy(result_1191182808, succeed_1191182809(input_1191182806, input_1191182806[chckIndx(0, 0, (input_1191182806).length - 1)], HEX5BHEX5D_973081754(input_1191182806, HEX2EHEX2E_905969744(1, 1))), NTI1191182566);
          break BeforeRet;
          }
          
          result_1191182808 = nimCopy(result_1191182808, fail_1191182810(input_1191182806, [nsuFormatOpenArray(makeNimstrLit("character from $1..$2"), [nimCharToStr(expect_1191182777.a), nimCharToStr(expect_1191182777.b)])], input_1191182806), NTI1191182566);
        } while (false);

        return result_1191182808;

      }

  var result_1191182779 = null;

    Label1: do {
    } while (false);
    result_1191182779 = {body: HEX3Aanonymous_1191182805};

  return result_1191182779;

}

function HEX2EHEX2E_637534419(a_637534422, b_637534423) {
  var result_637534426 = ({a: 0, b: 0});

    result_637534426 = nimCopy(result_637534426, {a: a_637534422, b: b_637534423}, NTI637534854);

  return result_637534426;

}

function HEX3Aanonymous_1191183364(input_1191183365) {
  var result_1191183367 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    var succeed_1191183368 = succeedImpl_1191183349;
    var fail_1191183369 = failImpl_1191183356;
    if ((0 < (input_1191183365).length)) {
    result_1191183367 = nimCopy(result_1191183367, fail_1191183369(input_1191183365, [makeNimstrLit("EOF")], input_1191183365), NTI1191182468);
    break BeforeRet;
    }
    
    result_1191183367 = nimCopy(result_1191183367, succeed_1191183368(input_1191183365, [], []), NTI1191182468);
  } while (false);

  return result_1191183367;

}

function HEX3Aanonymous_1191183400(input_1191183401) {
  var result_1191183403 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    var succeed_1191183404 = succeedImpl_1191183385;
    var fail_1191183405 = failImpl_1191183392;
    if ((0 < (input_1191183401).length)) {
    result_1191183403 = nimCopy(result_1191183403, succeed_1191183404(input_1191183401, input_1191183401[chckIndx(0, 0, (input_1191183401).length - 1)], HEX5BHEX5D_973081754(input_1191183401, HEX2EHEX2E_905969744(1, 1))), NTI1191182566);
    break BeforeRet;
    }
    
    result_1191183403 = nimCopy(result_1191183403, fail_1191183405(input_1191183401, [makeNimstrLit("any character")], input_1191183401), NTI1191182566);
  } while (false);

  return result_1191183403;

}
Label1: do {
} while (false);
var eofImpl_1191183374 = {body: HEX3Aanonymous_1191183364};
Label2: do {
} while (false);
var anyCharImpl_1191183428 = {body: HEX3Aanonymous_1191183400};
var eof_1191183429 = eofImpl_1191183374;
var anyChar_1191183430 = anyCharImpl_1191183428;
var whitespace_1191183431 = regex_1191182850(makeNimstrLit("\\s+"));
var letter_1191183524 = HEX7C_1191183450(c_1191182775(HEX2EHEX2E_637534419(97, 122)), c_1191182775(HEX2EHEX2E_637534419(65, 90)));
var digit_1191183530 = c_1191182775(HEX2EHEX2E_637534419(48, 57));
var alphanumeric_1191183543 = HEX7C_1191183450(letter_1191183524, digit_1191183530);

function parse_620759536(p_620759538, input_620759539) {
  var result_620759540 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620759538.body == null)) {
    result_620759540 = nimCopy(result_620759540, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620759539, NTI33554439), fromInput: nimCopy(null, input_620759539, NTI33554439), value: []}, NTI620758290);
    break BeforeRet;
    }
    
    result_620759540 = nimCopy(result_620759540, p_620759538.body(input_620759539), NTI620758290);
  } while (false);

  return result_620759540;

}

function map_620759710(a_620759713, fn_620759715) {

function succeedImpl_620759727(inputInHEX60gensym43_620759728, valueInHEX60gensym43_620759729, tailInHEX60gensym43_620759730) {
  var result_620759732 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759732 = nimCopy(result_620759732, {kind: 0, value: nimCopy(null, valueInHEX60gensym43_620759729, NTI452985127), tail: nimCopy(null, tailInHEX60gensym43_620759730, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_620759728, NTI33554439), expected: []}, NTI620757839);

  return result_620759732;

}

function failImpl_620759734(inputInHEX60gensym43_620759735, expectedInHEX60gensym43_620759736, tailInHEX60gensym43_620759737) {
  var result_620759739 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759739 = nimCopy(result_620759739, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym43_620759736, NTI620758854), tail: nimCopy(null, tailInHEX60gensym43_620759737, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_620759735, NTI33554439), value: []}, NTI620757839);

  return result_620759739;

}
      
function HEX3Aanonymous_620759742(input_620759743) {
            var Temporary2;
          var Temporary3;

        var result_620759745 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620759746 = succeedImpl_620759727;
          var fail_620759747 = failImpl_620759734;
          Label1: do {
            var tempHEX60gensym24_620759760 = parse_620759536(a_620759713, input_620759743);
            if ((tempHEX60gensym24_620759760.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620759760;
            if (ConstSet9[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620759745 = nimCopy(result_620759745, {kind: 1, fromInput: nimCopy(null, input_620759743, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620759760.tail, NTI33554439), value: []}, NTI620757839);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620759766 = nimCopy(null, tempHEX60gensym24_620759760, NTI620758290);
          var Temporary3 = result1_620759766;
          if (ConstSet10[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620759745 = nimCopy(result_620759745, succeed_620759746(input_620759743, fn_620759715(Temporary3.value), result1_620759766.tail), NTI620757839);
          break BeforeRet;
        } while (false);

        return result_620759745;

      }

  var result_620759716 = null;

    Label1: do {
    } while (false);
    result_620759716 = {body: HEX3Aanonymous_620759742};

  return result_620759716;

}

function HEX26_620759578(x_620759580, y_620759581) {
  var result_620759582 = [];

    result_620759582 = new Array(chckRange(addInt((x_620759580).length, (y_620759581).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620759580).length, (y_620759581).length), 0, 2147483647) ; ++i) { result_620759582[i] = []; }    Label1: do {
      var i_620759601 = 0;
      var colontmp__620768164 = 0;
      colontmp__620768164 = subInt((x_620759580).length, 1);
      var res_620768165 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768165 <= colontmp__620768164)) break Label3;
            i_620759601 = res_620768165;
            result_620759582[chckIndx(i_620759601, 0, (result_620759582).length - 1)] = nimCopy(null, x_620759580[chckIndx(i_620759601, 0, (x_620759580).length - 1)], NTI620757833);
            res_620768165 = addInt(res_620768165, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620759609 = 0;
      var colontmp__620768168 = 0;
      colontmp__620768168 = subInt((y_620759581).length, 1);
      var res_620768169 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620768169 <= colontmp__620768168)) break Label6;
            i_620759609 = res_620768169;
            result_620759582[chckIndx(addInt(i_620759609, (x_620759580).length), 0, (result_620759582).length - 1)] = nimCopy(null, y_620759581[chckIndx(i_620759609, 0, (y_620759581).length - 1)], NTI620757833);
            res_620768169 = addInt(res_620768169, 1);
          }
      } while (false);
    } while (false);

  return result_620759582;

}

function HEX26_620759483(a_620759488, b_620759492) {

function succeedImpl_620759507(inputInHEX60gensym37_620759508, valueInHEX60gensym37_620759509, tailInHEX60gensym37_620759510) {
  var result_620759512 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759512 = nimCopy(result_620759512, {kind: 0, value: nimCopy(null, valueInHEX60gensym37_620759509, NTI620758674), tail: nimCopy(null, tailInHEX60gensym37_620759510, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym37_620759508, NTI33554439), expected: []}, NTI620758290);

  return result_620759512;

}

function failImpl_620759514(inputInHEX60gensym37_620759515, expectedInHEX60gensym37_620759516, tailInHEX60gensym37_620759517) {
  var result_620759519 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759519 = nimCopy(result_620759519, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym37_620759516, NTI620758680), tail: nimCopy(null, tailInHEX60gensym37_620759517, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym37_620759515, NTI33554439), value: []}, NTI620758290);

  return result_620759519;

}
      
function HEX3Aanonymous_620759522(input_620759523) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_620759525 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620759526 = succeedImpl_620759507;
          var fail_620759527 = failImpl_620759514;
          Label1: do {
            var tempHEX60gensym26_620759552 = parse_620759536(a_620759488, input_620759523);
            if ((tempHEX60gensym26_620759552.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_620759552;
            if (ConstSet11[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620759525 = nimCopy(result_620759525, {kind: 1, fromInput: nimCopy(null, input_620759523, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym26_620759552.tail, NTI33554439), value: []}, NTI620758290);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620759558 = nimCopy(null, tempHEX60gensym26_620759552, NTI620758290);
          Label3: do {
            var tempHEX60gensym28_620759571 = parse_620759536(b_620759492, result1_620759558.tail);
            if ((tempHEX60gensym28_620759571.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_620759571;
            if (ConstSet12[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620759525 = nimCopy(result_620759525, {kind: 1, fromInput: nimCopy(null, input_620759523, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym28_620759571.tail, NTI33554439), value: []}, NTI620758290);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620759577 = nimCopy(null, tempHEX60gensym28_620759571, NTI620758290);
          var Temporary5 = result1_620759558;
          if (ConstSet13[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          var Temporary6 = result2_620759577;
          if (ConstSet14[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1191182357)); }
          result_620759525 = nimCopy(result_620759525, succeed_620759526(input_620759523, HEX26_620759578(Temporary5.value, Temporary6.value), result2_620759577.tail), NTI620758290);
          break BeforeRet;
        } while (false);

        return result_620759525;

      }

  var result_620759496 = null;

    Label1: do {
    } while (false);
    result_620759496 = {body: HEX3Aanonymous_620759522};

  return result_620759496;

}

function parse_620759020(p_620759022, input_620759023) {
  var result_620759024 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620759022.body == null)) {
    result_620759024 = nimCopy(result_620759024, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620759023, NTI33554439), fromInput: nimCopy(null, input_620759023, NTI33554439), value: []}, NTI620757839);
    break BeforeRet;
    }
    
    result_620759024 = nimCopy(result_620759024, p_620759022.body(input_620759023), NTI620757839);
  } while (false);

  return result_620759024;

}

function map_620759246(a_620759249, fn_620759251) {

function succeedImpl_620759263(inputInHEX60gensym33_620759264, valueInHEX60gensym33_620759265, tailInHEX60gensym33_620759266) {
  var result_620759268 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759268 = nimCopy(result_620759268, {kind: 0, value: nimCopy(null, valueInHEX60gensym33_620759265, NTI620758399), tail: nimCopy(null, tailInHEX60gensym33_620759266, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym33_620759264, NTI33554439), expected: []}, NTI620758290);

  return result_620759268;

}

function failImpl_620759270(inputInHEX60gensym33_620759271, expectedInHEX60gensym33_620759272, tailInHEX60gensym33_620759273) {
  var result_620759275 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759275 = nimCopy(result_620759275, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym33_620759272, NTI620758442), tail: nimCopy(null, tailInHEX60gensym33_620759273, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym33_620759271, NTI33554439), value: []}, NTI620758290);

  return result_620759275;

}
      
function HEX3Aanonymous_620759278(input_620759279) {
            var Temporary2;
          var Temporary3;

        var result_620759281 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620759282 = succeedImpl_620759263;
          var fail_620759283 = failImpl_620759270;
          Label1: do {
            var tempHEX60gensym24_620759296 = parse_620759020(a_620759249, input_620759279);
            if ((tempHEX60gensym24_620759296.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620759296;
            if (ConstSet15[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620759281 = nimCopy(result_620759281, {kind: 1, fromInput: nimCopy(null, input_620759279, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620759296.tail, NTI33554439), value: []}, NTI620758290);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620759302 = nimCopy(null, tempHEX60gensym24_620759296, NTI620757839);
          var Temporary3 = result1_620759302;
          if (ConstSet16[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620759281 = nimCopy(result_620759281, succeed_620759282(input_620759279, fn_620759251(Temporary3.value), result1_620759302.tail), NTI620758290);
          break BeforeRet;
        } while (false);

        return result_620759281;

      }

  var result_620759252 = null;

    Label1: do {
    } while (false);
    result_620759252 = {body: HEX3Aanonymous_620759278};

  return result_620759252;

}

function nop_620758616() {

function succeedImpl_620758629(inputInHEX60gensym23_620758630, valueInHEX60gensym23_620758631, tailInHEX60gensym23_620758632) {
  var result_620758634 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758634 = nimCopy(result_620758634, {kind: 0, value: nimCopy(null, valueInHEX60gensym23_620758631, NTI620757893), tail: nimCopy(null, tailInHEX60gensym23_620758632, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym23_620758630, NTI33554439), expected: []}, NTI620757839);

  return result_620758634;

}

function failImpl_620758648(inputInHEX60gensym23_620758649, expectedInHEX60gensym23_620758650, tailInHEX60gensym23_620758651) {
  var result_620758653 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758653 = nimCopy(result_620758653, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym23_620758650, NTI620757920), tail: nimCopy(null, tailInHEX60gensym23_620758651, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym23_620758649, NTI33554439), value: []}, NTI620757839);

  return result_620758653;

}
      
function HEX3Aanonymous_620758656(input_620758657) {
        var result_620758659 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620758660 = succeedImpl_620758629;
          var fail_620758661 = failImpl_620758648;
          result_620758659 = nimCopy(result_620758659, succeed_620758660(input_620758657, [], input_620758657), NTI620757839);

        return result_620758659;

      }

  var result_620758618 = null;

    Label1: do {
    } while (false);
    result_620758618 = {body: HEX3Aanonymous_620758656};

  return result_620758618;

}

function parse_620758790(p_620758792, input_620758793) {
  var result_620758794 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620758792.body == null)) {
    result_620758794 = nimCopy(result_620758794, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620758793, NTI33554439), fromInput: nimCopy(null, input_620758793, NTI33554439), value: []}, NTI1191182468);
    break BeforeRet;
    }
    
    result_620758794 = nimCopy(result_620758794, p_620758792.body(input_620758793), NTI1191182468);
  } while (false);

  return result_620758794;

}

function map_620758744(a_620758747, fn_620758749) {

function succeedImpl_620758761(inputInHEX60gensym25_620758762, valueInHEX60gensym25_620758763, tailInHEX60gensym25_620758764) {
  var result_620758766 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758766 = nimCopy(result_620758766, {kind: 0, value: nimCopy(null, valueInHEX60gensym25_620758763, NTI654311478), tail: nimCopy(null, tailInHEX60gensym25_620758764, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym25_620758762, NTI33554439), expected: []}, NTI620757839);

  return result_620758766;

}

function failImpl_620758768(inputInHEX60gensym25_620758769, expectedInHEX60gensym25_620758770, tailInHEX60gensym25_620758771) {
  var result_620758773 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758773 = nimCopy(result_620758773, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym25_620758770, NTI620758020), tail: nimCopy(null, tailInHEX60gensym25_620758771, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym25_620758769, NTI33554439), value: []}, NTI620757839);

  return result_620758773;

}
      
function HEX3Aanonymous_620758776(input_620758777) {
            var Temporary2;
          var Temporary3;

        var result_620758779 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620758780 = succeedImpl_620758761;
          var fail_620758781 = failImpl_620758768;
          Label1: do {
            var tempHEX60gensym24_620758806 = parse_620758790(a_620758747, input_620758777);
            if ((tempHEX60gensym24_620758806.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620758806;
            if (ConstSet17[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620758779 = nimCopy(result_620758779, {kind: 1, fromInput: nimCopy(null, input_620758777, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620758806.tail, NTI33554439), value: []}, NTI620757839);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620758812 = nimCopy(null, tempHEX60gensym24_620758806, NTI1191182468);
          var Temporary3 = result1_620758812;
          if (ConstSet18[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620758779 = nimCopy(result_620758779, succeed_620758780(input_620758777, fn_620758749(Temporary3.value), result1_620758812.tail), NTI620757839);
          break BeforeRet;
        } while (false);

        return result_620758779;

      }

  var result_620758750 = null;

    Label1: do {
    } while (false);
    result_620758750 = {body: HEX3Aanonymous_620758776};

  return result_620758750;

}

function HEX2A_620758608(a_620758610, n_620758611) {
    var Temporary1;
      
function HEX3Aanonymous_620758715(x_620758735) {
        var result_620758738 = [];

          result_620758738 = nimCopy(null, [nimCopy(null, x_620758735, NTI33554439)], NTI654311478);

        return result_620758738;

      }

function succeedImpl_620758823(inputInHEX60gensym26_620758824, valueInHEX60gensym26_620758825, tailInHEX60gensym26_620758826) {
  var result_620758828 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758828 = nimCopy(result_620758828, {kind: 0, value: nimCopy(null, valueInHEX60gensym26_620758825, NTI620758072), tail: nimCopy(null, tailInHEX60gensym26_620758826, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym26_620758824, NTI33554439), expected: []}, NTI620757839);

  return result_620758828;

}

function failImpl_620758830(inputInHEX60gensym26_620758831, expectedInHEX60gensym26_620758832, tailInHEX60gensym26_620758833) {
  var result_620758835 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758835 = nimCopy(result_620758835, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym26_620758832, NTI620758078), tail: nimCopy(null, tailInHEX60gensym26_620758833, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym26_620758831, NTI33554439), value: []}, NTI620757839);

  return result_620758835;

}
        
function HEX3Aanonymous_620758838(input_620758839) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620758841 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620758842 = succeedImpl_620758823;
            var fail_620758843 = failImpl_620758830;
            Label1: do {
              var tempHEX60gensym38_620758856 = parse_620758790(a_620758610, input_620758839);
              if ((tempHEX60gensym38_620758856.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620758856;
              if (ConstSet19[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
              result_620758841 = nimCopy(result_620758841, {kind: 1, fromInput: nimCopy(null, input_620758839, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym38_620758856.tail, NTI33554439), value: []}, NTI620757839);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620758862 = nimCopy(null, tempHEX60gensym38_620758856, NTI1191182468);
            var Temporary3 = result1_620758862;
            if (ConstSet20[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
            var outputs_620758867 = [nimCopy(null, Temporary3.value, NTI33554439)];
            var lastTail_620758868 = nimCopy(null, result1_620758862.tail, NTI33554439);
            Label4: do {
              var i_620758874 = 0;
              var res_620768177 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620768177 <= n_620758611)) break Label6;
                    i_620758874 = res_620768177;
                    Label7: do {
                      var tempHEX60gensym40_620758887 = parse_620758790(a_620758610, result1_620758862.tail);
                      if ((tempHEX60gensym40_620758887.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620758887;
                      if (ConstSet21[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1191182357)); }
                      result_620758841 = nimCopy(result_620758841, {kind: 1, fromInput: nimCopy(null, input_620758839, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym40_620758887.tail, NTI33554439), value: []}, NTI620757839);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620758862 = nimCopy(result1_620758862, tempHEX60gensym40_620758887, NTI1191182468);
                    if (eqStrings(result1_620758862.tail, lastTail_620758868)) {
                    break Label4;
                    }
                    
                    lastTail_620758868 = nimCopy(null, result1_620758862.tail, NTI33554439);
                    var Temporary9 = result1_620758862;
                    if (ConstSet22[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1191182357)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI33554439);
                    outputs_620758867.push(Temporary10);;
                    res_620768177 = addInt(res_620768177, 1);
                  }
              } while (false);
            } while (false);
            result_620758841 = nimCopy(result_620758841, succeed_620758842(input_620758839, outputs_620758867, result1_620758862.tail), NTI620757839);
          } while (false);

          return result_620758841;

        }

  var result_620758615 = null;

  BeforeRet: do {
    switch (n_620758611) {
    case 0:
      result_620758615 = nop_620758616();
      break BeforeRet;
      break;
    case 1:
      result_620758615 = map_620758744(a_620758610, HEX3Aanonymous_620758715);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620758838};
      break;
    }
    result_620758615 = Temporary1;
  } while (false);

  return result_620758615;

}

function nop_620759091() {

function succeedImpl_620759104(inputInHEX60gensym31_620759105, valueInHEX60gensym31_620759106, tailInHEX60gensym31_620759107) {
  var result_620759109 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759109 = nimCopy(result_620759109, {kind: 0, value: nimCopy(null, valueInHEX60gensym31_620759106, NTI620758297), tail: nimCopy(null, tailInHEX60gensym31_620759107, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym31_620759105, NTI33554439), expected: []}, NTI620758290);

  return result_620759109;

}

function failImpl_620759132(inputInHEX60gensym31_620759133, expectedInHEX60gensym31_620759134, tailInHEX60gensym31_620759135) {
  var result_620759137 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759137 = nimCopy(result_620759137, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym31_620759134, NTI620758330), tail: nimCopy(null, tailInHEX60gensym31_620759135, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym31_620759133, NTI33554439), value: []}, NTI620758290);

  return result_620759137;

}
      
function HEX3Aanonymous_620759140(input_620759141) {
        var result_620759143 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620759144 = succeedImpl_620759104;
          var fail_620759145 = failImpl_620759132;
          result_620759143 = nimCopy(result_620759143, succeed_620759144(input_620759141, [], input_620759141), NTI620758290);

        return result_620759143;

      }

  var result_620759093 = null;

    Label1: do {
    } while (false);
    result_620759093 = {body: HEX3Aanonymous_620759140};

  return result_620759093;

}

function HEX2A_620759078(a_620759080, n_620759081) {
    var Temporary1;
      
function HEX3Aanonymous_620759208(x_620759237) {
        var result_620759240 = [];

          result_620759240 = nimCopy(null, [nimCopy(null, x_620759237, NTI620757833)], NTI620758399);

        return result_620759240;

      }

function succeedImpl_620759313(inputInHEX60gensym34_620759314, valueInHEX60gensym34_620759315, tailInHEX60gensym34_620759316) {
  var result_620759318 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759318 = nimCopy(result_620759318, {kind: 0, value: nimCopy(null, valueInHEX60gensym34_620759315, NTI620758482), tail: nimCopy(null, tailInHEX60gensym34_620759316, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym34_620759314, NTI33554439), expected: []}, NTI620758290);

  return result_620759318;

}

function failImpl_620759320(inputInHEX60gensym34_620759321, expectedInHEX60gensym34_620759322, tailInHEX60gensym34_620759323) {
  var result_620759325 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759325 = nimCopy(result_620759325, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym34_620759322, NTI620758488), tail: nimCopy(null, tailInHEX60gensym34_620759323, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym34_620759321, NTI33554439), value: []}, NTI620758290);

  return result_620759325;

}
        
function HEX3Aanonymous_620759328(input_620759329) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620759331 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620759332 = succeedImpl_620759313;
            var fail_620759333 = failImpl_620759320;
            Label1: do {
              var tempHEX60gensym38_620759346 = parse_620759020(a_620759080, input_620759329);
              if ((tempHEX60gensym38_620759346.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620759346;
              if (ConstSet23[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
              result_620759331 = nimCopy(result_620759331, {kind: 1, fromInput: nimCopy(null, input_620759329, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym38_620759346.tail, NTI33554439), value: []}, NTI620758290);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620759352 = nimCopy(null, tempHEX60gensym38_620759346, NTI620757839);
            var Temporary3 = result1_620759352;
            if (ConstSet24[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
            var outputs_620759357 = [nimCopy(null, Temporary3.value, NTI620757833)];
            var lastTail_620759358 = nimCopy(null, result1_620759352.tail, NTI33554439);
            Label4: do {
              var i_620759364 = 0;
              var res_620768186 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620768186 <= n_620759081)) break Label6;
                    i_620759364 = res_620768186;
                    Label7: do {
                      var tempHEX60gensym40_620759377 = parse_620759020(a_620759080, result1_620759352.tail);
                      if ((tempHEX60gensym40_620759377.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620759377;
                      if (ConstSet25[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1191182357)); }
                      result_620759331 = nimCopy(result_620759331, {kind: 1, fromInput: nimCopy(null, input_620759329, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym40_620759377.tail, NTI33554439), value: []}, NTI620758290);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620759352 = nimCopy(result1_620759352, tempHEX60gensym40_620759377, NTI620757839);
                    if (eqStrings(result1_620759352.tail, lastTail_620759358)) {
                    break Label4;
                    }
                    
                    lastTail_620759358 = nimCopy(null, result1_620759352.tail, NTI33554439);
                    var Temporary9 = result1_620759352;
                    if (ConstSet26[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1191182357)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI620757833);
                    outputs_620759357.push(Temporary10);;
                    res_620768186 = addInt(res_620768186, 1);
                  }
              } while (false);
            } while (false);
            result_620759331 = nimCopy(result_620759331, succeed_620759332(input_620759329, outputs_620759357, result1_620759352.tail), NTI620758290);
          } while (false);

          return result_620759331;

        }

  var result_620759090 = null;

  BeforeRet: do {
    switch (n_620759081) {
    case 0:
      result_620759090 = nop_620759091();
      break BeforeRet;
      break;
    case 1:
      result_620759090 = map_620759246(a_620759080, HEX3Aanonymous_620759208);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620759328};
      break;
    }
    result_620759090 = Temporary1;
  } while (false);

  return result_620759090;

}

function HEX7C_620758976(a_620758978, b_620758979) {

function succeedImpl_620758991(inputInHEX60gensym30_620758992, valueInHEX60gensym30_620758993, tailInHEX60gensym30_620758994) {
  var result_620758996 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758996 = nimCopy(result_620758996, {kind: 0, value: nimCopy(null, valueInHEX60gensym30_620758993, NTI620757833), tail: nimCopy(null, tailInHEX60gensym30_620758994, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym30_620758992, NTI33554439), expected: []}, NTI620757839);

  return result_620758996;

}

function failImpl_620758998(inputInHEX60gensym30_620758999, expectedInHEX60gensym30_620759000, tailInHEX60gensym30_620759001) {
  var result_620759003 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759003 = nimCopy(result_620759003, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym30_620759000, NTI620758234), tail: nimCopy(null, tailInHEX60gensym30_620759001, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym30_620758999, NTI33554439), value: []}, NTI620757839);

  return result_620759003;

}
      
function HEX3Aanonymous_620759006(input_620759007) {
          var Temporary1;
          var Temporary2;

        var result_620759009 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620759010 = succeedImpl_620758991;
          var fail_620759011 = failImpl_620758998;
          var result1_620759036 = parse_620759020(a_620758978, input_620759007);
          if ((result1_620759036.kind == 0)) {
          result_620759009 = nimCopy(result_620759009, result1_620759036, NTI620757839);
          break BeforeRet;
          }
          
          var result2_620759053 = parse_620759020(b_620758979, input_620759007);
          if ((result2_620759053.kind == 0)) {
          result_620759009 = nimCopy(result_620759009, result2_620759053, NTI620757839);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620759036;
          if (ConstSet27[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1191182357)); }
          var Temporary2 = result2_620759053;
          if (ConstSet28[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
          result_620759009 = nimCopy(result_620759009, fail_620759011(input_620759007, HEX26_654311539(Temporary1.expected, Temporary2.expected), input_620759007), NTI620757839);
        } while (false);

        return result_620759009;

      }

  var result_620758980 = null;

    Label1: do {
    } while (false);
    result_620758980 = {body: HEX3Aanonymous_620759006};

  return result_620758980;

}

function newSeq_452985301(len_452985303) {
  var result_452985304 = [];

    result_452985304 = new Array(len_452985303); for (var i = 0 ; i < len_452985303 ; ++i) { result_452985304[i] = []; }
  return result_452985304;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function parse_620760265(p_620760267, input_620760268) {
  var result_620760269 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620760267.body == null)) {
    result_620760269 = nimCopy(result_620760269, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620760268, NTI33554439), fromInput: nimCopy(null, input_620760268, NTI33554439), value: []}, NTI620758903);
    break BeforeRet;
    }
    
    result_620760269 = nimCopy(result_620760269, p_620760267.body(input_620760268), NTI620758903);
  } while (false);

  return result_620760269;

}

function map_620761071(a_620761074, fn_620761076) {

function succeedImpl_620761088(inputInHEX60gensym70_620761089, valueInHEX60gensym70_620761090, tailInHEX60gensym70_620761091) {
  var result_620761093 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620761093 = nimCopy(result_620761093, {kind: 0, value: nimCopy(null, valueInHEX60gensym70_620761090, NTI654311428), tail: nimCopy(null, tailInHEX60gensym70_620761091, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym70_620761089, NTI33554439), expected: []}, NTI620758888);

  return result_620761093;

}

function failImpl_620761095(inputInHEX60gensym70_620761096, expectedInHEX60gensym70_620761097, tailInHEX60gensym70_620761098) {
  var result_620761100 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620761100 = nimCopy(result_620761100, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym70_620761097, NTI620760023), tail: nimCopy(null, tailInHEX60gensym70_620761098, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym70_620761096, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620761100;

}
      
function HEX3Aanonymous_620761103(input_620761104) {
            var Temporary2;
          var Temporary3;

        var result_620761106 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761107 = succeedImpl_620761088;
          var fail_620761108 = failImpl_620761095;
          Label1: do {
            var tempHEX60gensym24_620761121 = parse_620760265(a_620761074, input_620761104);
            if ((tempHEX60gensym24_620761121.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620761121;
            if (ConstSet29[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620761106 = nimCopy(result_620761106, {kind: 1, fromInput: nimCopy(null, input_620761104, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620761121.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761127 = nimCopy(null, tempHEX60gensym24_620761121, NTI620758903);
          var Temporary3 = result1_620761127;
          if (ConstSet30[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620761106 = nimCopy(result_620761106, succeed_620761107(input_620761104, fn_620761076(Temporary3.value), result1_620761127.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620761106;

      }

  var result_620761077 = null;

    Label1: do {
    } while (false);
    result_620761077 = {body: HEX3Aanonymous_620761103};

  return result_620761077;

}

function parse_620760781(p_620760783, input_620760784) {
  var result_620760785 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620760783.body == null)) {
    result_620760785 = nimCopy(result_620760785, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620760784, NTI33554439), fromInput: nimCopy(null, input_620760784, NTI33554439), value: []}, NTI620759373);
    break BeforeRet;
    }
    
    result_620760785 = nimCopy(result_620760785, p_620760783.body(input_620760784), NTI620759373);
  } while (false);

  return result_620760785;

}

function map_620760985(a_620760988, fn_620760990) {

function succeedImpl_620761002(inputInHEX60gensym69_620761003, valueInHEX60gensym69_620761004, tailInHEX60gensym69_620761005) {
  var result_620761007 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761007 = nimCopy(result_620761007, {kind: 0, value: nimCopy(null, valueInHEX60gensym69_620761004, NTI654311636), tail: nimCopy(null, tailInHEX60gensym69_620761005, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym69_620761003, NTI33554439), expected: []}, NTI620758903);

  return result_620761007;

}

function failImpl_620761009(inputInHEX60gensym69_620761010, expectedInHEX60gensym69_620761011, tailInHEX60gensym69_620761012) {
  var result_620761014 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761014 = nimCopy(result_620761014, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym69_620761011, NTI620759958), tail: nimCopy(null, tailInHEX60gensym69_620761012, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym69_620761010, NTI33554439), value: []}, NTI620758903);

  return result_620761014;

}
      
function HEX3Aanonymous_620761017(input_620761018) {
            var Temporary2;
          var Temporary3;

        var result_620761020 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761021 = succeedImpl_620761002;
          var fail_620761022 = failImpl_620761009;
          Label1: do {
            var tempHEX60gensym24_620761035 = parse_620760781(a_620760988, input_620761018);
            if ((tempHEX60gensym24_620761035.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620761035;
            if (ConstSet31[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620761020 = nimCopy(result_620761020, {kind: 1, fromInput: nimCopy(null, input_620761018, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620761035.tail, NTI33554439), value: []}, NTI620758903);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761041 = nimCopy(null, tempHEX60gensym24_620761035, NTI620759373);
          var Temporary3 = result1_620761041;
          if (ConstSet32[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620761020 = nimCopy(result_620761020, succeed_620761021(input_620761018, fn_620760990(Temporary3.value), result1_620761041.tail), NTI620758903);
          break BeforeRet;
        } while (false);

        return result_620761020;

      }

  var result_620760991 = null;

    Label1: do {
    } while (false);
    result_620760991 = {body: HEX3Aanonymous_620761017};

  return result_620760991;

}

function HEX26_620760823(x_620760825, y_620760826) {
  var result_620760827 = [];

    result_620760827 = new Array(chckRange(addInt((x_620760825).length, (y_620760826).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620760825).length, (y_620760826).length), 0, 2147483647) ; ++i) { result_620760827[i] = []; }    Label1: do {
      var i_620760846 = 0;
      var colontmp__620768203 = 0;
      colontmp__620768203 = subInt((x_620760825).length, 1);
      var res_620768204 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768204 <= colontmp__620768203)) break Label3;
            i_620760846 = res_620768204;
            result_620760827[chckIndx(i_620760846, 0, (result_620760827).length - 1)] = nimCopy(null, x_620760825[chckIndx(i_620760846, 0, (x_620760825).length - 1)], NTI620758897);
            res_620768204 = addInt(res_620768204, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620760854 = 0;
      var colontmp__620768207 = 0;
      colontmp__620768207 = subInt((y_620760826).length, 1);
      var res_620768208 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620768208 <= colontmp__620768207)) break Label6;
            i_620760854 = res_620768208;
            result_620760827[chckIndx(addInt(i_620760854, (x_620760825).length), 0, (result_620760827).length - 1)] = nimCopy(null, y_620760826[chckIndx(i_620760854, 0, (y_620760826).length - 1)], NTI620758897);
            res_620768208 = addInt(res_620768208, 1);
          }
      } while (false);
    } while (false);

  return result_620760827;

}

function HEX26_620760728(a_620760733, b_620760737) {

function succeedImpl_620760752(inputInHEX60gensym63_620760753, valueInHEX60gensym63_620760754, tailInHEX60gensym63_620760755) {
  var result_620760757 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760757 = nimCopy(result_620760757, {kind: 0, value: nimCopy(null, valueInHEX60gensym63_620760754, NTI620759757), tail: nimCopy(null, tailInHEX60gensym63_620760755, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym63_620760753, NTI33554439), expected: []}, NTI620759373);

  return result_620760757;

}

function failImpl_620760759(inputInHEX60gensym63_620760760, expectedInHEX60gensym63_620760761, tailInHEX60gensym63_620760762) {
  var result_620760764 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760764 = nimCopy(result_620760764, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym63_620760761, NTI620759763), tail: nimCopy(null, tailInHEX60gensym63_620760762, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym63_620760760, NTI33554439), value: []}, NTI620759373);

  return result_620760764;

}
      
function HEX3Aanonymous_620760767(input_620760768) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_620760770 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620760771 = succeedImpl_620760752;
          var fail_620760772 = failImpl_620760759;
          Label1: do {
            var tempHEX60gensym26_620760797 = parse_620760781(a_620760733, input_620760768);
            if ((tempHEX60gensym26_620760797.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_620760797;
            if (ConstSet33[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620760770 = nimCopy(result_620760770, {kind: 1, fromInput: nimCopy(null, input_620760768, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym26_620760797.tail, NTI33554439), value: []}, NTI620759373);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620760803 = nimCopy(null, tempHEX60gensym26_620760797, NTI620759373);
          Label3: do {
            var tempHEX60gensym28_620760816 = parse_620760781(b_620760737, result1_620760803.tail);
            if ((tempHEX60gensym28_620760816.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_620760816;
            if (ConstSet34[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620760770 = nimCopy(result_620760770, {kind: 1, fromInput: nimCopy(null, input_620760768, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym28_620760816.tail, NTI33554439), value: []}, NTI620759373);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620760822 = nimCopy(null, tempHEX60gensym28_620760816, NTI620759373);
          var Temporary5 = result1_620760803;
          if (ConstSet35[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          var Temporary6 = result2_620760822;
          if (ConstSet36[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1191182357)); }
          result_620760770 = nimCopy(result_620760770, succeed_620760771(input_620760768, HEX26_620760823(Temporary5.value, Temporary6.value), result2_620760822.tail), NTI620759373);
          break BeforeRet;
        } while (false);

        return result_620760770;

      }

  var result_620760741 = null;

    Label1: do {
    } while (false);
    result_620760741 = {body: HEX3Aanonymous_620760767};

  return result_620760741;

}

function map_620760491(a_620760494, fn_620760496) {

function succeedImpl_620760508(inputInHEX60gensym59_620760509, valueInHEX60gensym59_620760510, tailInHEX60gensym59_620760511) {
  var result_620760513 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760513 = nimCopy(result_620760513, {kind: 0, value: nimCopy(null, valueInHEX60gensym59_620760510, NTI620759482), tail: nimCopy(null, tailInHEX60gensym59_620760511, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym59_620760509, NTI33554439), expected: []}, NTI620759373);

  return result_620760513;

}

function failImpl_620760515(inputInHEX60gensym59_620760516, expectedInHEX60gensym59_620760517, tailInHEX60gensym59_620760518) {
  var result_620760520 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760520 = nimCopy(result_620760520, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym59_620760517, NTI620759525), tail: nimCopy(null, tailInHEX60gensym59_620760518, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym59_620760516, NTI33554439), value: []}, NTI620759373);

  return result_620760520;

}
      
function HEX3Aanonymous_620760523(input_620760524) {
            var Temporary2;
          var Temporary3;

        var result_620760526 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620760527 = succeedImpl_620760508;
          var fail_620760528 = failImpl_620760515;
          Label1: do {
            var tempHEX60gensym24_620760541 = parse_620760265(a_620760494, input_620760524);
            if ((tempHEX60gensym24_620760541.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620760541;
            if (ConstSet37[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620760526 = nimCopy(result_620760526, {kind: 1, fromInput: nimCopy(null, input_620760524, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620760541.tail, NTI33554439), value: []}, NTI620759373);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620760547 = nimCopy(null, tempHEX60gensym24_620760541, NTI620758903);
          var Temporary3 = result1_620760547;
          if (ConstSet38[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620760526 = nimCopy(result_620760526, succeed_620760527(input_620760524, fn_620760496(Temporary3.value), result1_620760547.tail), NTI620759373);
          break BeforeRet;
        } while (false);

        return result_620760526;

      }

  var result_620760497 = null;

    Label1: do {
    } while (false);
    result_620760497 = {body: HEX3Aanonymous_620760523};

  return result_620760497;

}

function nop_620759831() {

function succeedImpl_620759844(inputInHEX60gensym49_620759845, valueInHEX60gensym49_620759846, tailInHEX60gensym49_620759847) {
  var result_620759849 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759849 = nimCopy(result_620759849, {kind: 0, value: nimCopy(null, valueInHEX60gensym49_620759846, NTI620758957), tail: nimCopy(null, tailInHEX60gensym49_620759847, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_620759845, NTI33554439), expected: []}, NTI620758903);

  return result_620759849;

}

function failImpl_620759863(inputInHEX60gensym49_620759864, expectedInHEX60gensym49_620759865, tailInHEX60gensym49_620759866) {
  var result_620759868 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759868 = nimCopy(result_620759868, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym49_620759865, NTI620758984), tail: nimCopy(null, tailInHEX60gensym49_620759866, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_620759864, NTI33554439), value: []}, NTI620758903);

  return result_620759868;

}
      
function HEX3Aanonymous_620759871(input_620759872) {
        var result_620759874 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620759875 = succeedImpl_620759844;
          var fail_620759876 = failImpl_620759863;
          result_620759874 = nimCopy(result_620759874, succeed_620759875(input_620759872, [], input_620759872), NTI620758903);

        return result_620759874;

      }

  var result_620759833 = null;

    Label1: do {
    } while (false);
    result_620759833 = {body: HEX3Aanonymous_620759871};

  return result_620759833;

}

function parse_620760023(p_620760025, input_620760026) {
  var result_620760027 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620760025.body == null)) {
    result_620760027 = nimCopy(result_620760027, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620760026, NTI33554439), fromInput: nimCopy(null, input_620760026, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
    break BeforeRet;
    }
    
    result_620760027 = nimCopy(result_620760027, p_620760025.body(input_620760026), NTI620758888);
  } while (false);

  return result_620760027;

}

function map_620759977(a_620759980, fn_620759982) {

function succeedImpl_620759994(inputInHEX60gensym51_620759995, valueInHEX60gensym51_620759996, tailInHEX60gensym51_620759997) {
  var result_620759999 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759999 = nimCopy(result_620759999, {kind: 0, value: nimCopy(null, valueInHEX60gensym51_620759996, NTI620759053), tail: nimCopy(null, tailInHEX60gensym51_620759997, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym51_620759995, NTI33554439), expected: []}, NTI620758903);

  return result_620759999;

}

function failImpl_620760001(inputInHEX60gensym51_620760002, expectedInHEX60gensym51_620760003, tailInHEX60gensym51_620760004) {
  var result_620760006 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760006 = nimCopy(result_620760006, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym51_620760003, NTI620759096), tail: nimCopy(null, tailInHEX60gensym51_620760004, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym51_620760002, NTI33554439), value: []}, NTI620758903);

  return result_620760006;

}
      
function HEX3Aanonymous_620760009(input_620760010) {
            var Temporary2;
          var Temporary3;

        var result_620760012 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620760013 = succeedImpl_620759994;
          var fail_620760014 = failImpl_620760001;
          Label1: do {
            var tempHEX60gensym24_620760051 = parse_620760023(a_620759980, input_620760010);
            if ((tempHEX60gensym24_620760051.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620760051;
            if (ConstSet39[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620760012 = nimCopy(result_620760012, {kind: 1, fromInput: nimCopy(null, input_620760010, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620760051.tail, NTI33554439), value: []}, NTI620758903);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620760057 = nimCopy(null, tempHEX60gensym24_620760051, NTI620758888);
          var Temporary3 = result1_620760057;
          if (ConstSet40[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620760012 = nimCopy(result_620760012, succeed_620760013(input_620760010, fn_620759982(Temporary3.value), result1_620760057.tail), NTI620758903);
          break BeforeRet;
        } while (false);

        return result_620760012;

      }

  var result_620759983 = null;

    Label1: do {
    } while (false);
    result_620759983 = {body: HEX3Aanonymous_620760009};

  return result_620759983;

}

function HEX2A_620759823(a_620759825, n_620759826) {
    var Temporary1;
      
function HEX3Aanonymous_620759939(x_620759968) {
        var result_620759971 = [];

          result_620759971 = nimCopy(null, [nimCopy(null, x_620759968, NTI654311428)], NTI620759053);

        return result_620759971;

      }

function succeedImpl_620760068(inputInHEX60gensym52_620760069, valueInHEX60gensym52_620760070, tailInHEX60gensym52_620760071) {
  var result_620760073 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760073 = nimCopy(result_620760073, {kind: 0, value: nimCopy(null, valueInHEX60gensym52_620760070, NTI620759155), tail: nimCopy(null, tailInHEX60gensym52_620760071, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym52_620760069, NTI33554439), expected: []}, NTI620758903);

  return result_620760073;

}

function failImpl_620760075(inputInHEX60gensym52_620760076, expectedInHEX60gensym52_620760077, tailInHEX60gensym52_620760078) {
  var result_620760080 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760080 = nimCopy(result_620760080, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym52_620760077, NTI620759161), tail: nimCopy(null, tailInHEX60gensym52_620760078, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym52_620760076, NTI33554439), value: []}, NTI620758903);

  return result_620760080;

}
        
function HEX3Aanonymous_620760083(input_620760084) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620760086 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620760087 = succeedImpl_620760068;
            var fail_620760088 = failImpl_620760075;
            Label1: do {
              var tempHEX60gensym38_620760101 = parse_620760023(a_620759825, input_620760084);
              if ((tempHEX60gensym38_620760101.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620760101;
              if (ConstSet41[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
              result_620760086 = nimCopy(result_620760086, {kind: 1, fromInput: nimCopy(null, input_620760084, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym38_620760101.tail, NTI33554439), value: []}, NTI620758903);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620760107 = nimCopy(null, tempHEX60gensym38_620760101, NTI620758888);
            var Temporary3 = result1_620760107;
            if (ConstSet42[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
            var outputs_620760112 = [nimCopy(null, Temporary3.value, NTI654311428)];
            var lastTail_620760113 = nimCopy(null, result1_620760107.tail, NTI33554439);
            Label4: do {
              var i_620760119 = 0;
              var res_620768216 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620768216 <= n_620759826)) break Label6;
                    i_620760119 = res_620768216;
                    Label7: do {
                      var tempHEX60gensym40_620760132 = parse_620760023(a_620759825, result1_620760107.tail);
                      if ((tempHEX60gensym40_620760132.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620760132;
                      if (ConstSet43[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1191182357)); }
                      result_620760086 = nimCopy(result_620760086, {kind: 1, fromInput: nimCopy(null, input_620760084, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym40_620760132.tail, NTI33554439), value: []}, NTI620758903);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620760107 = nimCopy(result1_620760107, tempHEX60gensym40_620760132, NTI620758888);
                    if (eqStrings(result1_620760107.tail, lastTail_620760113)) {
                    break Label4;
                    }
                    
                    lastTail_620760113 = nimCopy(null, result1_620760107.tail, NTI33554439);
                    var Temporary9 = result1_620760107;
                    if (ConstSet44[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1191182357)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI654311428);
                    outputs_620760112.push(Temporary10);;
                    res_620768216 = addInt(res_620768216, 1);
                  }
              } while (false);
            } while (false);
            result_620760086 = nimCopy(result_620760086, succeed_620760087(input_620760084, outputs_620760112, result1_620760107.tail), NTI620758903);
          } while (false);

          return result_620760086;

        }

  var result_620759830 = null;

  BeforeRet: do {
    switch (n_620759826) {
    case 0:
      result_620759830 = nop_620759831();
      break BeforeRet;
      break;
    case 1:
      result_620759830 = map_620759977(a_620759825, HEX3Aanonymous_620759939);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620760083};
      break;
    }
    result_620759830 = Temporary1;
  } while (false);

  return result_620759830;

}

function nop_620760336() {

function succeedImpl_620760349(inputInHEX60gensym57_620760350, valueInHEX60gensym57_620760351, tailInHEX60gensym57_620760352) {
  var result_620760354 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760354 = nimCopy(result_620760354, {kind: 0, value: nimCopy(null, valueInHEX60gensym57_620760351, NTI620759380), tail: nimCopy(null, tailInHEX60gensym57_620760352, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym57_620760350, NTI33554439), expected: []}, NTI620759373);

  return result_620760354;

}

function failImpl_620760377(inputInHEX60gensym57_620760378, expectedInHEX60gensym57_620760379, tailInHEX60gensym57_620760380) {
  var result_620760382 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760382 = nimCopy(result_620760382, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym57_620760379, NTI620759413), tail: nimCopy(null, tailInHEX60gensym57_620760380, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym57_620760378, NTI33554439), value: []}, NTI620759373);

  return result_620760382;

}
      
function HEX3Aanonymous_620760385(input_620760386) {
        var result_620760388 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620760389 = succeedImpl_620760349;
          var fail_620760390 = failImpl_620760377;
          result_620760388 = nimCopy(result_620760388, succeed_620760389(input_620760386, [], input_620760386), NTI620759373);

        return result_620760388;

      }

  var result_620760338 = null;

    Label1: do {
    } while (false);
    result_620760338 = {body: HEX3Aanonymous_620760385};

  return result_620760338;

}

function HEX2A_620760323(a_620760325, n_620760326) {
    var Temporary1;
      
function HEX3Aanonymous_620760453(x_620760482) {
        var result_620760485 = [];

          result_620760485 = nimCopy(null, [nimCopy(null, x_620760482, NTI620758897)], NTI620759482);

        return result_620760485;

      }

function succeedImpl_620760558(inputInHEX60gensym60_620760559, valueInHEX60gensym60_620760560, tailInHEX60gensym60_620760561) {
  var result_620760563 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760563 = nimCopy(result_620760563, {kind: 0, value: nimCopy(null, valueInHEX60gensym60_620760560, NTI620759565), tail: nimCopy(null, tailInHEX60gensym60_620760561, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym60_620760559, NTI33554439), expected: []}, NTI620759373);

  return result_620760563;

}

function failImpl_620760565(inputInHEX60gensym60_620760566, expectedInHEX60gensym60_620760567, tailInHEX60gensym60_620760568) {
  var result_620760570 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760570 = nimCopy(result_620760570, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym60_620760567, NTI620759571), tail: nimCopy(null, tailInHEX60gensym60_620760568, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym60_620760566, NTI33554439), value: []}, NTI620759373);

  return result_620760570;

}
        
function HEX3Aanonymous_620760573(input_620760574) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620760576 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620760577 = succeedImpl_620760558;
            var fail_620760578 = failImpl_620760565;
            Label1: do {
              var tempHEX60gensym38_620760591 = parse_620760265(a_620760325, input_620760574);
              if ((tempHEX60gensym38_620760591.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620760591;
              if (ConstSet45[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
              result_620760576 = nimCopy(result_620760576, {kind: 1, fromInput: nimCopy(null, input_620760574, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym38_620760591.tail, NTI33554439), value: []}, NTI620759373);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620760597 = nimCopy(null, tempHEX60gensym38_620760591, NTI620758903);
            var Temporary3 = result1_620760597;
            if (ConstSet46[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
            var outputs_620760602 = [nimCopy(null, Temporary3.value, NTI620758897)];
            var lastTail_620760603 = nimCopy(null, result1_620760597.tail, NTI33554439);
            Label4: do {
              var i_620760609 = 0;
              var res_620768225 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620768225 <= n_620760326)) break Label6;
                    i_620760609 = res_620768225;
                    Label7: do {
                      var tempHEX60gensym40_620760622 = parse_620760265(a_620760325, result1_620760597.tail);
                      if ((tempHEX60gensym40_620760622.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620760622;
                      if (ConstSet47[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1191182357)); }
                      result_620760576 = nimCopy(result_620760576, {kind: 1, fromInput: nimCopy(null, input_620760574, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym40_620760622.tail, NTI33554439), value: []}, NTI620759373);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620760597 = nimCopy(result1_620760597, tempHEX60gensym40_620760622, NTI620758903);
                    if (eqStrings(result1_620760597.tail, lastTail_620760603)) {
                    break Label4;
                    }
                    
                    lastTail_620760603 = nimCopy(null, result1_620760597.tail, NTI33554439);
                    var Temporary9 = result1_620760597;
                    if (ConstSet48[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1191182357)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI620758897);
                    outputs_620760602.push(Temporary10);;
                    res_620768225 = addInt(res_620768225, 1);
                  }
              } while (false);
            } while (false);
            result_620760576 = nimCopy(result_620760576, succeed_620760577(input_620760574, outputs_620760602, result1_620760597.tail), NTI620759373);
          } while (false);

          return result_620760576;

        }

  var result_620760335 = null;

  BeforeRet: do {
    switch (n_620760326) {
    case 0:
      result_620760335 = nop_620760336();
      break BeforeRet;
      break;
    case 1:
      result_620760335 = map_620760491(a_620760325, HEX3Aanonymous_620760453);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620760573};
      break;
    }
    result_620760335 = Temporary1;
  } while (false);

  return result_620760335;

}

function HEX7C_620760221(a_620760223, b_620760224) {

function succeedImpl_620760236(inputInHEX60gensym56_620760237, valueInHEX60gensym56_620760238, tailInHEX60gensym56_620760239) {
  var result_620760241 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760241 = nimCopy(result_620760241, {kind: 0, value: nimCopy(null, valueInHEX60gensym56_620760238, NTI620758897), tail: nimCopy(null, tailInHEX60gensym56_620760239, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym56_620760237, NTI33554439), expected: []}, NTI620758903);

  return result_620760241;

}

function failImpl_620760243(inputInHEX60gensym56_620760244, expectedInHEX60gensym56_620760245, tailInHEX60gensym56_620760246) {
  var result_620760248 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760248 = nimCopy(result_620760248, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym56_620760245, NTI620759317), tail: nimCopy(null, tailInHEX60gensym56_620760246, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym56_620760244, NTI33554439), value: []}, NTI620758903);

  return result_620760248;

}
      
function HEX3Aanonymous_620760251(input_620760252) {
          var Temporary1;
          var Temporary2;

        var result_620760254 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620760255 = succeedImpl_620760236;
          var fail_620760256 = failImpl_620760243;
          var result1_620760281 = parse_620760265(a_620760223, input_620760252);
          if ((result1_620760281.kind == 0)) {
          result_620760254 = nimCopy(result_620760254, result1_620760281, NTI620758903);
          break BeforeRet;
          }
          
          var result2_620760298 = parse_620760265(b_620760224, input_620760252);
          if ((result2_620760298.kind == 0)) {
          result_620760254 = nimCopy(result_620760254, result2_620760298, NTI620758903);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620760281;
          if (ConstSet49[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1191182357)); }
          var Temporary2 = result2_620760298;
          if (ConstSet50[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
          result_620760254 = nimCopy(result_620760254, fail_620760256(input_620760252, HEX26_654311539(Temporary1.expected, Temporary2.expected), input_620760252), NTI620758903);
        } while (false);

        return result_620760254;

      }

  var result_620760225 = null;

    Label1: do {
    } while (false);
    result_620760225 = {body: HEX3Aanonymous_620760251};

  return result_620760225;

}

function newSeq_654311768(len_654311770) {
  var result_654311771 = [];

    result_654311771 = new Array(len_654311770); for (var i = 0 ; i < len_654311770 ; ++i) { result_654311771[i] = ({rows: [], baseline: 0, width: 0, flag: 0}); }
  return result_654311771;

}

function HEX26_620760909(x_620760911, y_620760912) {
  var result_620760913 = [];

    result_620760913 = new Array(chckRange(addInt((x_620760911).length, (y_620760912).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620760911).length, (y_620760912).length), 0, 2147483647) ; ++i) { result_620760913[i] = ({rows: [], baseline: 0, width: 0, flag: 0}); }    Label1: do {
      var i_620760931 = 0;
      var colontmp__620768235 = 0;
      colontmp__620768235 = subInt((x_620760911).length, 1);
      var res_620768236 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768236 <= colontmp__620768235)) break Label3;
            i_620760931 = res_620768236;
            result_620760913[chckIndx(i_620760931, 0, (result_620760913).length - 1)] = nimCopy(result_620760913[chckIndx(i_620760931, 0, (result_620760913).length - 1)], x_620760911[chckIndx(i_620760931, 0, (x_620760911).length - 1)], NTI654311428);
            res_620768236 = addInt(res_620768236, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620760939 = 0;
      var colontmp__620768239 = 0;
      colontmp__620768239 = subInt((y_620760912).length, 1);
      var res_620768240 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620768240 <= colontmp__620768239)) break Label6;
            i_620760939 = res_620768240;
            result_620760913[chckIndx(addInt(i_620760939, (x_620760911).length), 0, (result_620760913).length - 1)] = nimCopy(result_620760913[chckIndx(addInt(i_620760939, (x_620760911).length), 0, (result_620760913).length - 1)], y_620760912[chckIndx(i_620760939, 0, (y_620760912).length - 1)], NTI654311428);
            res_620768240 = addInt(res_620768240, 1);
          }
      } while (false);
    } while (false);

  return result_620760913;

}

function height_654311468(rect_654311469) {
  var result_654311470 = 0;

    result_654311470 = chckRange((rect_654311469.rows).length, 0, 2147483647);

  return result_654311470;

}

function isEmpty_654311474(rect_654311475) {
  var result_654311476 = false;

    result_654311476 = (height_654311468(rect_654311475) == 0);

  return result_654311476;

}

function HEX3DHEX3D_654311848(x_654311850, y_654311851) {
  var result_654311852 = false;

  BeforeRet: do {
    var sameObject_654311859 = false;
    sameObject_654311859 = x_654311850 === y_654311851
    if (sameObject_654311859) {
    result_654311852 = true;
    break BeforeRet;
    }
    
    if (!(((x_654311850).length == (y_654311851).length))) {
    result_654311852 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_654311873 = 0;
      var colontmp__620768295 = 0;
      colontmp__620768295 = subInt((x_654311850).length, 1);
      var res_620768296 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768296 <= colontmp__620768295)) break Label3;
            i_654311873 = res_620768296;
            if (!(eqStrings(x_654311850[chckIndx(i_654311873, 0, (x_654311850).length - 1)], y_654311851[chckIndx(i_654311873, 0, (y_654311851).length - 1)]))) {
            result_654311852 = false;
            break BeforeRet;
            }
            
            res_620768296 = addInt(res_620768296, 1);
          }
      } while (false);
    } while (false);
    result_654311852 = true;
    break BeforeRet;
  } while (false);

  return result_654311852;

}

function HEX3DHEX3D_654311838(x_654311840, y_654311841) {
  var result_654311842 = false;

  BeforeRet: do {
    if (!(HEX3DHEX3D_654311848(x_654311840.rows, y_654311841.rows))) {
    result_654311842 = false;
    break BeforeRet;
    }
    
    if (!((x_654311840.baseline == y_654311841.baseline))) {
    result_654311842 = false;
    break BeforeRet;
    }
    
    if (!((x_654311840.width == y_654311841.width))) {
    result_654311842 = false;
    break BeforeRet;
    }
    
    if (!((x_654311840.flag == y_654311841.flag))) {
    result_654311842 = false;
    break BeforeRet;
    }
    
    result_654311842 = true;
    break BeforeRet;
  } while (false);

  return result_654311842;

}

function HEX3DHEX3D_654311812(x_654311814, y_654311815) {
  var result_654311816 = false;

  BeforeRet: do {
    var sameObject_654311823 = false;
    sameObject_654311823 = x_654311814 === y_654311815
    if (sameObject_654311823) {
    result_654311816 = true;
    break BeforeRet;
    }
    
    if (!(((x_654311814).length == (y_654311815).length))) {
    result_654311816 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_654311837 = 0;
      var colontmp__620768291 = 0;
      colontmp__620768291 = subInt((x_654311814).length, 1);
      var res_620768292 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768292 <= colontmp__620768291)) break Label3;
            i_654311837 = res_620768292;
            if (!(HEX3DHEX3D_654311838(x_654311814[chckIndx(i_654311837, 0, (x_654311814).length - 1)], y_654311815[chckIndx(i_654311837, 0, (y_654311815).length - 1)]))) {
            result_654311816 = false;
            break BeforeRet;
            }
            
            res_620768292 = addInt(res_620768292, 1);
          }
      } while (false);
    } while (false);
    result_654311816 = true;
    break BeforeRet;
  } while (false);

  return result_654311816;

}

function extendRight_654311630(rect_654311631) {
    Label1: do {
      var row_654311635 = null;
      var row_654311635_Idx = 0;
      var i_620768300 = 0;
      var L_620768301 = (rect_654311631.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768300 < L_620768301)) break Label3;
            row_654311635 = rect_654311631.rows; row_654311635_Idx = chckIndx(i_620768300, 0, (rect_654311631.rows).length - 1);
            row_654311635[row_654311635_Idx].push.apply(row_654311635[row_654311635_Idx], makeNimstrLit(" "));;
            i_620768300 = addInt(i_620768300, 1);
            if (!(((rect_654311631.rows).length == L_620768301))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rect_654311631.width = addInt(rect_654311631.width, 1);

  
}

function extendLeft_654311585(rect_654311586) {
    Label1: do {
      var row_654311607 = null;
      var row_654311607_Idx = 0;
      var i_620768304 = 0;
      var L_620768305 = (rect_654311586.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768304 < L_620768305)) break Label3;
            row_654311607 = rect_654311586.rows; row_654311607_Idx = chckIndx(i_620768304, 0, (rect_654311586.rows).length - 1);
            row_654311607[row_654311607_Idx] = nimCopy(null, (makeNimstrLit(" ") || []).concat(row_654311607[row_654311607_Idx] || []), NTI33554439);
            i_620768304 = addInt(i_620768304, 1);
            if (!(((rect_654311586.rows).length == L_620768305))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rect_654311586.width = addInt(rect_654311586.width, 1);

  
}

function max_654312020(x_654312022) {
  var result_654312023 = 0;

    result_654312023 = x_654312022[chckIndx(0, 0, (x_654312022).length - 1)];
    Label1: do {
      var i_654312031 = 0;
      var colontmp__620768308 = 0;
      colontmp__620768308 = (x_654312022).length - 1;
      var res_620768309 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768309 <= colontmp__620768308)) break Label3;
            i_654312031 = res_620768309;
            if ((result_654312023 < x_654312022[chckIndx(i_654312031, 0, (x_654312022).length - 1)])) {
            result_654312023 = x_654312022[chckIndx(i_654312031, 0, (x_654312022).length - 1)];
            }
            
            res_620768309 = addInt(res_620768309, 1);
          }
      } while (false);
    } while (false);

  return result_654312023;

}

function newSeq_654311994(len_654311996) {
  var result_654311997 = [];

    result_654311997 = new Array(len_654311996); for (var i = 0 ; i < len_654311996 ; ++i) { result_654311997[i] = 0; }
  return result_654311997;

}

function repeat_654311526(x_654311528, n_654311529) {
  var result_654311530 = [];

    result_654311530 = nimCopy(null, newSeq_452985301(n_654311529), NTI452985127);
    Label1: do {
      var i_654311538 = 0;
      var colontmp__620768312 = 0;
      colontmp__620768312 = n_654311529;
      var i_620768313 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768313 < colontmp__620768312)) break Label3;
            i_654311538 = i_620768313;
            result_654311530[chckIndx(i_654311538, 0, (result_654311530).length - 1)] = nimCopy(null, x_654311528, NTI33554439);
            i_620768313 = addInt(i_620768313, 1);
          }
      } while (false);
    } while (false);

  return result_654311530;

}

function nsuRepeatChar(c_671089659, count_671089660) {
  var result_671089661 = [];

    result_671089661 = nimCopy(null, mnewString(count_671089660), NTI33554439);
    Label1: do {
      var i_671089666 = 0;
      var colontmp__620768316 = 0;
      colontmp__620768316 = subInt(count_671089660, 1);
      var res_620768317 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768317 <= colontmp__620768316)) break Label3;
            i_671089666 = res_620768317;
            result_671089661[chckIndx(i_671089666, 0, (result_671089661).length - 1)] = c_671089659;
            res_620768317 = addInt(res_620768317, 1);
          }
      } while (false);
    } while (false);

  return result_671089661;

}

function extendUp_654311522(rect_654311523, num_654311524) {
  var result_654311525 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_654311525.rows = nimCopy(null, HEX26_654311539(repeat_654311526(nsuRepeatChar(32, rect_654311523.width), num_654311524), rect_654311523.rows), NTI654311493);
    result_654311525.baseline = addInt(rect_654311523.baseline, num_654311524);
    result_654311525.width = rect_654311523.width;

  return result_654311525;

}

function max_654312097(x_654312099) {
  var result_654312100 = 0;

    result_654312100 = x_654312099[chckIndx(0, 0, (x_654312099).length - 1)];
    Label1: do {
      var i_654312108 = 0;
      var colontmp__620768320 = 0;
      colontmp__620768320 = (x_654312099).length - 1;
      var res_620768321 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768321 <= colontmp__620768320)) break Label3;
            i_654312108 = res_620768321;
            if ((result_654312100 < x_654312099[chckIndx(i_654312108, 0, (x_654312099).length - 1)])) {
            result_654312100 = x_654312099[chckIndx(i_654312108, 0, (x_654312099).length - 1)];
            }
            
            res_620768321 = addInt(res_620768321, 1);
          }
      } while (false);
    } while (false);

  return result_654312100;

}

function newSeq_654312071(len_654312073) {
  var result_654312074 = [];

    result_654312074 = new Array(len_654312073); for (var i = 0 ; i < len_654312073 ; ++i) { result_654312074[i] = 0; }
  return result_654312074;

}

function extendDown_654311573(rect_654311574, num_654311575) {
  var result_654311576 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_654311576.rows = nimCopy(null, HEX26_654311539(rect_654311574.rows, repeat_654311526(nsuRepeatChar(32, rect_654311574.width), num_654311575)), NTI654311493);
    result_654311576.baseline = rect_654311574.baseline;
    result_654311576.width = rect_654311574.width;

  return result_654311576;

}

function nsuJoinSep(a_671090065, sep_671090066) {
  var result_671090067 = [];

    if ((0 < (a_671090065).length)) {
    var L_671090074 = mulInt((sep_671090066).length, subInt((a_671090065).length, 1));
    Label1: do {
      var i_671090082 = 0;
      var colontmp__620768324 = 0;
      colontmp__620768324 = (a_671090065).length - 1;
      var res_620768325 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768325 <= colontmp__620768324)) break Label3;
            i_671090082 = res_620768325;
            L_671090074 = addInt(L_671090074, (a_671090065[chckIndx(i_671090082, 0, (a_671090065).length - 1)]).length);
            res_620768325 = addInt(res_620768325, 1);
          }
      } while (false);
    } while (false);
    result_671090067 = nimCopy(null, mnewString(0), NTI33554439);
    result_671090067.push.apply(result_671090067, a_671090065[chckIndx(0, 0, (a_671090065).length - 1)]);;
    Label4: do {
      var i_671090094 = 0;
      var colontmp__620768328 = 0;
      colontmp__620768328 = (a_671090065).length - 1;
      var res_620768329 = 1;
      Label5: do {
          Label6: while (true) {
          if (!(res_620768329 <= colontmp__620768328)) break Label6;
            i_671090094 = res_620768329;
            result_671090067.push.apply(result_671090067, sep_671090066);;
            result_671090067.push.apply(result_671090067, a_671090065[chckIndx(i_671090094, 0, (a_671090065).length - 1)]);;
            res_620768329 = addInt(res_620768329, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_671090067 = nimCopy(null, [], NTI33554439);
    }
    

  return result_671090067;

}

function sum_654312237(x_654312239) {
  var result_654312240 = 0;

    Label1: do {
      var i_654312253 = 0;
      var i_620768333 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768333 < (x_654312239).length)) break Label3;
            i_654312253 = x_654312239[i_620768333];
            result_654312240 = (result_654312240 + i_654312253);
            i_620768333 += 1;
          }
      } while (false);
    } while (false);

  return result_654312240;

}

function join_654311640(rects_654311641) {
                var Temporary11;
                var Temporary12;
                var Temporary13;

  var result_654311642 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    Label1: do {
      var iHEX60gensym10_654311763 = 0;
      var resultHEX60gensym10_654311776 = newSeq_654311768(chckRange((rects_654311641).length, 0, 2147483647));
      Label2: do {
        var itHEX60gensym10_654311780 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620768245 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_620768245 < (rects_654311641).length)) break Label4;
              itHEX60gensym10_654311780 = rects_654311641[chckIndx(i_620768245, 0, (rects_654311641).length - 1)];
              resultHEX60gensym10_654311776[chckIndx(iHEX60gensym10_654311763, 0, (resultHEX60gensym10_654311776).length - 1)] = nimCopy(resultHEX60gensym10_654311776[chckIndx(iHEX60gensym10_654311763, 0, (resultHEX60gensym10_654311776).length - 1)], itHEX60gensym10_654311780, NTI654311428);
              iHEX60gensym10_654311763 = addInt(iHEX60gensym10_654311763, 1);
              i_620768245 = addInt(i_620768245, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var rects_654311785 = [nimCopy(null, resultHEX60gensym10_654311776, NTI654311636)];
    var posHEX60gensym13_654311789 = 0;
    Label5: do {
      var iHEX60gensym13_654311798 = 0;
      var colontmp__620768248 = 0;
      colontmp__620768248 = (rects_654311785[0]).length;
      var i_620768249 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(i_620768249 < colontmp__620768248)) break Label7;
            iHEX60gensym13_654311798 = i_620768249;
            var it_654311799 = nimCopy(null, rects_654311785[0][chckIndx(iHEX60gensym13_654311798, 0, (rects_654311785[0]).length - 1)], NTI654311428);
            if (!(isEmpty_654311474(it_654311799))) {
            if (!((posHEX60gensym13_654311789 == iHEX60gensym13_654311798))) {
            rects_654311785[0][chckIndx(posHEX60gensym13_654311789, 0, (rects_654311785[0]).length - 1)] = nimCopy(rects_654311785[0][chckIndx(posHEX60gensym13_654311789, 0, (rects_654311785[0]).length - 1)], rects_654311785[0][chckIndx(iHEX60gensym13_654311798, 0, (rects_654311785[0]).length - 1)], NTI654311428);
            }
            
            posHEX60gensym13_654311789 = addInt(posHEX60gensym13_654311789, 1);
            }
            
            i_620768249 = addInt(i_620768249, 1);
          }
      } while (false);
    } while (false);
    if (rects_654311785[0].length < chckRange(posHEX60gensym13_654311789, 0, 2147483647)) { for (var i = rects_654311785[0].length ; i < chckRange(posHEX60gensym13_654311789, 0, 2147483647) ; ++i) rects_654311785[0].push(({rows: [], baseline: 0, width: 0, flag: 0})); }
               else { rects_654311785[0].length = chckRange(posHEX60gensym13_654311789, 0, 2147483647); };
    if (HEX3DHEX3D_654311812(rects_654311785[0], [])) {
    break BeforeRet;
    }
    
    if (((rects_654311785[0]).length == 1)) {
    result_654311642 = nimCopy(result_654311642, rects_654311785[0][chckIndx(0, 0, (rects_654311785[0]).length - 1)], NTI654311428);
    break BeforeRet;
    }
    
    Label8: do {
      var i_654311922 = 0;
      var rect_654311923 = null;
      var i_620768253 = 0;
      var L_620768254 = (rects_654311785[0]).length;
      Label9: do {
          Label10: while (true) {
          if (!(i_620768253 < L_620768254)) break Label10;
            i_654311922 = i_620768253;
            rect_654311923 = rects_654311785[0][chckIndx(i_620768253, 0, (rects_654311785[0]).length - 1)];
            switch (rect_654311923.flag) {
            case 8:
              if (!((i_654311922 == (rects_654311785[0]).length - 1))) {
              extendRight_654311630(rect_654311923);
              }
              
              break;
            case 2:
            case 3:
              if (!((i_654311922 == (rects_654311785[0]).length - 1))) {
              extendRight_654311630(rect_654311923);
              }
              
                if (!!((i_654311922 == 0))) Temporary11 = false; else {                  Temporary11 = !((ConstSet51[rects_654311785[0][chckIndx(subInt(i_654311922, 1), 0, (rects_654311785[0]).length - 1)].flag] != undefined));                }              if (Temporary11) {
              extendLeft_654311585(rect_654311923);
              }
              
              break;
            case 4:
                if (!!((i_654311922 == (rects_654311785[0]).length - 1))) Temporary12 = false; else {                  Temporary12 = (ConstSet52[rects_654311785[0][chckIndx(addInt(i_654311922, 1), 0, (rects_654311785[0]).length - 1)].flag] != undefined);                }              if (Temporary12) {
              extendRight_654311630(rect_654311923);
              }
              
                if (!!((i_654311922 == 0))) Temporary13 = false; else {                  Temporary13 = (ConstSet53[rects_654311785[0][chckIndx(subInt(i_654311922, 1), 0, (rects_654311785[0]).length - 1)].flag] != undefined);                }              if (Temporary13) {
              extendLeft_654311585(rect_654311923);
              }
              
              break;
            default: 
              break;
            }
            i_620768253 = addInt(i_620768253, 1);
            if (!(((rects_654311785[0]).length == L_620768254))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    Label14: do {
      var iHEX60gensym25_654311990 = 0;
      var resultHEX60gensym25_654312011 = newSeq_654311994(chckRange((rects_654311785[0]).length, 0, 2147483647));
      Label15: do {
        var it_654312015 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620768259 = 0;
        var L_620768260 = (rects_654311785[0]).length;
        Label16: do {
            Label17: while (true) {
            if (!(i_620768259 < L_620768260)) break Label17;
              it_654312015 = rects_654311785[0][chckIndx(i_620768259, 0, (rects_654311785[0]).length - 1)];
              resultHEX60gensym25_654312011[chckIndx(iHEX60gensym25_654311990, 0, (resultHEX60gensym25_654312011).length - 1)] = it_654312015.baseline;
              iHEX60gensym25_654311990 = addInt(iHEX60gensym25_654311990, 1);
              i_620768259 = addInt(i_620768259, 1);
              if (!(((rects_654311785[0]).length == L_620768260))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var maxBaseline_654312032 = max_654312020(resultHEX60gensym25_654312011);
    Label18: do {
      var iHEX60gensym30_654312044 = 0;
      var colontmp__620768263 = 0;
      colontmp__620768263 = (rects_654311785[0]).length - 1;
      var res_620768264 = 0;
      Label19: do {
          Label20: while (true) {
          if (!(res_620768264 <= colontmp__620768263)) break Label20;
            iHEX60gensym30_654312044 = res_620768264;
            var it_654312045 = nimCopy(null, rects_654311785[0][chckIndx(iHEX60gensym30_654312044, 0, (rects_654311785[0]).length - 1)], NTI654311428);
            rects_654311785[0][chckIndx(iHEX60gensym30_654312044, 0, (rects_654311785[0]).length - 1)] = nimCopy(rects_654311785[0][chckIndx(iHEX60gensym30_654312044, 0, (rects_654311785[0]).length - 1)], extendUp_654311522(it_654312045, chckRange(subInt(maxBaseline_654312032, it_654312045.baseline), 0, 2147483647)), NTI654311428);
            res_620768264 = addInt(res_620768264, 1);
          }
      } while (false);
    } while (false);
    Label21: do {
      var iHEX60gensym31_654312067 = 0;
      var resultHEX60gensym31_654312088 = newSeq_654312071(chckRange((rects_654311785[0]).length, 0, 2147483647));
      Label22: do {
        var it_654312092 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620768268 = 0;
        var L_620768269 = (rects_654311785[0]).length;
        Label23: do {
            Label24: while (true) {
            if (!(i_620768268 < L_620768269)) break Label24;
              it_654312092 = rects_654311785[0][chckIndx(i_620768268, 0, (rects_654311785[0]).length - 1)];
              resultHEX60gensym31_654312088[chckIndx(iHEX60gensym31_654312067, 0, (resultHEX60gensym31_654312088).length - 1)] = height_654311468(it_654312092);
              iHEX60gensym31_654312067 = addInt(iHEX60gensym31_654312067, 1);
              i_620768268 = addInt(i_620768268, 1);
              if (!(((rects_654311785[0]).length == L_620768269))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var maxHeight_654312109 = max_654312097(resultHEX60gensym31_654312088);
    Label25: do {
      var iHEX60gensym34_654312121 = 0;
      var colontmp__620768272 = 0;
      colontmp__620768272 = (rects_654311785[0]).length - 1;
      var res_620768273 = 0;
      Label26: do {
          Label27: while (true) {
          if (!(res_620768273 <= colontmp__620768272)) break Label27;
            iHEX60gensym34_654312121 = res_620768273;
            var it_654312122 = nimCopy(null, rects_654311785[0][chckIndx(iHEX60gensym34_654312121, 0, (rects_654311785[0]).length - 1)], NTI654311428);
            rects_654311785[0][chckIndx(iHEX60gensym34_654312121, 0, (rects_654311785[0]).length - 1)] = nimCopy(rects_654311785[0][chckIndx(iHEX60gensym34_654312121, 0, (rects_654311785[0]).length - 1)], extendDown_654311573(it_654312122, chckRange(subInt(maxHeight_654312109, height_654311468(it_654312122)), 0, 2147483647)), NTI654311428);
            res_620768273 = addInt(res_620768273, 1);
          }
      } while (false);
    } while (false);
    result_654311642.rows = nimCopy(null, newSeq_452985301(height_654311468(rects_654311785[0][chckIndx(0, 0, (rects_654311785[0]).length - 1)])), NTI452985127);
    Label28: do {
      var i_654312161 = 0;
      var row_654312162 = null;
      var row_654312162_Idx = 0;
      var i_620768282 = 0;
      var L_620768283 = (result_654311642.rows).length;
      Label29: do {
          Label30: while (true) {
          if (!(i_620768282 < L_620768283)) break Label30;
            i_654312161 = i_620768282;
            row_654312162 = result_654311642.rows; row_654312162_Idx = chckIndx(i_620768282, 0, (result_654311642.rows).length - 1);
            Label31: do {
              var iHEX60gensym37_654312184 = 0;
              var resultHEX60gensym37_654312191 = newSeq_452985301(chckRange((rects_654311785[0]).length, 0, 2147483647));
              Label32: do {
                var it_654312195 = ({rows: [], baseline: 0, width: 0, flag: 0});
                var i_620768278 = 0;
                var L_620768279 = (rects_654311785[0]).length;
                Label33: do {
                    Label34: while (true) {
                    if (!(i_620768278 < L_620768279)) break Label34;
                      it_654312195 = rects_654311785[0][chckIndx(i_620768278, 0, (rects_654311785[0]).length - 1)];
                      resultHEX60gensym37_654312191[chckIndx(iHEX60gensym37_654312184, 0, (resultHEX60gensym37_654312191).length - 1)] = nimCopy(null, it_654312195.rows[chckIndx(i_654312161, 0, (it_654312195.rows).length - 1)], NTI33554439);
                      iHEX60gensym37_654312184 = addInt(iHEX60gensym37_654312184, 1);
                      i_620768278 = addInt(i_620768278, 1);
                      if (!(((rects_654311785[0]).length == L_620768279))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            row_654312162[row_654312162_Idx] = nimCopy(null, nsuJoinSep(resultHEX60gensym37_654312191, []), NTI33554439);
            i_620768282 = addInt(i_620768282, 1);
            if (!(((result_654311642.rows).length == L_620768283))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_654311642.baseline = rects_654311785[0][chckIndx(0, 0, (rects_654311785[0]).length - 1)].baseline;
    Label35: do {
      var iHEX60gensym40_654312221 = 0;
      var resultHEX60gensym40_654312228 = newSeq_654312071(chckRange((rects_654311785[0]).length, 0, 2147483647));
      Label36: do {
        var it_654312232 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620768287 = 0;
        var L_620768288 = (rects_654311785[0]).length;
        Label37: do {
            Label38: while (true) {
            if (!(i_620768287 < L_620768288)) break Label38;
              it_654312232 = rects_654311785[0][chckIndx(i_620768287, 0, (rects_654311785[0]).length - 1)];
              resultHEX60gensym40_654312228[chckIndx(iHEX60gensym40_654312221, 0, (resultHEX60gensym40_654312228).length - 1)] = it_654312232.width;
              iHEX60gensym40_654312221 = addInt(iHEX60gensym40_654312221, 1);
              i_620768287 = addInt(i_620768287, 1);
              if (!(((rects_654311785[0]).length == L_620768288))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_654311642.width = sum_654312237(resultHEX60gensym40_654312228);
  } while (false);

  return result_654311642;

}

function map_620761222(a_620761225, fn_620761227) {

function succeedImpl_620761239(inputInHEX60gensym71_620761240, valueInHEX60gensym71_620761241, tailInHEX60gensym71_620761242) {
  var result_620761244 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620761244 = nimCopy(result_620761244, {kind: 0, value: nimCopy(null, valueInHEX60gensym71_620761241, NTI654311428), tail: nimCopy(null, tailInHEX60gensym71_620761242, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym71_620761240, NTI33554439), expected: []}, NTI620758888);

  return result_620761244;

}

function failImpl_620761246(inputInHEX60gensym71_620761247, expectedInHEX60gensym71_620761248, tailInHEX60gensym71_620761249) {
  var result_620761251 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620761251 = nimCopy(result_620761251, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym71_620761248, NTI620760128), tail: nimCopy(null, tailInHEX60gensym71_620761249, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym71_620761247, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620761251;

}
      
function HEX3Aanonymous_620761254(input_620761255) {
            var Temporary2;
          var Temporary3;

        var result_620761257 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761258 = succeedImpl_620761239;
          var fail_620761259 = failImpl_620761246;
          Label1: do {
            var tempHEX60gensym24_620761272 = parse_1191183306(a_620761225, input_620761255);
            if ((tempHEX60gensym24_620761272.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620761272;
            if (ConstSet54[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620761257 = nimCopy(result_620761257, {kind: 1, fromInput: nimCopy(null, input_620761255, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620761272.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761278 = nimCopy(null, tempHEX60gensym24_620761272, NTI1191182566);
          var Temporary3 = result1_620761278;
          if (ConstSet55[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620761257 = nimCopy(result_620761257, succeed_620761258(input_620761255, fn_620761227(Temporary3.value), result1_620761278.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620761257;

      }

  var result_620761228 = null;

    Label1: do {
    } while (false);
    result_620761228 = {body: HEX3Aanonymous_620761254};

  return result_620761228;

}

function nucruneLen(s_973078538) {
  var result_973078539 = 0;

    result_973078539 = 0;
    var i_973078540 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_973078540 < (s_973078538).length)) break Label2;
          if ((s_973078538[chckIndx(i_973078540, 0, (s_973078538).length - 1)] <= 127)) {
          i_973078540 = addInt(i_973078540, 1);
          }
          else {
          if (((s_973078538[chckIndx(i_973078540, 0, (s_973078538).length - 1)] >>> 5) == 6)) {
          i_973078540 = addInt(i_973078540, 2);
          }
          else {
          if (((s_973078538[chckIndx(i_973078540, 0, (s_973078538).length - 1)] >>> 4) == 14)) {
          i_973078540 = addInt(i_973078540, 3);
          }
          else {
          if (((s_973078538[chckIndx(i_973078540, 0, (s_973078538).length - 1)] >>> 3) == 30)) {
          i_973078540 = addInt(i_973078540, 4);
          }
          else {
          if (((s_973078538[chckIndx(i_973078540, 0, (s_973078538).length - 1)] >>> 2) == 62)) {
          i_973078540 = addInt(i_973078540, 5);
          }
          else {
          if (((s_973078538[chckIndx(i_973078540, 0, (s_973078538).length - 1)] >>> 1) == 126)) {
          i_973078540 = addInt(i_973078540, 6);
          }
          else {
          i_973078540 = addInt(i_973078540, 1);
          }
          }}}}}
          result_973078539 = addInt(result_973078539, 1);
        }
    } while (false);

  return result_973078539;

}

function toTextRectOneLine_654311513(s_654311514, baseline_654311515, flag_654311516) {
  var result_654311517 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    if (eqStrings(s_654311514, [])) {
    result_654311517.flag = flag_654311516;
    break BeforeRet;
    }
    
    result_654311517.rows = nimCopy(null, [nimCopy(null, s_654311514, NTI33554439)], NTI654311478);
    result_654311517.width = chckRange(nucruneLen(s_654311514), 0, 2147483647);
    result_654311517.baseline = baseline_654311515;
    result_654311517.flag = flag_654311516;
  } while (false);

  return result_654311517;

}

function HEX7C_620762238(a_620762240, b_620762241) {

function succeedImpl_620762253(inputInHEX60gensym92_620762254, valueInHEX60gensym92_620762255, tailInHEX60gensym92_620762256) {
  var result_620762258 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620762258 = nimCopy(result_620762258, {kind: 0, value: nimCopy(null, valueInHEX60gensym92_620762255, NTI654311428), tail: nimCopy(null, tailInHEX60gensym92_620762256, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym92_620762254, NTI33554439), expected: []}, NTI620758888);

  return result_620762258;

}

function failImpl_620762260(inputInHEX60gensym92_620762261, expectedInHEX60gensym92_620762262, tailInHEX60gensym92_620762263) {
  var result_620762265 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620762265 = nimCopy(result_620762265, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym92_620762262, NTI620760911), tail: nimCopy(null, tailInHEX60gensym92_620762263, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym92_620762261, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620762265;

}
      
function HEX3Aanonymous_620762268(input_620762269) {
          var Temporary1;
          var Temporary2;

        var result_620762271 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762272 = succeedImpl_620762253;
          var fail_620762273 = failImpl_620762260;
          var result1_620762286 = parse_620760023(a_620762240, input_620762269);
          if ((result1_620762286.kind == 0)) {
          result_620762271 = nimCopy(result_620762271, result1_620762286, NTI620758888);
          break BeforeRet;
          }
          
          var result2_620762303 = parse_620760023(b_620762241, input_620762269);
          if ((result2_620762303.kind == 0)) {
          result_620762271 = nimCopy(result_620762271, result2_620762303, NTI620758888);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620762286;
          if (ConstSet56[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1191182357)); }
          var Temporary2 = result2_620762303;
          if (ConstSet57[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
          result_620762271 = nimCopy(result_620762271, fail_620762273(input_620762269, HEX26_654311539(Temporary1.expected, Temporary2.expected), input_620762269), NTI620758888);
        } while (false);

        return result_620762271;

      }

  var result_620762242 = null;

    Label1: do {
    } while (false);
    result_620762242 = {body: HEX3Aanonymous_620762268};

  return result_620762242;

}

function HEX3CHEX3DHEX25_33555429(x_33555430, y_33555431) {
  var result_33555432 = false;

    result_33555432 = ((x_33555430 >>> 0) <= (y_33555431 >>> 0));

  return result_33555432;

}

function nuctoUTF8(c_973078869) {
  var result_973078870 = [];

    result_973078870 = nimCopy(null, [], NTI33554439);
    var iHEX60gensym49_973078872 = c_973078869;
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_973078872, 127)) {
    (result_973078870.length = 1);
    result_973078870[chckIndx(0, 0, (result_973078870).length - 1)] = chckRange(iHEX60gensym49_973078872, 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_973078872, 2047)) {
    (result_973078870.length = 2);
    result_973078870[chckIndx(0, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 >> 6) | 192), 0, 255);
    result_973078870[chckIndx(1, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_973078872, 65535)) {
    (result_973078870.length = 3);
    result_973078870[chckIndx(0, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 >> 12) | 224), 0, 255);
    result_973078870[chckIndx(1, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 6) & 63) | 128), 0, 255);
    result_973078870[chckIndx(2, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_973078872, 2097151)) {
    (result_973078870.length = 4);
    result_973078870[chckIndx(0, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 >> 18) | 240), 0, 255);
    result_973078870[chckIndx(1, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 12) & 63) | 128), 0, 255);
    result_973078870[chckIndx(2, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 6) & 63) | 128), 0, 255);
    result_973078870[chckIndx(3, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_973078872, 67108863)) {
    (result_973078870.length = 5);
    result_973078870[chckIndx(0, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 >> 24) | 248), 0, 255);
    result_973078870[chckIndx(1, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 18) & 63) | 128), 0, 255);
    result_973078870[chckIndx(2, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 12) & 63) | 128), 0, 255);
    result_973078870[chckIndx(3, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 6) & 63) | 128), 0, 255);
    result_973078870[chckIndx(4, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_973078872, 2147483647)) {
    (result_973078870.length = 6);
    result_973078870[chckIndx(0, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 >> 30) | 252), 0, 255);
    result_973078870[chckIndx(1, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 24) & 63) | 128), 0, 255);
    result_973078870[chckIndx(2, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 18) & 63) | 128), 0, 255);
    result_973078870[chckIndx(3, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 12) & 63) | 128), 0, 255);
    result_973078870[chckIndx(4, 0, (result_973078870).length - 1)] = chckRange((((iHEX60gensym49_973078872 >> 6) & 63) | 128), 0, 255);
    result_973078870[chckIndx(5, 0, (result_973078870).length - 1)] = chckRange(((iHEX60gensym49_973078872 & 63) | 128), 0, 255);
    }
    else {
    }
    }}}}}

  return result_973078870;

}

function HEX24_973079119(rune_973079120) {
  var result_973079121 = [];

    result_973079121 = nimCopy(null, nuctoUTF8(rune_973079120), NTI33554439);

  return result_973079121;

}

function inFont_637534392(letter_637534393, font_637534394) {
    var Temporary4;

  var result_637534395 = [];

  BeforeRet: do {
    Label1: do {
      var lhs_637534417 = 0;
      var rhs_637534418 = [];
      var colontmp__620768339 = [];
      colontmp__620768339 = fontExceptions_637534346[chckIndx(font_637534394, 0, (fontExceptions_637534346).length - 1)];
      var i_620768341 = 0;
      var L_620768342 = (colontmp__620768339).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768341 < L_620768342)) break Label3;
            lhs_637534417 = colontmp__620768339[chckIndx(i_620768341, 0, (colontmp__620768339).length - 1)]["Field0"];
            rhs_637534418 = colontmp__620768339[chckIndx(i_620768341, 0, (colontmp__620768339).length - 1)]["Field1"];
            if ((letter_637534393 == lhs_637534417)) {
            result_637534395 = nimCopy(null, rhs_637534418, NTI33554439);
            break BeforeRet;
            }
            
            i_620768341 = addInt(i_620768341, 1);
            if (!(((colontmp__620768339).length == L_620768342))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (contains_637534489(HEX2EHEX2E_637534419(65, 90), letter_637534393)) {
    Temporary4 = 65;
    }
    else {
    Temporary4 = 71;
    }
    
    var shift_637534496 = Temporary4;
    result_637534395 = nimCopy(null, HEX24_973079119(((subInt(addInt(fontStarts_637534325[chckIndx(font_637534394, 0, (fontStarts_637534325).length - 1)], letter_637534393), shift_637534496)) | 0)), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_637534395;

}

function map_620762174(s_620762177, op_620762179) {
  var result_620762180 = [];

    result_620762180 = new Array(chckRange((s_620762177).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_620762177).length, 0, 2147483647) ; ++i) { result_620762180[i] = null; }    Label1: do {
      var i_620762196 = 0;
      var colontmp__620768345 = 0;
      colontmp__620768345 = (s_620762177).length;
      var i_620768346 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768346 < colontmp__620768345)) break Label3;
            i_620762196 = i_620768346;
            result_620762180[chckIndx(i_620762196, 0, (result_620762180).length - 1)] = op_620762179(s_620762177[chckIndx(i_620762196, 0, (s_620762177).length - 1)]);
            i_620768346 = addInt(i_620768346, 1);
          }
      } while (false);
    } while (false);

  return result_620762180;

}

function HEX3CHEX3C_620761693(a_620761696, b_620761697) {

function succeedImpl_620761709(inputInHEX60gensym76_620761710, valueInHEX60gensym76_620761711, tailInHEX60gensym76_620761712) {
  var result_620761714 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620761714 = nimCopy(result_620761714, {kind: 0, value: valueInHEX60gensym76_620761711, tail: nimCopy(null, tailInHEX60gensym76_620761712, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym76_620761710, NTI33554439), expected: []}, NTI1191182566);

  return result_620761714;

}

function failImpl_620761716(inputInHEX60gensym76_620761717, expectedInHEX60gensym76_620761718, tailInHEX60gensym76_620761719) {
  var result_620761721 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620761721 = nimCopy(result_620761721, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym76_620761718, NTI620760457), tail: nimCopy(null, tailInHEX60gensym76_620761719, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym76_620761717, NTI33554439), value: 0}, NTI1191182566);

  return result_620761721;

}
      
function HEX3Aanonymous_620761724(input_620761725) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620761727 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761728 = succeedImpl_620761709;
          var fail_620761729 = failImpl_620761716;
          Label1: do {
            var tempHEX60gensym30_620761742 = parse_1191183306(a_620761696, input_620761725);
            if ((tempHEX60gensym30_620761742.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620761742;
            if (ConstSet58[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620761727 = nimCopy(result_620761727, {kind: 1, fromInput: nimCopy(null, input_620761725, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym30_620761742.tail, NTI33554439), value: 0}, NTI1191182566);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761748 = nimCopy(null, tempHEX60gensym30_620761742, NTI1191182566);
          Label3: do {
            var tempHEX60gensym32_620761761 = parse_1191183306(b_620761697, result1_620761748.tail);
            if ((tempHEX60gensym32_620761761.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620761761;
            if (ConstSet59[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620761727 = nimCopy(result_620761727, {kind: 1, fromInput: nimCopy(null, input_620761725, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym32_620761761.tail, NTI33554439), value: 0}, NTI1191182566);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620761767 = nimCopy(null, tempHEX60gensym32_620761761, NTI1191182566);
          var Temporary5 = result1_620761748;
          if (ConstSet60[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620761727 = nimCopy(result_620761727, succeed_620761728(input_620761725, Temporary5.value, result2_620761767.tail), NTI1191182566);
          break BeforeRet;
        } while (false);

        return result_620761727;

      }

  var result_620761698 = null;

    Label1: do {
    } while (false);
    result_620761698 = {body: HEX3Aanonymous_620761724};

  return result_620761698;

}

function HEX3CHEX3C_620761610(a_620761613, b_620761614) {

function succeedImpl_620761626(inputInHEX60gensym75_620761627, valueInHEX60gensym75_620761628, tailInHEX60gensym75_620761629) {
  var result_620761631 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620761631 = nimCopy(result_620761631, {kind: 0, value: valueInHEX60gensym75_620761628, tail: nimCopy(null, tailInHEX60gensym75_620761629, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym75_620761627, NTI33554439), expected: []}, NTI1191182566);

  return result_620761631;

}

function failImpl_620761633(inputInHEX60gensym75_620761634, expectedInHEX60gensym75_620761635, tailInHEX60gensym75_620761636) {
  var result_620761638 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620761638 = nimCopy(result_620761638, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym75_620761635, NTI620760396), tail: nimCopy(null, tailInHEX60gensym75_620761636, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym75_620761634, NTI33554439), value: 0}, NTI1191182566);

  return result_620761638;

}
      
function HEX3Aanonymous_620761641(input_620761642) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620761644 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761645 = succeedImpl_620761626;
          var fail_620761646 = failImpl_620761633;
          Label1: do {
            var tempHEX60gensym30_620761659 = parse_1191183306(a_620761613, input_620761642);
            if ((tempHEX60gensym30_620761659.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620761659;
            if (ConstSet61[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620761644 = nimCopy(result_620761644, {kind: 1, fromInput: nimCopy(null, input_620761642, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym30_620761659.tail, NTI33554439), value: 0}, NTI1191182566);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761665 = nimCopy(null, tempHEX60gensym30_620761659, NTI1191182566);
          Label3: do {
            var tempHEX60gensym32_620761678 = parse_620759020(b_620761614, result1_620761665.tail);
            if ((tempHEX60gensym32_620761678.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620761678;
            if (ConstSet62[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620761644 = nimCopy(result_620761644, {kind: 1, fromInput: nimCopy(null, input_620761642, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym32_620761678.tail, NTI33554439), value: 0}, NTI1191182566);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620761684 = nimCopy(null, tempHEX60gensym32_620761678, NTI620757839);
          var Temporary5 = result1_620761665;
          if (ConstSet63[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620761644 = nimCopy(result_620761644, succeed_620761645(input_620761642, Temporary5.value, result2_620761684.tail), NTI1191182566);
          break BeforeRet;
        } while (false);

        return result_620761644;

      }

  var result_620761615 = null;

    Label1: do {
    } while (false);
    result_620761615 = {body: HEX3Aanonymous_620761641};

  return result_620761615;

}

function HEX3EHEX3E_620761431(a_620761434, b_620761435) {

function succeedImpl_620761447(inputInHEX60gensym73_620761448, valueInHEX60gensym73_620761449, tailInHEX60gensym73_620761450) {
  var result_620761452 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620761452 = nimCopy(result_620761452, {kind: 0, value: valueInHEX60gensym73_620761449, tail: nimCopy(null, tailInHEX60gensym73_620761450, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym73_620761448, NTI33554439), expected: []}, NTI1191182566);

  return result_620761452;

}

function failImpl_620761454(inputInHEX60gensym73_620761455, expectedInHEX60gensym73_620761456, tailInHEX60gensym73_620761457) {
  var result_620761459 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620761459 = nimCopy(result_620761459, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym73_620761456, NTI620760269), tail: nimCopy(null, tailInHEX60gensym73_620761457, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym73_620761455, NTI33554439), value: 0}, NTI1191182566);

  return result_620761459;

}
      
function HEX3Aanonymous_620761462(input_620761463) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620761465 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761466 = succeedImpl_620761447;
          var fail_620761467 = failImpl_620761454;
          Label1: do {
            var tempHEX60gensym34_620761480 = parse_620759020(a_620761434, input_620761463);
            if ((tempHEX60gensym34_620761480.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620761480;
            if (ConstSet64[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620761465 = nimCopy(result_620761465, {kind: 1, fromInput: nimCopy(null, input_620761463, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620761480.tail, NTI33554439), value: 0}, NTI1191182566);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761486 = nimCopy(null, tempHEX60gensym34_620761480, NTI620757839);
          Label3: do {
            var tempHEX60gensym36_620761499 = parse_1191183306(b_620761435, result1_620761486.tail);
            if ((tempHEX60gensym36_620761499.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620761499;
            if (ConstSet65[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620761465 = nimCopy(result_620761465, {kind: 1, fromInput: nimCopy(null, input_620761463, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620761499.tail, NTI33554439), value: 0}, NTI1191182566);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620761505 = nimCopy(null, tempHEX60gensym36_620761499, NTI1191182566);
          var Temporary5 = result2_620761505;
          if (ConstSet66[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620761465 = nimCopy(result_620761465, succeed_620761466(input_620761463, Temporary5.value, result2_620761505.tail), NTI1191182566);
          break BeforeRet;
        } while (false);

        return result_620761465;

      }

  var result_620761436 = null;

    Label1: do {
    } while (false);
    result_620761436 = {body: HEX3Aanonymous_620761462};

  return result_620761436;

}

function HEX3EHEX3E_620761514(a_620761517, b_620761518) {

function succeedImpl_620761530(inputInHEX60gensym74_620761531, valueInHEX60gensym74_620761532, tailInHEX60gensym74_620761533) {
  var result_620761535 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761535 = nimCopy(result_620761535, {kind: 0, value: nimCopy(null, valueInHEX60gensym74_620761532, NTI620757833), tail: nimCopy(null, tailInHEX60gensym74_620761533, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym74_620761531, NTI33554439), expected: []}, NTI620757839);

  return result_620761535;

}

function failImpl_620761537(inputInHEX60gensym74_620761538, expectedInHEX60gensym74_620761539, tailInHEX60gensym74_620761540) {
  var result_620761542 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761542 = nimCopy(result_620761542, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym74_620761539, NTI620760330), tail: nimCopy(null, tailInHEX60gensym74_620761540, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym74_620761538, NTI33554439), value: []}, NTI620757839);

  return result_620761542;

}
      
function HEX3Aanonymous_620761545(input_620761546) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620761548 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761549 = succeedImpl_620761530;
          var fail_620761550 = failImpl_620761537;
          Label1: do {
            var tempHEX60gensym34_620761563 = parse_1191183306(a_620761517, input_620761546);
            if ((tempHEX60gensym34_620761563.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620761563;
            if (ConstSet67[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620761548 = nimCopy(result_620761548, {kind: 1, fromInput: nimCopy(null, input_620761546, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620761563.tail, NTI33554439), value: []}, NTI620757839);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761569 = nimCopy(null, tempHEX60gensym34_620761563, NTI1191182566);
          Label3: do {
            var tempHEX60gensym36_620761582 = parse_620759020(b_620761518, result1_620761569.tail);
            if ((tempHEX60gensym36_620761582.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620761582;
            if (ConstSet68[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620761548 = nimCopy(result_620761548, {kind: 1, fromInput: nimCopy(null, input_620761546, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620761582.tail, NTI33554439), value: []}, NTI620757839);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620761588 = nimCopy(null, tempHEX60gensym36_620761582, NTI620757839);
          var Temporary5 = result2_620761588;
          if (ConstSet69[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620761548 = nimCopy(result_620761548, succeed_620761549(input_620761546, Temporary5.value, result2_620761588.tail), NTI620757839);
          break BeforeRet;
        } while (false);

        return result_620761548;

      }

  var result_620761519 = null;

    Label1: do {
    } while (false);
    result_620761519 = {body: HEX3Aanonymous_620761545};

  return result_620761519;

}

function HEX3EHEX3E_620761348(a_620761351, b_620761352) {

function succeedImpl_620761364(inputInHEX60gensym72_620761365, valueInHEX60gensym72_620761366, tailInHEX60gensym72_620761367) {
  var result_620761369 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761369 = nimCopy(result_620761369, {kind: 0, value: nimCopy(null, valueInHEX60gensym72_620761366, NTI620757833), tail: nimCopy(null, tailInHEX60gensym72_620761367, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym72_620761365, NTI33554439), expected: []}, NTI620757839);

  return result_620761369;

}

function failImpl_620761371(inputInHEX60gensym72_620761372, expectedInHEX60gensym72_620761373, tailInHEX60gensym72_620761374) {
  var result_620761376 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761376 = nimCopy(result_620761376, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym72_620761373, NTI620760208), tail: nimCopy(null, tailInHEX60gensym72_620761374, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym72_620761372, NTI33554439), value: []}, NTI620757839);

  return result_620761376;

}
      
function HEX3Aanonymous_620761379(input_620761380) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620761382 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761383 = succeedImpl_620761364;
          var fail_620761384 = failImpl_620761371;
          Label1: do {
            var tempHEX60gensym34_620761397 = parse_620758790(a_620761351, input_620761380);
            if ((tempHEX60gensym34_620761397.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620761397;
            if (ConstSet70[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620761382 = nimCopy(result_620761382, {kind: 1, fromInput: nimCopy(null, input_620761380, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620761397.tail, NTI33554439), value: []}, NTI620757839);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761403 = nimCopy(null, tempHEX60gensym34_620761397, NTI1191182468);
          Label3: do {
            var tempHEX60gensym36_620761416 = parse_620759020(b_620761352, result1_620761403.tail);
            if ((tempHEX60gensym36_620761416.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620761416;
            if (ConstSet71[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620761382 = nimCopy(result_620761382, {kind: 1, fromInput: nimCopy(null, input_620761380, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620761416.tail, NTI33554439), value: []}, NTI620757839);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620761422 = nimCopy(null, tempHEX60gensym36_620761416, NTI620757839);
          var Temporary5 = result2_620761422;
          if (ConstSet72[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620761382 = nimCopy(result_620761382, succeed_620761383(input_620761380, Temporary5.value, result2_620761422.tail), NTI620757839);
          break BeforeRet;
        } while (false);

        return result_620761382;

      }

  var result_620761353 = null;

    Label1: do {
    } while (false);
    result_620761353 = {body: HEX3Aanonymous_620761379};

  return result_620761353;

}

function nsuStartsWith(s_671089953, prefix_671089954) {
            var Temporary3;

  var result_671089955 = false;

  BeforeRet: do {
    var prefixLenHEX60gensym141_671089960 = (prefix_671089954).length;
    var sLenHEX60gensym141_671089961 = (s_671089953).length;
    var iHEX60gensym141_671089962 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym141_671089960 <= iHEX60gensym141_671089962)) {
          result_671089955 = true;
          break BeforeRet;
          }
          
            if ((sLenHEX60gensym141_671089961 <= iHEX60gensym141_671089962)) Temporary3 = true; else {              Temporary3 = !((s_671089953[chckIndx(iHEX60gensym141_671089962, 0, (s_671089953).length - 1)] == prefix_671089954[chckIndx(iHEX60gensym141_671089962, 0, (prefix_671089954).length - 1)]));            }          if (Temporary3) {
          result_671089955 = false;
          break BeforeRet;
          }
          
          iHEX60gensym141_671089962 = addInt(iHEX60gensym141_671089962, 1);
        }
    } while (false);
  } while (false);

  return result_671089955;

}

function s_1191182447(expect_1191182448) {

function succeedImpl_1191182469(inputInHEX60gensym2_1191182470, valueInHEX60gensym2_1191182471, tailInHEX60gensym2_1191182472) {
  var result_1191182474 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1191182474 = nimCopy(result_1191182474, {kind: 0, value: nimCopy(null, valueInHEX60gensym2_1191182471, NTI33554439), tail: nimCopy(null, tailInHEX60gensym2_1191182472, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym2_1191182470, NTI33554439), expected: []}, NTI1191182468);

  return result_1191182474;

}

function failImpl_1191182497(inputInHEX60gensym2_1191182498, expectedInHEX60gensym2_1191182499, tailInHEX60gensym2_1191182500) {
  var result_1191182502 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1191182502 = nimCopy(result_1191182502, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym2_1191182499, NTI1191182502), tail: nimCopy(null, tailInHEX60gensym2_1191182500, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym2_1191182498, NTI33554439), value: []}, NTI1191182468);

  return result_1191182502;

}
      expect_1191182448 = nimCopy(null, expect_1191182448, NTI33554439);
      
function HEX3Aanonymous_1191182505(input_1191182506) {
        var result_1191182508 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1191182509 = succeedImpl_1191182469;
          var fail_1191182510 = failImpl_1191182497;
          if (nsuStartsWith(input_1191182506, expect_1191182448)) {
          result_1191182508 = nimCopy(result_1191182508, succeed_1191182509(input_1191182506, expect_1191182448, HEX5BHEX5D_973081754(input_1191182506, HEX2EHEX2E_905969744((expect_1191182448).length, 1))), NTI1191182468);
          break BeforeRet;
          }
          
          result_1191182508 = nimCopy(result_1191182508, fail_1191182510(input_1191182506, [nsuFormatSingleElem(makeNimstrLit("\'$1\'"), expect_1191182448)], input_1191182506), NTI1191182468);
        } while (false);

        return result_1191182508;

      }

  var result_1191182458 = null;

    Label1: do {
    } while (false);
    result_1191182458 = {body: HEX3Aanonymous_1191182505};

  return result_1191182458;

}

function c_1191182569(expect_1191182570) {

function succeedImpl_1191182591(inputInHEX60gensym5_1191182592, valueInHEX60gensym5_1191182593, tailInHEX60gensym5_1191182594) {
  var result_1191182596 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1191182596 = nimCopy(result_1191182596, {kind: 0, value: valueInHEX60gensym5_1191182593, tail: nimCopy(null, tailInHEX60gensym5_1191182594, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym5_1191182592, NTI33554439), expected: []}, NTI1191182566);

  return result_1191182596;

}

function failImpl_1191182610(inputInHEX60gensym5_1191182611, expectedInHEX60gensym5_1191182612, tailInHEX60gensym5_1191182613) {
  var result_1191182615 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1191182615 = nimCopy(result_1191182615, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym5_1191182612, NTI1191182594), tail: nimCopy(null, tailInHEX60gensym5_1191182613, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym5_1191182611, NTI33554439), value: 0}, NTI1191182566);

  return result_1191182615;

}
      
function HEX3Aanonymous_1191182618(input_1191182619) {
            var Temporary1;

        var result_1191182621 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1191182622 = succeedImpl_1191182591;
          var fail_1191182623 = failImpl_1191182610;
            if (!(0 < (input_1191182619).length)) Temporary1 = false; else {              Temporary1 = (input_1191182619[chckIndx(0, 0, (input_1191182619).length - 1)] == expect_1191182570);            }          if (Temporary1) {
          result_1191182621 = nimCopy(result_1191182621, succeed_1191182622(input_1191182619, expect_1191182570, HEX5BHEX5D_973081754(input_1191182619, HEX2EHEX2E_905969744(1, 1))), NTI1191182566);
          break BeforeRet;
          }
          
          result_1191182621 = nimCopy(result_1191182621, fail_1191182623(input_1191182619, [nsuFormatSingleElem(makeNimstrLit("\'$1\'"), nimCharToStr(expect_1191182570))], input_1191182619), NTI1191182566);
        } while (false);

        return result_1191182621;

      }

  var result_1191182580 = null;

    Label1: do {
    } while (false);
    result_1191182580 = {body: HEX3Aanonymous_1191182618};

  return result_1191182580;

}

function map_620762609(s_620762612, op_620762614) {
  var result_620762615 = [];

    result_620762615 = new Array(chckRange((s_620762612).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_620762612).length, 0, 2147483647) ; ++i) { result_620762615[i] = null; }    Label1: do {
      var i_620762630 = 0;
      var colontmp__620768372 = 0;
      colontmp__620768372 = (s_620762612).length;
      var i_620768373 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768373 < colontmp__620768372)) break Label3;
            i_620762630 = i_620768373;
            result_620762615[chckIndx(i_620762630, 0, (result_620762615).length - 1)] = op_620762614(s_620762612[chckIndx(i_620762630, 0, (s_620762612).length - 1)]);
            i_620768373 = addInt(i_620768373, 1);
          }
      } while (false);
    } while (false);

  return result_620762615;

}

function map_620762505(a_620762508, fn_620762510) {

function succeedImpl_620762522(inputInHEX60gensym96_620762523, valueInHEX60gensym96_620762524, tailInHEX60gensym96_620762525) {
  var result_620762527 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620762527 = nimCopy(result_620762527, {kind: 0, value: nimCopy(null, valueInHEX60gensym96_620762524, NTI654311428), tail: nimCopy(null, tailInHEX60gensym96_620762525, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym96_620762523, NTI33554439), expected: []}, NTI620758888);

  return result_620762527;

}

function failImpl_620762529(inputInHEX60gensym96_620762530, expectedInHEX60gensym96_620762531, tailInHEX60gensym96_620762532) {
  var result_620762534 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620762534 = nimCopy(result_620762534, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym96_620762531, NTI620761098), tail: nimCopy(null, tailInHEX60gensym96_620762532, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym96_620762530, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620762534;

}
      
function HEX3Aanonymous_620762537(input_620762538) {
            var Temporary2;
          var Temporary3;

        var result_620762540 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762541 = succeedImpl_620762522;
          var fail_620762542 = failImpl_620762529;
          Label1: do {
            var tempHEX60gensym24_620762555 = parse_620758790(a_620762508, input_620762538);
            if ((tempHEX60gensym24_620762555.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620762555;
            if (ConstSet73[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620762540 = nimCopy(result_620762540, {kind: 1, fromInput: nimCopy(null, input_620762538, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620762555.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620762561 = nimCopy(null, tempHEX60gensym24_620762555, NTI1191182468);
          var Temporary3 = result1_620762561;
          if (ConstSet74[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620762540 = nimCopy(result_620762540, succeed_620762541(input_620762538, fn_620762510(Temporary3.value), result1_620762561.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620762540;

      }

  var result_620762511 = null;

    Label1: do {
    } while (false);
    result_620762511 = {body: HEX3Aanonymous_620762537};

  return result_620762511;

}

function HEX3CHEX3C_620762399(a_620762402, b_620762403) {

function succeedImpl_620762415(inputInHEX60gensym94_620762416, valueInHEX60gensym94_620762417, tailInHEX60gensym94_620762418) {
  var result_620762420 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762420 = nimCopy(result_620762420, {kind: 0, value: nimCopy(null, valueInHEX60gensym94_620762417, NTI33554439), tail: nimCopy(null, tailInHEX60gensym94_620762418, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym94_620762416, NTI33554439), expected: []}, NTI1191182468);

  return result_620762420;

}

function failImpl_620762422(inputInHEX60gensym94_620762423, expectedInHEX60gensym94_620762424, tailInHEX60gensym94_620762425) {
  var result_620762427 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762427 = nimCopy(result_620762427, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym94_620762424, NTI620761020), tail: nimCopy(null, tailInHEX60gensym94_620762425, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym94_620762423, NTI33554439), value: []}, NTI1191182468);

  return result_620762427;

}
      
function HEX3Aanonymous_620762430(input_620762431) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620762433 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762434 = succeedImpl_620762415;
          var fail_620762435 = failImpl_620762422;
          Label1: do {
            var tempHEX60gensym30_620762448 = parse_620758790(a_620762402, input_620762431);
            if ((tempHEX60gensym30_620762448.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620762448;
            if (ConstSet75[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620762433 = nimCopy(result_620762433, {kind: 1, fromInput: nimCopy(null, input_620762431, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym30_620762448.tail, NTI33554439), value: []}, NTI1191182468);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620762454 = nimCopy(null, tempHEX60gensym30_620762448, NTI1191182468);
          Label3: do {
            var tempHEX60gensym32_620762467 = parse_1191183306(b_620762403, result1_620762454.tail);
            if ((tempHEX60gensym32_620762467.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620762467;
            if (ConstSet76[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620762433 = nimCopy(result_620762433, {kind: 1, fromInput: nimCopy(null, input_620762431, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym32_620762467.tail, NTI33554439), value: []}, NTI1191182468);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620762473 = nimCopy(null, tempHEX60gensym32_620762467, NTI1191182566);
          var Temporary5 = result1_620762454;
          if (ConstSet77[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620762433 = nimCopy(result_620762433, succeed_620762434(input_620762431, Temporary5.value, result2_620762473.tail), NTI1191182468);
          break BeforeRet;
        } while (false);

        return result_620762433;

      }

  var result_620762404 = null;

    Label1: do {
    } while (false);
    result_620762404 = {body: HEX3Aanonymous_620762430};

  return result_620762404;

}

function HEX21_620762342(a_620762344) {

function succeedImpl_620762356(inputInHEX60gensym93_620762357, valueInHEX60gensym93_620762358, tailInHEX60gensym93_620762359) {
  var result_620762361 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620762361 = nimCopy(result_620762361, {kind: 0, value: valueInHEX60gensym93_620762358, tail: nimCopy(null, tailInHEX60gensym93_620762359, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym93_620762357, NTI33554439), expected: []}, NTI1191182566);

  return result_620762361;

}

function failImpl_620762363(inputInHEX60gensym93_620762364, expectedInHEX60gensym93_620762365, tailInHEX60gensym93_620762366) {
  var result_620762368 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620762368 = nimCopy(result_620762368, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym93_620762365, NTI620760975), tail: nimCopy(null, tailInHEX60gensym93_620762366, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym93_620762364, NTI33554439), value: 0}, NTI1191182566);

  return result_620762368;

}
      
function HEX3Aanonymous_620762371(input_620762372) {
        var result_620762374 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762375 = succeedImpl_620762356;
          var fail_620762376 = failImpl_620762363;
          var result1_620762389 = parse_1191183306(a_620762344, input_620762372);
          switch (result1_620762389.kind) {
          case 0:
            result_620762374 = nimCopy(result_620762374, fail_620762376(input_620762372, [makeNimstrLit("successful negative lookahead")], input_620762372), NTI1191182566);
            break BeforeRet;
            break;
          case 1:
            result_620762374 = nimCopy(result_620762374, succeed_620762375(input_620762372, 0, input_620762372), NTI1191182566);
            break BeforeRet;
            break;
          }
        } while (false);

        return result_620762374;

      }

  var result_620762345 = null;

    Label1: do {
    } while (false);
    result_620762345 = {body: HEX3Aanonymous_620762371};

  return result_620762345;

}

function validate_620764187(p_620764189, fn_620764191, expected_620764192) {

function succeedImpl_620764204(inputInHEX60gensym129_620764205, valueInHEX60gensym129_620764206, tailInHEX60gensym129_620764207) {
  var result_620764209 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620764209 = nimCopy(result_620764209, {kind: 0, value: nimCopy(null, valueInHEX60gensym129_620764206, NTI33554439), tail: nimCopy(null, tailInHEX60gensym129_620764207, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym129_620764205, NTI33554439), expected: []}, NTI1191182468);

  return result_620764209;

}

function failImpl_620764211(inputInHEX60gensym129_620764212, expectedInHEX60gensym129_620764213, tailInHEX60gensym129_620764214) {
  var result_620764216 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620764216 = nimCopy(result_620764216, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym129_620764213, NTI620762445), tail: nimCopy(null, tailInHEX60gensym129_620764214, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym129_620764212, NTI33554439), value: []}, NTI1191182468);

  return result_620764216;

}
      expected_620764192 = nimCopy(null, expected_620764192, NTI33554439);
      
function HEX3Aanonymous_620764219(input_620764220) {
              var Temporary1;

        var result_620764222 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764223 = succeedImpl_620764204;
          var fail_620764224 = failImpl_620764211;
          var result1_620764237 = parse_620758790(p_620764189, input_620764220);
          switch (result1_620764237.kind) {
          case 1:
            result_620764222 = nimCopy(result_620764222, result1_620764237, NTI1191182468);
            break BeforeRet;
            break;
          case 0:
              var Temporary1 = result1_620764237;
              if (ConstSet78[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1191182357)); }
            if (fn_620764191(Temporary1.value)) {
            result_620764222 = nimCopy(result_620764222, result1_620764237, NTI1191182468);
            break BeforeRet;
            }
            
            result_620764222 = nimCopy(result_620764222, fail_620764224(input_620764220, [nimCopy(null, expected_620764192, NTI33554439)], input_620764220), NTI1191182468);
            break BeforeRet;
            break;
          }
        } while (false);

        return result_620764222;

      }

  var result_620764193 = null;

    Label1: do {
    } while (false);
    result_620764193 = {body: HEX3Aanonymous_620764219};

  return result_620764193;

}

function parse_620763134(p_620763136, input_620763137) {
  var result_620763138 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620763136.body == null)) {
    result_620763138 = nimCopy(result_620763138, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620763137, NTI33554439), fromInput: nimCopy(null, input_620763137, NTI33554439), value: []}, NTI620761192);
    break BeforeRet;
    }
    
    result_620763138 = nimCopy(result_620763138, p_620763136.body(input_620763137), NTI620761192);
  } while (false);

  return result_620763138;

}

function map_620764053(a_620764056, fn_620764058) {

function succeedImpl_620764070(inputInHEX60gensym127_620764071, valueInHEX60gensym127_620764072, tailInHEX60gensym127_620764073) {
  var result_620764075 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620764075 = nimCopy(result_620764075, {kind: 0, value: nimCopy(null, valueInHEX60gensym127_620764072, NTI33554439), tail: nimCopy(null, tailInHEX60gensym127_620764073, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym127_620764071, NTI33554439), expected: []}, NTI1191182468);

  return result_620764075;

}

function failImpl_620764077(inputInHEX60gensym127_620764078, expectedInHEX60gensym127_620764079, tailInHEX60gensym127_620764080) {
  var result_620764082 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620764082 = nimCopy(result_620764082, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym127_620764079, NTI620762364), tail: nimCopy(null, tailInHEX60gensym127_620764080, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym127_620764078, NTI33554439), value: []}, NTI1191182468);

  return result_620764082;

}
      
function HEX3Aanonymous_620764085(input_620764086) {
            var Temporary2;
          var Temporary3;

        var result_620764088 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764089 = succeedImpl_620764070;
          var fail_620764090 = failImpl_620764077;
          Label1: do {
            var tempHEX60gensym24_620764103 = parse_620763134(a_620764056, input_620764086);
            if ((tempHEX60gensym24_620764103.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620764103;
            if (ConstSet79[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620764088 = nimCopy(result_620764088, {kind: 1, fromInput: nimCopy(null, input_620764086, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620764103.tail, NTI33554439), value: []}, NTI1191182468);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620764109 = nimCopy(null, tempHEX60gensym24_620764103, NTI620761192);
          var Temporary3 = result1_620764109;
          if (ConstSet80[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620764088 = nimCopy(result_620764088, succeed_620764089(input_620764086, fn_620764058(Temporary3.value), result1_620764109.tail), NTI1191182468);
          break BeforeRet;
        } while (false);

        return result_620764088;

      }

  var result_620764059 = null;

    Label1: do {
    } while (false);
    result_620764059 = {body: HEX3Aanonymous_620764085};

  return result_620764059;

}

function HEX3EHEX3E_620763925(a_620763928, b_620763929) {

function succeedImpl_620763941(inputInHEX60gensym126_620763942, valueInHEX60gensym126_620763943, tailInHEX60gensym126_620763944) {
  var result_620763946 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763946 = nimCopy(result_620763946, {kind: 0, value: nimCopy(null, valueInHEX60gensym126_620763943, NTI620761186), tail: nimCopy(null, tailInHEX60gensym126_620763944, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym126_620763942, NTI33554439), expected: []}, NTI620761192);

  return result_620763946;

}

function failImpl_620763948(inputInHEX60gensym126_620763949, expectedInHEX60gensym126_620763950, tailInHEX60gensym126_620763951) {
  var result_620763953 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763953 = nimCopy(result_620763953, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym126_620763950, NTI620762273), tail: nimCopy(null, tailInHEX60gensym126_620763951, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym126_620763949, NTI33554439), value: []}, NTI620761192);

  return result_620763953;

}
      
function HEX3Aanonymous_620763956(input_620763957) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620763959 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763960 = succeedImpl_620763941;
          var fail_620763961 = failImpl_620763948;
          Label1: do {
            var tempHEX60gensym34_620763974 = parse_1191183306(a_620763928, input_620763957);
            if ((tempHEX60gensym34_620763974.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620763974;
            if (ConstSet81[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620763959 = nimCopy(result_620763959, {kind: 1, fromInput: nimCopy(null, input_620763957, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620763974.tail, NTI33554439), value: []}, NTI620761192);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620763980 = nimCopy(null, tempHEX60gensym34_620763974, NTI1191182566);
          Label3: do {
            var tempHEX60gensym36_620763993 = parse_620763134(b_620763929, result1_620763980.tail);
            if ((tempHEX60gensym36_620763993.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620763993;
            if (ConstSet82[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620763959 = nimCopy(result_620763959, {kind: 1, fromInput: nimCopy(null, input_620763957, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620763993.tail, NTI33554439), value: []}, NTI620761192);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620763999 = nimCopy(null, tempHEX60gensym36_620763993, NTI620761192);
          var Temporary5 = result2_620763999;
          if (ConstSet83[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620763959 = nimCopy(result_620763959, succeed_620763960(input_620763957, Temporary5.value, result2_620763999.tail), NTI620761192);
          break BeforeRet;
        } while (false);

        return result_620763959;

      }

  var result_620763930 = null;

    Label1: do {
    } while (false);
    result_620763930 = {body: HEX3Aanonymous_620763956};

  return result_620763930;

}

function parse_620763650(p_620763652, input_620763653) {
  var result_620763654 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620763652.body == null)) {
    result_620763654 = nimCopy(result_620763654, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620763653, NTI33554439), fromInput: nimCopy(null, input_620763653, NTI33554439), value: []}, NTI620761638);
    break BeforeRet;
    }
    
    result_620763654 = nimCopy(result_620763654, p_620763652.body(input_620763653), NTI620761638);
  } while (false);

  return result_620763654;

}

function map_620763860(a_620763863, fn_620763865) {

function succeedImpl_620763877(inputInHEX60gensym125_620763878, valueInHEX60gensym125_620763879, tailInHEX60gensym125_620763880) {
  var result_620763882 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763882 = nimCopy(result_620763882, {kind: 0, value: nimCopy(null, valueInHEX60gensym125_620763879, NTI620762132), tail: nimCopy(null, tailInHEX60gensym125_620763880, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym125_620763878, NTI33554439), expected: []}, NTI620761192);

  return result_620763882;

}

function failImpl_620763884(inputInHEX60gensym125_620763885, expectedInHEX60gensym125_620763886, tailInHEX60gensym125_620763887) {
  var result_620763889 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763889 = nimCopy(result_620763889, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym125_620763886, NTI620762226), tail: nimCopy(null, tailInHEX60gensym125_620763887, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym125_620763885, NTI33554439), value: []}, NTI620761192);

  return result_620763889;

}
      
function HEX3Aanonymous_620763892(input_620763893) {
            var Temporary2;
          var Temporary3;

        var result_620763895 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763896 = succeedImpl_620763877;
          var fail_620763897 = failImpl_620763884;
          Label1: do {
            var tempHEX60gensym24_620763910 = parse_620763650(a_620763863, input_620763893);
            if ((tempHEX60gensym24_620763910.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620763910;
            if (ConstSet84[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620763895 = nimCopy(result_620763895, {kind: 1, fromInput: nimCopy(null, input_620763893, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620763910.tail, NTI33554439), value: []}, NTI620761192);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620763916 = nimCopy(null, tempHEX60gensym24_620763910, NTI620761638);
          var Temporary3 = result1_620763916;
          if (ConstSet85[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620763895 = nimCopy(result_620763895, succeed_620763896(input_620763893, fn_620763865(Temporary3.value), result1_620763916.tail), NTI620761192);
          break BeforeRet;
        } while (false);

        return result_620763895;

      }

  var result_620763866 = null;

    Label1: do {
    } while (false);
    result_620763866 = {body: HEX3Aanonymous_620763892};

  return result_620763866;

}

function HEX26_620763692(x_620763694, y_620763695) {
  var result_620763696 = [];

    result_620763696 = new Array(chckRange(addInt((x_620763694).length, (y_620763695).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620763694).length, (y_620763695).length), 0, 2147483647) ; ++i) { result_620763696[i] = []; }    Label1: do {
      var i_620763715 = 0;
      var colontmp__620768394 = 0;
      colontmp__620768394 = subInt((x_620763694).length, 1);
      var res_620768395 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768395 <= colontmp__620768394)) break Label3;
            i_620763715 = res_620768395;
            result_620763696[chckIndx(i_620763715, 0, (result_620763696).length - 1)] = nimCopy(null, x_620763694[chckIndx(i_620763715, 0, (x_620763694).length - 1)], NTI620761186);
            res_620768395 = addInt(res_620768395, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620763723 = 0;
      var colontmp__620768398 = 0;
      colontmp__620768398 = subInt((y_620763695).length, 1);
      var res_620768399 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620768399 <= colontmp__620768398)) break Label6;
            i_620763723 = res_620768399;
            result_620763696[chckIndx(addInt(i_620763723, (x_620763694).length), 0, (result_620763696).length - 1)] = nimCopy(null, y_620763695[chckIndx(i_620763723, 0, (y_620763695).length - 1)], NTI620761186);
            res_620768399 = addInt(res_620768399, 1);
          }
      } while (false);
    } while (false);

  return result_620763696;

}

function HEX26_620763597(a_620763602, b_620763606) {

function succeedImpl_620763621(inputInHEX60gensym119_620763622, valueInHEX60gensym119_620763623, tailInHEX60gensym119_620763624) {
  var result_620763626 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763626 = nimCopy(result_620763626, {kind: 0, value: nimCopy(null, valueInHEX60gensym119_620763623, NTI620762022), tail: nimCopy(null, tailInHEX60gensym119_620763624, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym119_620763622, NTI33554439), expected: []}, NTI620761638);

  return result_620763626;

}

function failImpl_620763628(inputInHEX60gensym119_620763629, expectedInHEX60gensym119_620763630, tailInHEX60gensym119_620763631) {
  var result_620763633 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763633 = nimCopy(result_620763633, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym119_620763630, NTI620762028), tail: nimCopy(null, tailInHEX60gensym119_620763631, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym119_620763629, NTI33554439), value: []}, NTI620761638);

  return result_620763633;

}
      
function HEX3Aanonymous_620763636(input_620763637) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_620763639 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763640 = succeedImpl_620763621;
          var fail_620763641 = failImpl_620763628;
          Label1: do {
            var tempHEX60gensym26_620763666 = parse_620763650(a_620763602, input_620763637);
            if ((tempHEX60gensym26_620763666.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_620763666;
            if (ConstSet86[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620763639 = nimCopy(result_620763639, {kind: 1, fromInput: nimCopy(null, input_620763637, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym26_620763666.tail, NTI33554439), value: []}, NTI620761638);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620763672 = nimCopy(null, tempHEX60gensym26_620763666, NTI620761638);
          Label3: do {
            var tempHEX60gensym28_620763685 = parse_620763650(b_620763606, result1_620763672.tail);
            if ((tempHEX60gensym28_620763685.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_620763685;
            if (ConstSet87[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620763639 = nimCopy(result_620763639, {kind: 1, fromInput: nimCopy(null, input_620763637, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym28_620763685.tail, NTI33554439), value: []}, NTI620761638);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620763691 = nimCopy(null, tempHEX60gensym28_620763685, NTI620761638);
          var Temporary5 = result1_620763672;
          if (ConstSet88[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          var Temporary6 = result2_620763691;
          if (ConstSet89[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1191182357)); }
          result_620763639 = nimCopy(result_620763639, succeed_620763640(input_620763637, HEX26_620763692(Temporary5.value, Temporary6.value), result2_620763691.tail), NTI620761638);
          break BeforeRet;
        } while (false);

        return result_620763639;

      }

  var result_620763610 = null;

    Label1: do {
    } while (false);
    result_620763610 = {body: HEX3Aanonymous_620763636};

  return result_620763610;

}

function map_620763360(a_620763363, fn_620763365) {

function succeedImpl_620763377(inputInHEX60gensym115_620763378, valueInHEX60gensym115_620763379, tailInHEX60gensym115_620763380) {
  var result_620763382 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763382 = nimCopy(result_620763382, {kind: 0, value: nimCopy(null, valueInHEX60gensym115_620763379, NTI620761747), tail: nimCopy(null, tailInHEX60gensym115_620763380, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym115_620763378, NTI33554439), expected: []}, NTI620761638);

  return result_620763382;

}

function failImpl_620763384(inputInHEX60gensym115_620763385, expectedInHEX60gensym115_620763386, tailInHEX60gensym115_620763387) {
  var result_620763389 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763389 = nimCopy(result_620763389, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym115_620763386, NTI620761790), tail: nimCopy(null, tailInHEX60gensym115_620763387, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym115_620763385, NTI33554439), value: []}, NTI620761638);

  return result_620763389;

}
      
function HEX3Aanonymous_620763392(input_620763393) {
            var Temporary2;
          var Temporary3;

        var result_620763395 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763396 = succeedImpl_620763377;
          var fail_620763397 = failImpl_620763384;
          Label1: do {
            var tempHEX60gensym24_620763410 = parse_620763134(a_620763363, input_620763393);
            if ((tempHEX60gensym24_620763410.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620763410;
            if (ConstSet90[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620763395 = nimCopy(result_620763395, {kind: 1, fromInput: nimCopy(null, input_620763393, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620763410.tail, NTI33554439), value: []}, NTI620761638);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620763416 = nimCopy(null, tempHEX60gensym24_620763410, NTI620761192);
          var Temporary3 = result1_620763416;
          if (ConstSet91[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620763395 = nimCopy(result_620763395, succeed_620763396(input_620763393, fn_620763365(Temporary3.value), result1_620763416.tail), NTI620761638);
          break BeforeRet;
        } while (false);

        return result_620763395;

      }

  var result_620763366 = null;

    Label1: do {
    } while (false);
    result_620763366 = {body: HEX3Aanonymous_620763392};

  return result_620763366;

}

function nop_620762715() {

function succeedImpl_620762728(inputInHEX60gensym105_620762729, valueInHEX60gensym105_620762730, tailInHEX60gensym105_620762731) {
  var result_620762733 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762733 = nimCopy(result_620762733, {kind: 0, value: nimCopy(null, valueInHEX60gensym105_620762730, NTI620761235), tail: nimCopy(null, tailInHEX60gensym105_620762731, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym105_620762729, NTI33554439), expected: []}, NTI620761192);

  return result_620762733;

}

function failImpl_620762756(inputInHEX60gensym105_620762757, expectedInHEX60gensym105_620762758, tailInHEX60gensym105_620762759) {
  var result_620762761 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762761 = nimCopy(result_620762761, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym105_620762758, NTI620761268), tail: nimCopy(null, tailInHEX60gensym105_620762759, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym105_620762757, NTI33554439), value: []}, NTI620761192);

  return result_620762761;

}
      
function HEX3Aanonymous_620762764(input_620762765) {
        var result_620762767 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620762768 = succeedImpl_620762728;
          var fail_620762769 = failImpl_620762756;
          result_620762767 = nimCopy(result_620762767, succeed_620762768(input_620762765, [], input_620762765), NTI620761192);

        return result_620762767;

      }

  var result_620762717 = null;

    Label1: do {
    } while (false);
    result_620762717 = {body: HEX3Aanonymous_620762764};

  return result_620762717;

}

function map_620762870(a_620762873, fn_620762875) {

function succeedImpl_620762887(inputInHEX60gensym107_620762888, valueInHEX60gensym107_620762889, tailInHEX60gensym107_620762890) {
  var result_620762892 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762892 = nimCopy(result_620762892, {kind: 0, value: nimCopy(null, valueInHEX60gensym107_620762889, NTI620761337), tail: nimCopy(null, tailInHEX60gensym107_620762890, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym107_620762888, NTI33554439), expected: []}, NTI620761192);

  return result_620762892;

}

function failImpl_620762894(inputInHEX60gensym107_620762895, expectedInHEX60gensym107_620762896, tailInHEX60gensym107_620762897) {
  var result_620762899 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762899 = nimCopy(result_620762899, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym107_620762896, NTI620761380), tail: nimCopy(null, tailInHEX60gensym107_620762897, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym107_620762895, NTI33554439), value: []}, NTI620761192);

  return result_620762899;

}
      
function HEX3Aanonymous_620762902(input_620762903) {
            var Temporary2;
          var Temporary3;

        var result_620762905 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762906 = succeedImpl_620762887;
          var fail_620762907 = failImpl_620762894;
          Label1: do {
            var tempHEX60gensym24_620762920 = parse_1191183306(a_620762873, input_620762903);
            if ((tempHEX60gensym24_620762920.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620762920;
            if (ConstSet92[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620762905 = nimCopy(result_620762905, {kind: 1, fromInput: nimCopy(null, input_620762903, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620762920.tail, NTI33554439), value: []}, NTI620761192);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620762926 = nimCopy(null, tempHEX60gensym24_620762920, NTI1191182566);
          var Temporary3 = result1_620762926;
          if (ConstSet93[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620762905 = nimCopy(result_620762905, succeed_620762906(input_620762903, fn_620762875(Temporary3.value), result1_620762926.tail), NTI620761192);
          break BeforeRet;
        } while (false);

        return result_620762905;

      }

  var result_620762876 = null;

    Label1: do {
    } while (false);
    result_620762876 = {body: HEX3Aanonymous_620762902};

  return result_620762876;

}

function HEX2A_620762707(a_620762709, n_620762710) {
    var Temporary1;
      
function HEX3Aanonymous_620762832(x_620762861) {
        var result_620762864 = [];

          result_620762864 = nimCopy(null, [x_620762861], NTI620761337);

        return result_620762864;

      }

function succeedImpl_620762937(inputInHEX60gensym108_620762938, valueInHEX60gensym108_620762939, tailInHEX60gensym108_620762940) {
  var result_620762942 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762942 = nimCopy(result_620762942, {kind: 0, value: nimCopy(null, valueInHEX60gensym108_620762939, NTI620761420), tail: nimCopy(null, tailInHEX60gensym108_620762940, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym108_620762938, NTI33554439), expected: []}, NTI620761192);

  return result_620762942;

}

function failImpl_620762944(inputInHEX60gensym108_620762945, expectedInHEX60gensym108_620762946, tailInHEX60gensym108_620762947) {
  var result_620762949 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762949 = nimCopy(result_620762949, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym108_620762946, NTI620761426), tail: nimCopy(null, tailInHEX60gensym108_620762947, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym108_620762945, NTI33554439), value: []}, NTI620761192);

  return result_620762949;

}
        
function HEX3Aanonymous_620762952(input_620762953) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620762955 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620762956 = succeedImpl_620762937;
            var fail_620762957 = failImpl_620762944;
            Label1: do {
              var tempHEX60gensym38_620762970 = parse_1191183306(a_620762709, input_620762953);
              if ((tempHEX60gensym38_620762970.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620762970;
              if (ConstSet94[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
              result_620762955 = nimCopy(result_620762955, {kind: 1, fromInput: nimCopy(null, input_620762953, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym38_620762970.tail, NTI33554439), value: []}, NTI620761192);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620762976 = nimCopy(null, tempHEX60gensym38_620762970, NTI1191182566);
            var Temporary3 = result1_620762976;
            if (ConstSet95[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
            var outputs_620762981 = [Temporary3.value];
            var lastTail_620762982 = nimCopy(null, result1_620762976.tail, NTI33554439);
            Label4: do {
              var i_620762988 = 0;
              var res_620768407 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620768407 <= n_620762710)) break Label6;
                    i_620762988 = res_620768407;
                    Label7: do {
                      var tempHEX60gensym40_620763001 = parse_1191183306(a_620762709, result1_620762976.tail);
                      if ((tempHEX60gensym40_620763001.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620763001;
                      if (ConstSet96[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1191182357)); }
                      result_620762955 = nimCopy(result_620762955, {kind: 1, fromInput: nimCopy(null, input_620762953, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym40_620763001.tail, NTI33554439), value: []}, NTI620761192);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620762976 = nimCopy(result1_620762976, tempHEX60gensym40_620763001, NTI1191182566);
                    if (eqStrings(result1_620762976.tail, lastTail_620762982)) {
                    break Label4;
                    }
                    
                    lastTail_620762982 = nimCopy(null, result1_620762976.tail, NTI33554439);
                    var Temporary9 = result1_620762976;
                    if (ConstSet97[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1191182357)); }
                    outputs_620762981.push(Temporary9.value);;
                    res_620768407 = addInt(res_620768407, 1);
                  }
              } while (false);
            } while (false);
            result_620762955 = nimCopy(result_620762955, succeed_620762956(input_620762953, outputs_620762981, result1_620762976.tail), NTI620761192);
          } while (false);

          return result_620762955;

        }

  var result_620762714 = null;

  BeforeRet: do {
    switch (n_620762710) {
    case 0:
      result_620762714 = nop_620762715();
      break BeforeRet;
      break;
    case 1:
      result_620762714 = map_620762870(a_620762709, HEX3Aanonymous_620762832);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620762952};
      break;
    }
    result_620762714 = Temporary1;
  } while (false);

  return result_620762714;

}

function nop_620763205() {

function succeedImpl_620763218(inputInHEX60gensym113_620763219, valueInHEX60gensym113_620763220, tailInHEX60gensym113_620763221) {
  var result_620763223 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763223 = nimCopy(result_620763223, {kind: 0, value: nimCopy(null, valueInHEX60gensym113_620763220, NTI620761645), tail: nimCopy(null, tailInHEX60gensym113_620763221, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym113_620763219, NTI33554439), expected: []}, NTI620761638);

  return result_620763223;

}

function failImpl_620763246(inputInHEX60gensym113_620763247, expectedInHEX60gensym113_620763248, tailInHEX60gensym113_620763249) {
  var result_620763251 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763251 = nimCopy(result_620763251, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym113_620763248, NTI620761678), tail: nimCopy(null, tailInHEX60gensym113_620763249, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym113_620763247, NTI33554439), value: []}, NTI620761638);

  return result_620763251;

}
      
function HEX3Aanonymous_620763254(input_620763255) {
        var result_620763257 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620763258 = succeedImpl_620763218;
          var fail_620763259 = failImpl_620763246;
          result_620763257 = nimCopy(result_620763257, succeed_620763258(input_620763255, [], input_620763255), NTI620761638);

        return result_620763257;

      }

  var result_620763207 = null;

    Label1: do {
    } while (false);
    result_620763207 = {body: HEX3Aanonymous_620763254};

  return result_620763207;

}

function HEX2A_620763192(a_620763194, n_620763195) {
    var Temporary1;
      
function HEX3Aanonymous_620763322(x_620763351) {
        var result_620763354 = [];

          result_620763354 = nimCopy(null, [nimCopy(null, x_620763351, NTI620761186)], NTI620761747);

        return result_620763354;

      }

function succeedImpl_620763427(inputInHEX60gensym116_620763428, valueInHEX60gensym116_620763429, tailInHEX60gensym116_620763430) {
  var result_620763432 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763432 = nimCopy(result_620763432, {kind: 0, value: nimCopy(null, valueInHEX60gensym116_620763429, NTI620761830), tail: nimCopy(null, tailInHEX60gensym116_620763430, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym116_620763428, NTI33554439), expected: []}, NTI620761638);

  return result_620763432;

}

function failImpl_620763434(inputInHEX60gensym116_620763435, expectedInHEX60gensym116_620763436, tailInHEX60gensym116_620763437) {
  var result_620763439 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763439 = nimCopy(result_620763439, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym116_620763436, NTI620761836), tail: nimCopy(null, tailInHEX60gensym116_620763437, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym116_620763435, NTI33554439), value: []}, NTI620761638);

  return result_620763439;

}
        
function HEX3Aanonymous_620763442(input_620763443) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620763445 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620763446 = succeedImpl_620763427;
            var fail_620763447 = failImpl_620763434;
            Label1: do {
              var tempHEX60gensym38_620763460 = parse_620763134(a_620763194, input_620763443);
              if ((tempHEX60gensym38_620763460.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620763460;
              if (ConstSet98[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
              result_620763445 = nimCopy(result_620763445, {kind: 1, fromInput: nimCopy(null, input_620763443, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym38_620763460.tail, NTI33554439), value: []}, NTI620761638);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620763466 = nimCopy(null, tempHEX60gensym38_620763460, NTI620761192);
            var Temporary3 = result1_620763466;
            if (ConstSet99[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
            var outputs_620763471 = [nimCopy(null, Temporary3.value, NTI620761186)];
            var lastTail_620763472 = nimCopy(null, result1_620763466.tail, NTI33554439);
            Label4: do {
              var i_620763478 = 0;
              var res_620768416 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620768416 <= n_620763195)) break Label6;
                    i_620763478 = res_620768416;
                    Label7: do {
                      var tempHEX60gensym40_620763491 = parse_620763134(a_620763194, result1_620763466.tail);
                      if ((tempHEX60gensym40_620763491.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620763491;
                      if (ConstSet100[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1191182357)); }
                      result_620763445 = nimCopy(result_620763445, {kind: 1, fromInput: nimCopy(null, input_620763443, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym40_620763491.tail, NTI33554439), value: []}, NTI620761638);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620763466 = nimCopy(result1_620763466, tempHEX60gensym40_620763491, NTI620761192);
                    if (eqStrings(result1_620763466.tail, lastTail_620763472)) {
                    break Label4;
                    }
                    
                    lastTail_620763472 = nimCopy(null, result1_620763466.tail, NTI33554439);
                    var Temporary9 = result1_620763466;
                    if (ConstSet101[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1191182357)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI620761186);
                    outputs_620763471.push(Temporary10);;
                    res_620768416 = addInt(res_620768416, 1);
                  }
              } while (false);
            } while (false);
            result_620763445 = nimCopy(result_620763445, succeed_620763446(input_620763443, outputs_620763471, result1_620763466.tail), NTI620761638);
          } while (false);

          return result_620763445;

        }

  var result_620763204 = null;

  BeforeRet: do {
    switch (n_620763195) {
    case 0:
      result_620763204 = nop_620763205();
      break BeforeRet;
      break;
    case 1:
      result_620763204 = map_620763360(a_620763194, HEX3Aanonymous_620763322);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620763442};
      break;
    }
    result_620763204 = Temporary1;
  } while (false);

  return result_620763204;

}

function HEX7C_620763090(a_620763092, b_620763093) {

function succeedImpl_620763105(inputInHEX60gensym112_620763106, valueInHEX60gensym112_620763107, tailInHEX60gensym112_620763108) {
  var result_620763110 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763110 = nimCopy(result_620763110, {kind: 0, value: nimCopy(null, valueInHEX60gensym112_620763107, NTI620761186), tail: nimCopy(null, tailInHEX60gensym112_620763108, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym112_620763106, NTI33554439), expected: []}, NTI620761192);

  return result_620763110;

}

function failImpl_620763112(inputInHEX60gensym112_620763113, expectedInHEX60gensym112_620763114, tailInHEX60gensym112_620763115) {
  var result_620763117 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763117 = nimCopy(result_620763117, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym112_620763114, NTI620761582), tail: nimCopy(null, tailInHEX60gensym112_620763115, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym112_620763113, NTI33554439), value: []}, NTI620761192);

  return result_620763117;

}
      
function HEX3Aanonymous_620763120(input_620763121) {
          var Temporary1;
          var Temporary2;

        var result_620763123 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763124 = succeedImpl_620763105;
          var fail_620763125 = failImpl_620763112;
          var result1_620763150 = parse_620763134(a_620763092, input_620763121);
          if ((result1_620763150.kind == 0)) {
          result_620763123 = nimCopy(result_620763123, result1_620763150, NTI620761192);
          break BeforeRet;
          }
          
          var result2_620763167 = parse_620763134(b_620763093, input_620763121);
          if ((result2_620763167.kind == 0)) {
          result_620763123 = nimCopy(result_620763123, result2_620763167, NTI620761192);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620763150;
          if (ConstSet102[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1191182357)); }
          var Temporary2 = result2_620763167;
          if (ConstSet103[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
          result_620763123 = nimCopy(result_620763123, fail_620763125(input_620763121, HEX26_654311539(Temporary1.expected, Temporary2.expected), input_620763121), NTI620761192);
        } while (false);

        return result_620763123;

      }

  var result_620763094 = null;

    Label1: do {
    } while (false);
    result_620763094 = {body: HEX3Aanonymous_620763120};

  return result_620763094;

}

function newSeq_620763748(len_620763750) {
  var result_620763751 = [];

    result_620763751 = new Array(len_620763750); for (var i = 0 ; i < len_620763750 ; ++i) { result_620763751[i] = 0; }
  return result_620763751;

}

function HEX26_620763783(x_620763785, y_620763786) {
  var result_620763787 = [];

    result_620763787 = new Array(chckRange(addInt((x_620763785).length, (y_620763786).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620763785).length, (y_620763786).length), 0, 2147483647) ; ++i) { result_620763787[i] = 0; }    Label1: do {
      var i_620763806 = 0;
      var colontmp__620768426 = 0;
      colontmp__620768426 = subInt((x_620763785).length, 1);
      var res_620768427 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768427 <= colontmp__620768426)) break Label3;
            i_620763806 = res_620768427;
            result_620763787[chckIndx(i_620763806, 0, (result_620763787).length - 1)] = x_620763785[chckIndx(i_620763806, 0, (x_620763785).length - 1)];
            res_620768427 = addInt(res_620768427, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620763814 = 0;
      var colontmp__620768430 = 0;
      colontmp__620768430 = subInt((y_620763786).length, 1);
      var res_620768431 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620768431 <= colontmp__620768430)) break Label6;
            i_620763814 = res_620768431;
            result_620763787[chckIndx(addInt(i_620763814, (x_620763785).length), 0, (result_620763787).length - 1)] = y_620763786[chckIndx(i_620763814, 0, (y_620763786).length - 1)];
            res_620768431 = addInt(res_620768431, 1);
          }
      } while (false);
    } while (false);

  return result_620763787;

}

function join_620764015(a_620764017, sep_620764018) {
  var result_620764019 = [];

    result_620764019 = nimCopy(null, [], NTI33554439);
    Label1: do {
      var i_620764033 = 0;
      var x_620764034 = 0;
      var i_620768435 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768435 < (a_620764017).length)) break Label3;
            i_620764033 = i_620768435;
            x_620764034 = a_620764017[chckIndx(i_620768435, 0, (a_620764017).length - 1)];
            if ((0 < i_620764033)) {
            result_620764019.push.apply(result_620764019, sep_620764018);;
            }
            
            result_620764019.push.apply(result_620764019, nimCharToStr(x_620764034));;
            i_620768435 = addInt(i_620768435, 1);
          }
      } while (false);
    } while (false);

  return result_620764019;

}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function imul_1107296546(a_1107296547, b_1107296548) {
  var result_1107296549 = 0;

    var mask_1107296550 = 65535;
    var aHi_1107296555 = ((a_1107296547 >>> 16) & mask_1107296550);
    var aLo_1107296556 = (a_1107296547 & mask_1107296550);
    var bHi_1107296561 = ((b_1107296548 >>> 16) & mask_1107296550);
    var bLo_1107296562 = (b_1107296548 & mask_1107296550);
    result_1107296549 = ((((aLo_1107296556 * bLo_1107296562) >>> 0) + (((((aHi_1107296555 * bLo_1107296562) >>> 0) + ((aLo_1107296556 * bHi_1107296561) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_1107296549;

}

function rotl32_1107296567(x_1107296568, r_1107296569) {
  var result_1107296570 = 0;

    result_1107296570 = ((x_1107296568 << r_1107296569) | (x_1107296568 >>> subInt(32, r_1107296569)));

  return result_1107296570;

}

function murmurHash_1107296579(x_1107296580) {
  var result_1107296581 = 0;

  BeforeRet: do {
    var size_1107296590 = (x_1107296580).length;
    var stepSize_1107296591 = 4;
    var n_1107296592 = divInt(size_1107296590, stepSize_1107296591);
    var h1_1107296593 = 0;
    var i_1107296594 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_1107296594 < mulInt(n_1107296592, stepSize_1107296591))) break Label2;
          var k1_1107296595 = 0;
          var j_1107296596 = stepSize_1107296591;
          Label3: do {
              Label4: while (true) {
              if (!(0 < j_1107296596)) break Label4;
                j_1107296596 = subInt(j_1107296596, 1);
                k1_1107296595 = ((k1_1107296595 << 8) | x_1107296580[chckIndx(addInt(i_1107296594, j_1107296596), 0, (x_1107296580).length - 1)]);
              }
          } while (false);
          i_1107296594 = addInt(i_1107296594, stepSize_1107296591);
          k1_1107296595 = imul_1107296546(k1_1107296595, 3432918353);
          k1_1107296595 = rotl32_1107296567(k1_1107296595, 15);
          k1_1107296595 = imul_1107296546(k1_1107296595, 461845907);
          h1_1107296593 = (h1_1107296593 ^ k1_1107296595);
          h1_1107296593 = rotl32_1107296567(h1_1107296593, 13);
          h1_1107296593 = ((((h1_1107296593 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while (false);
    var k1_1107296613 = 0;
    var rem_1107296614 = modInt(size_1107296590, stepSize_1107296591);
    Label5: do {
        Label6: while (true) {
        if (!(0 < rem_1107296614)) break Label6;
          rem_1107296614 = subInt(rem_1107296614, 1);
          k1_1107296613 = ((k1_1107296613 << 8) | x_1107296580[chckIndx(addInt(i_1107296594, rem_1107296614), 0, (x_1107296580).length - 1)]);
        }
    } while (false);
    k1_1107296613 = imul_1107296546(k1_1107296613, 3432918353);
    k1_1107296613 = rotl32_1107296567(k1_1107296613, 15);
    k1_1107296613 = imul_1107296546(k1_1107296613, 461845907);
    h1_1107296593 = (h1_1107296593 ^ k1_1107296613);
    h1_1107296593 = (h1_1107296593 ^ size_1107296590);
    h1_1107296593 = (h1_1107296593 ^ (h1_1107296593 >>> 16));
    h1_1107296593 = imul_1107296546(h1_1107296593, 2246822507);
    h1_1107296593 = (h1_1107296593 ^ (h1_1107296593 >>> 13));
    h1_1107296593 = imul_1107296546(h1_1107296593, 3266489909);
    h1_1107296593 = (h1_1107296593 ^ (h1_1107296593 >>> 16));
    result_1107296581 = (h1_1107296593 | 0);
    break BeforeRet;
  } while (false);

  return result_1107296581;

}

function hash_1107296678(x_1107296679) {
  var result_1107296680 = 0;

    result_1107296680 = murmurHash_1107296579((x_1107296679.slice(0, (x_1107296679).length - 1 + 1)));

  return result_1107296680;

}

function isFilled_1090519071(hcode_1090519072) {
  var result_1090519073 = false;

    result_1090519073 = !((hcode_1090519072 == 0));

  return result_1090519073;

}

function nextTry_1090519074(h_1090519075, maxHash_1090519076) {
  var result_1090519077 = 0;

    result_1090519077 = (addInt(h_1090519075, 1) & maxHash_1090519076);

  return result_1090519077;

}

function rawGet_637534715(t_637534718, key_637534719, hc_637534720, hc_637534720_Idx) {
            var Temporary3;

  var result_637534721 = 0;

  BeforeRet: do {
    hc_637534720[hc_637534720_Idx] = hash_1107296678(key_637534719);
    if ((hc_637534720[hc_637534720_Idx] == 0)) {
    hc_637534720[hc_637534720_Idx] = 314159265;
    }
    
    if (((t_637534718.data).length == 0)) {
    result_637534721 = -1;
    break BeforeRet;
    }
    
    var h_637534772 = (hc_637534720[hc_637534720_Idx] & (t_637534718.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1090519071(t_637534718.data[chckIndx(h_637534772, 0, (t_637534718.data).length - 1)].Field0)) break Label2;
            if (!(t_637534718.data[chckIndx(h_637534772, 0, (t_637534718.data).length - 1)].Field0 == hc_637534720[hc_637534720_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_637534718.data[chckIndx(h_637534772, 0, (t_637534718.data).length - 1)].Field1, key_637534719);            }          if (Temporary3) {
          result_637534721 = h_637534772;
          break BeforeRet;
          }
          
          h_637534772 = nextTry_1090519074(h_637534772, (t_637534718.data).length - 1);
        }
    } while (false);
    result_637534721 = subInt(-1, h_637534772);
  } while (false);

  return result_637534721;

}

function hasKey_620764173(t_620764176, key_620764177) {
  var result_620764178 = false;

    var hc_620764179 = [0];
    result_620764178 = (0 <= rawGet_637534715(t_620764176, key_620764177, hc_620764179, 0));

  return result_620764178;

}

function contains_620764167(t_620764170, key_620764171) {
  var result_620764172 = false;

  BeforeRet: do {
    result_620764172 = hasKey_620764173(t_620764170, key_620764171);
    break BeforeRet;
  } while (false);

  return result_620764172;

}

function raiseKeyError_1207961319(key_1207961321) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_1207961321 || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_620764310(t_620764313, key_620764314) {
  var result_620764315 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var hcHEX60gensym20_620764316 = [0];
    var indexHEX60gensym20_620764323 = rawGet_637534715(t_620764313, key_620764314, hcHEX60gensym20_620764316, 0);
    if ((0 <= indexHEX60gensym20_620764323)) {
    result_620764315 = nimCopy(result_620764315, t_620764313.data[chckIndx(indexHEX60gensym20_620764323, 0, (t_620764313.data).length - 1)].Field2, NTI654311428);
    }
    else {
    raiseKeyError_1207961319(key_620764314);
    }
    

  return result_620764315;

}

function map_620764851(s_620764854, op_620764856) {
  var result_620764857 = [];

    result_620764857 = new Array(chckRange((s_620764854).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_620764854).length, 0, 2147483647) ; ++i) { result_620764857[i] = null; }    Label1: do {
      var i_620764873 = 0;
      var colontmp__620768442 = 0;
      colontmp__620768442 = (s_620764854).length;
      var i_620768443 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768443 < colontmp__620768442)) break Label3;
            i_620764873 = i_620768443;
            result_620764857[chckIndx(i_620764873, 0, (result_620764857).length - 1)] = op_620764856(s_620764854[chckIndx(i_620764873, 0, (s_620764854).length - 1)]);
            i_620768443 = addInt(i_620768443, 1);
          }
      } while (false);
    } while (false);

  return result_620764857;

}

function map_620764784(a_620764787, fn_620764789) {

function succeedImpl_620764801(inputInHEX60gensym137_620764802, valueInHEX60gensym137_620764803, tailInHEX60gensym137_620764804) {
  var result_620764806 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620764806 = nimCopy(result_620764806, {kind: 0, value: nimCopy(null, valueInHEX60gensym137_620764803, NTI654311428), tail: nimCopy(null, tailInHEX60gensym137_620764804, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym137_620764802, NTI33554439), expected: []}, NTI620758888);

  return result_620764806;

}

function failImpl_620764808(inputInHEX60gensym137_620764809, expectedInHEX60gensym137_620764810, tailInHEX60gensym137_620764811) {
  var result_620764813 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620764813 = nimCopy(result_620764813, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym137_620764810, NTI620762806), tail: nimCopy(null, tailInHEX60gensym137_620764811, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym137_620764809, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620764813;

}
      
function HEX3Aanonymous_620764816(input_620764817) {
            var Temporary2;
          var Temporary3;

        var result_620764819 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764820 = succeedImpl_620764801;
          var fail_620764821 = failImpl_620764808;
          Label1: do {
            var tempHEX60gensym24_620764834 = parse_620760023(a_620764787, input_620764817);
            if ((tempHEX60gensym24_620764834.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620764834;
            if (ConstSet104[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620764819 = nimCopy(result_620764819, {kind: 1, fromInput: nimCopy(null, input_620764817, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620764834.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620764840 = nimCopy(null, tempHEX60gensym24_620764834, NTI620758888);
          var Temporary3 = result1_620764840;
          if (ConstSet105[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620764819 = nimCopy(result_620764819, succeed_620764820(input_620764817, fn_620764789(Temporary3.value), result1_620764840.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620764819;

      }

  var result_620764790 = null;

    Label1: do {
    } while (false);
    result_620764790 = {body: HEX3Aanonymous_620764816};

  return result_620764790;

}

function HEX3EHEX3E_620764680(a_620764683, b_620764684) {

function succeedImpl_620764696(inputInHEX60gensym136_620764697, valueInHEX60gensym136_620764698, tailInHEX60gensym136_620764699) {
  var result_620764701 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620764701 = nimCopy(result_620764701, {kind: 0, value: nimCopy(null, valueInHEX60gensym136_620764698, NTI654311428), tail: nimCopy(null, tailInHEX60gensym136_620764699, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym136_620764697, NTI33554439), expected: []}, NTI620758888);

  return result_620764701;

}

function failImpl_620764703(inputInHEX60gensym136_620764704, expectedInHEX60gensym136_620764705, tailInHEX60gensym136_620764706) {
  var result_620764708 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620764708 = nimCopy(result_620764708, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym136_620764705, NTI620762727), tail: nimCopy(null, tailInHEX60gensym136_620764706, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym136_620764704, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620764708;

}
      
function HEX3Aanonymous_620764711(input_620764712) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620764714 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764715 = succeedImpl_620764696;
          var fail_620764716 = failImpl_620764703;
          Label1: do {
            var tempHEX60gensym34_620764729 = parse_620759020(a_620764683, input_620764712);
            if ((tempHEX60gensym34_620764729.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620764729;
            if (ConstSet106[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620764714 = nimCopy(result_620764714, {kind: 1, fromInput: nimCopy(null, input_620764712, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620764729.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620764735 = nimCopy(null, tempHEX60gensym34_620764729, NTI620757839);
          Label3: do {
            var tempHEX60gensym36_620764748 = parse_620760023(b_620764684, result1_620764735.tail);
            if ((tempHEX60gensym36_620764748.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620764748;
            if (ConstSet107[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620764714 = nimCopy(result_620764714, {kind: 1, fromInput: nimCopy(null, input_620764712, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620764748.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620764754 = nimCopy(null, tempHEX60gensym36_620764748, NTI620758888);
          var Temporary5 = result2_620764754;
          if (ConstSet108[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620764714 = nimCopy(result_620764714, succeed_620764715(input_620764712, Temporary5.value, result2_620764754.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620764714;

      }

  var result_620764685 = null;

    Label1: do {
    } while (false);
    result_620764685 = {body: HEX3Aanonymous_620764711};

  return result_620764685;

}

function HEX3EHEX3E_620764584(a_620764587, b_620764588) {

function succeedImpl_620764600(inputInHEX60gensym135_620764601, valueInHEX60gensym135_620764602, tailInHEX60gensym135_620764603) {
  var result_620764605 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620764605 = nimCopy(result_620764605, {kind: 0, value: valueInHEX60gensym135_620764602, tail: nimCopy(null, tailInHEX60gensym135_620764603, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym135_620764601, NTI33554439), expected: []}, NTI1191182566);

  return result_620764605;

}

function failImpl_620764607(inputInHEX60gensym135_620764608, expectedInHEX60gensym135_620764609, tailInHEX60gensym135_620764610) {
  var result_620764612 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620764612 = nimCopy(result_620764612, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym135_620764609, NTI620762661), tail: nimCopy(null, tailInHEX60gensym135_620764610, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym135_620764608, NTI33554439), value: 0}, NTI1191182566);

  return result_620764612;

}
      
function HEX3Aanonymous_620764615(input_620764616) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620764618 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764619 = succeedImpl_620764600;
          var fail_620764620 = failImpl_620764607;
          Label1: do {
            var tempHEX60gensym34_620764633 = parse_620758790(a_620764587, input_620764616);
            if ((tempHEX60gensym34_620764633.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620764633;
            if (ConstSet109[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620764618 = nimCopy(result_620764618, {kind: 1, fromInput: nimCopy(null, input_620764616, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620764633.tail, NTI33554439), value: 0}, NTI1191182566);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620764639 = nimCopy(null, tempHEX60gensym34_620764633, NTI1191182468);
          Label3: do {
            var tempHEX60gensym36_620764652 = parse_1191183306(b_620764588, result1_620764639.tail);
            if ((tempHEX60gensym36_620764652.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620764652;
            if (ConstSet110[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620764618 = nimCopy(result_620764618, {kind: 1, fromInput: nimCopy(null, input_620764616, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620764652.tail, NTI33554439), value: 0}, NTI1191182566);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620764658 = nimCopy(null, tempHEX60gensym36_620764652, NTI1191182566);
          var Temporary5 = result2_620764658;
          if (ConstSet111[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620764618 = nimCopy(result_620764618, succeed_620764619(input_620764616, Temporary5.value, result2_620764658.tail), NTI1191182566);
          break BeforeRet;
        } while (false);

        return result_620764618;

      }

  var result_620764589 = null;

    Label1: do {
    } while (false);
    result_620764589 = {body: HEX3Aanonymous_620764615};

  return result_620764589;

}

function nucRepeatRune(c_973084886, count_973084887) {
  var result_973084888 = [];

    var s_973084889 = HEX24_973079119(c_973084886);
    result_973084888 = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_973084894 = 0;
      var colontmp__620768466 = 0;
      colontmp__620768466 = count_973084887;
      var i_620768467 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768467 < colontmp__620768466)) break Label3;
            i_973084894 = i_620768467;
            result_973084888.push.apply(result_973084888, s_973084889);;
            i_620768467 = addInt(i_620768467, 1);
          }
      } while (false);
    } while (false);

  return result_973084888;

}

function center_654312303(s_654312304, width_654312305, padding_654312306) {
    var Temporary1;

  var result_654312307 = [];

    var sLen_654312308 = nucruneLen(s_654312304);
    if ((width_654312305 <= sLen_654312308)) {
    Temporary1 = s_654312304;
    }
    else {
      var diff_654312309 = subInt(width_654312305, sLen_654312308);
      var left_654312310 = divInt(diff_654312309, 2);
      var right_654312311 = subInt(diff_654312309, left_654312310);
    Temporary1 = (nucRepeatRune(padding_654312306, chckRange(left_654312310, 0, 2147483647)) || []).concat(s_654312304 || [],nucRepeatRune(padding_654312306, chckRange(right_654312311, 0, 2147483647)) || []);
    }
    
    result_654312307 = nimCopy(null, Temporary1, NTI33554439);

  return result_654312307;

}

function HEX3Aanonymous_654312330(s_654312331, width_654312332) {
  var result_654312333 = [];

    result_654312333 = nimCopy(null, center_654312303(s_654312331, chckRange(width_654312332, 0, 2147483647), 32), NTI33554439);

  return result_654312333;

}

function alignLeft_973084908(s_973084909, count_973084910, padding_973084911) {
  var result_973084912 = [];

    var sLen_973084913 = nucruneLen(s_973084909);
    if ((sLen_973084913 < count_973084910)) {
    var padStr_973084914 = HEX24_973079119(padding_973084911);
    result_973084912 = nimCopy(null, mnewString(0), NTI33554439);
    result_973084912.push.apply(result_973084912, s_973084909);;
    Label1: do {
      var i_973084919 = 0;
      var colontmp__620768470 = 0;
      colontmp__620768470 = count_973084910;
      var i_620768471 = sLen_973084913;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768471 < colontmp__620768470)) break Label3;
            i_973084919 = i_620768471;
            result_973084912.push.apply(result_973084912, padStr_973084914);;
            i_620768471 = addInt(i_620768471, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_973084912 = nimCopy(null, s_973084909, NTI33554439);
    }
    

  return result_973084912;

}

function HEX3Aanonymous_654312334(s_654312335, width_654312336) {
  var result_654312337 = [];

    result_654312337 = nimCopy(null, alignLeft_973084908(s_654312335, chckRange(width_654312336, 0, 2147483647), 32), NTI33554439);

  return result_654312337;

}

function nucAlignString(s_973084896, count_973084897, padding_973084898) {
  var result_973084899 = [];

    var sLen_973084900 = nucruneLen(s_973084896);
    if ((sLen_973084900 < count_973084897)) {
    var padStr_973084901 = HEX24_973079119(padding_973084898);
    result_973084899 = nimCopy(null, mnewString(0), NTI33554439);
    var spaces_973084902 = subInt(count_973084897, sLen_973084900);
    Label1: do {
      var i_973084907 = 0;
      var i_620768474 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768474 < spaces_973084902)) break Label3;
            i_973084907 = i_620768474;
            result_973084899.push.apply(result_973084899, padStr_973084901);;
            i_620768474 = addInt(i_620768474, 1);
          }
      } while (false);
    } while (false);
    result_973084899.push.apply(result_973084899, s_973084896);;
    }
    else {
      result_973084899 = nimCopy(null, s_973084896, NTI33554439);
    }
    

  return result_973084899;

}

function HEX3Aanonymous_654312338(s_654312339, width_654312340) {
  var result_654312341 = [];

    result_654312341 = nimCopy(null, nucAlignString(s_654312339, chckRange(width_654312340, 0, 2147483647), 32), NTI33554439);

  return result_654312341;

}

function stack_654312352(rects_654312353, baseline_654312354, alignment_654312355) {
  var result_654312356 = ({rows: [], baseline: 0, width: 0, flag: 0});

    Label1: do {
      var iHEX60gensym44_654312378 = 0;
      var resultHEX60gensym44_654312385 = newSeq_654312071(chckRange((rects_654312353).length, 0, 2147483647));
      Label2: do {
        var it_654312389 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620768456 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_620768456 < (rects_654312353).length)) break Label4;
              it_654312389 = rects_654312353[chckIndx(i_620768456, 0, (rects_654312353).length - 1)];
              resultHEX60gensym44_654312385[chckIndx(iHEX60gensym44_654312378, 0, (resultHEX60gensym44_654312385).length - 1)] = it_654312389.width;
              iHEX60gensym44_654312378 = addInt(iHEX60gensym44_654312378, 1);
              i_620768456 = addInt(i_620768456, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var width_654312397 = max_654312097(resultHEX60gensym44_654312385);
    var alignFunc_654312398 = alignFuncs_654312342[chckIndx(alignment_654312355, 0, (alignFuncs_654312342).length - 1)];
    Label5: do {
      var rect_654312402 = ({rows: [], baseline: 0, width: 0, flag: 0});
      var i_620768463 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(i_620768463 < (rects_654312353).length)) break Label7;
            rect_654312402 = rects_654312353[chckIndx(i_620768463, 0, (rects_654312353).length - 1)];
            Label8: do {
              var row_654312406 = [];
              var i_620768460 = 0;
              var L_620768461 = (rect_654312402.rows).length;
              Label9: do {
                  Label10: while (true) {
                  if (!(i_620768460 < L_620768461)) break Label10;
                    row_654312406 = rect_654312402.rows[chckIndx(i_620768460, 0, (rect_654312402.rows).length - 1)];
                    result_654312356.rows.push(alignFunc_654312398(row_654312406, width_654312397));;
                    i_620768460 = addInt(i_620768460, 1);
                    if (!(((rect_654312402.rows).length == L_620768461))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            i_620768463 = addInt(i_620768463, 1);
          }
      } while (false);
    } while (false);
    result_654312356.baseline = baseline_654312354;
    result_654312356.width = width_654312397;

  return result_654312356;

}

function HEX3EHEX3E_620765318(a_620765321, b_620765322) {

function succeedImpl_620765334(inputInHEX60gensym147_620765335, valueInHEX60gensym147_620765336, tailInHEX60gensym147_620765337) {
  var result_620765339 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620765339 = nimCopy(result_620765339, {kind: 0, value: nimCopy(null, valueInHEX60gensym147_620765336, NTI654311428), tail: nimCopy(null, tailInHEX60gensym147_620765337, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym147_620765335, NTI33554439), expected: []}, NTI620758888);

  return result_620765339;

}

function failImpl_620765341(inputInHEX60gensym147_620765342, expectedInHEX60gensym147_620765343, tailInHEX60gensym147_620765344) {
  var result_620765346 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620765346 = nimCopy(result_620765346, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym147_620765343, NTI620763208), tail: nimCopy(null, tailInHEX60gensym147_620765344, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym147_620765342, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620765346;

}
      
function HEX3Aanonymous_620765349(input_620765350) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620765352 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620765353 = succeedImpl_620765334;
          var fail_620765354 = failImpl_620765341;
          Label1: do {
            var tempHEX60gensym34_620765367 = parse_620758790(a_620765321, input_620765350);
            if ((tempHEX60gensym34_620765367.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620765367;
            if (ConstSet112[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620765352 = nimCopy(result_620765352, {kind: 1, fromInput: nimCopy(null, input_620765350, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620765367.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620765373 = nimCopy(null, tempHEX60gensym34_620765367, NTI1191182468);
          Label3: do {
            var tempHEX60gensym36_620765386 = parse_620760023(b_620765322, result1_620765373.tail);
            if ((tempHEX60gensym36_620765386.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620765386;
            if (ConstSet113[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620765352 = nimCopy(result_620765352, {kind: 1, fromInput: nimCopy(null, input_620765350, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620765386.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620765392 = nimCopy(null, tempHEX60gensym36_620765386, NTI620758888);
          var Temporary5 = result2_620765392;
          if (ConstSet114[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620765352 = nimCopy(result_620765352, succeed_620765353(input_620765350, Temporary5.value, result2_620765392.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620765352;

      }

  var result_620765323 = null;

    Label1: do {
    } while (false);
    result_620765323 = {body: HEX3Aanonymous_620765349};

  return result_620765323;

}

function HEX7C_620764918(a_620764920, b_620764921) {

function succeedImpl_620764933(inputInHEX60gensym142_620764934, valueInHEX60gensym142_620764935, tailInHEX60gensym142_620764936) {
  var result_620764938 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620764938 = nimCopy(result_620764938, {kind: 0, value: nimCopy(null, valueInHEX60gensym142_620764935, NTI33554439), tail: nimCopy(null, tailInHEX60gensym142_620764936, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym142_620764934, NTI33554439), expected: []}, NTI1191182468);

  return result_620764938;

}

function failImpl_620764940(inputInHEX60gensym142_620764941, expectedInHEX60gensym142_620764942, tailInHEX60gensym142_620764943) {
  var result_620764945 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620764945 = nimCopy(result_620764945, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym142_620764942, NTI620762893), tail: nimCopy(null, tailInHEX60gensym142_620764943, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym142_620764941, NTI33554439), value: []}, NTI1191182468);

  return result_620764945;

}
      
function HEX3Aanonymous_620764948(input_620764949) {
          var Temporary1;
          var Temporary2;

        var result_620764951 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764952 = succeedImpl_620764933;
          var fail_620764953 = failImpl_620764940;
          var result1_620764966 = parse_620758790(a_620764920, input_620764949);
          if ((result1_620764966.kind == 0)) {
          result_620764951 = nimCopy(result_620764951, result1_620764966, NTI1191182468);
          break BeforeRet;
          }
          
          var result2_620764983 = parse_620758790(b_620764921, input_620764949);
          if ((result2_620764983.kind == 0)) {
          result_620764951 = nimCopy(result_620764951, result2_620764983, NTI1191182468);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620764966;
          if (ConstSet115[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1191182357)); }
          var Temporary2 = result2_620764983;
          if (ConstSet116[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
          result_620764951 = nimCopy(result_620764951, fail_620764953(input_620764949, HEX26_654311539(Temporary1.expected, Temporary2.expected), input_620764949), NTI1191182468);
        } while (false);

        return result_620764951;

      }

  var result_620764922 = null;

    Label1: do {
    } while (false);
    result_620764922 = {body: HEX3Aanonymous_620764948};

  return result_620764922;

}

function HEX26_620765144(a_620765149, b_620765153) {

function succeedImpl_620765168(inputInHEX60gensym146_620765169, valueInHEX60gensym146_620765170, tailInHEX60gensym146_620765171) {
  var result_620765173 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765173 = nimCopy(result_620765173, {kind: 0, value: nimCopy(null, valueInHEX60gensym146_620765170, NTI620763093), tail: nimCopy(null, tailInHEX60gensym146_620765171, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym146_620765169, NTI33554439), expected: []}, NTI620758903);

  return result_620765173;

}

function failImpl_620765175(inputInHEX60gensym146_620765176, expectedInHEX60gensym146_620765177, tailInHEX60gensym146_620765178) {
  var result_620765180 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765180 = nimCopy(result_620765180, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym146_620765177, NTI620763099), tail: nimCopy(null, tailInHEX60gensym146_620765178, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym146_620765176, NTI33554439), value: []}, NTI620758903);

  return result_620765180;

}
      
function HEX3Aanonymous_620765183(input_620765184) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_620765186 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620765187 = succeedImpl_620765168;
          var fail_620765188 = failImpl_620765175;
          Label1: do {
            var tempHEX60gensym26_620765201 = parse_620760265(a_620765149, input_620765184);
            if ((tempHEX60gensym26_620765201.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_620765201;
            if (ConstSet117[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620765186 = nimCopy(result_620765186, {kind: 1, fromInput: nimCopy(null, input_620765184, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym26_620765201.tail, NTI33554439), value: []}, NTI620758903);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620765207 = nimCopy(null, tempHEX60gensym26_620765201, NTI620758903);
          Label3: do {
            var tempHEX60gensym28_620765220 = parse_620760265(b_620765153, result1_620765207.tail);
            if ((tempHEX60gensym28_620765220.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_620765220;
            if (ConstSet118[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620765186 = nimCopy(result_620765186, {kind: 1, fromInput: nimCopy(null, input_620765184, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym28_620765220.tail, NTI33554439), value: []}, NTI620758903);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620765226 = nimCopy(null, tempHEX60gensym28_620765220, NTI620758903);
          var Temporary5 = result1_620765207;
          if (ConstSet119[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          var Temporary6 = result2_620765226;
          if (ConstSet120[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1191182357)); }
          result_620765186 = nimCopy(result_620765186, succeed_620765187(input_620765184, HEX26_620760909(Temporary5.value, Temporary6.value), result2_620765226.tail), NTI620758903);
          break BeforeRet;
        } while (false);

        return result_620765186;

      }

  var result_620765157 = null;

    Label1: do {
    } while (false);
    result_620765157 = {body: HEX3Aanonymous_620765183};

  return result_620765157;

}

function max_620765248(x_620765250, y_620765251) {
    var Temporary1;

  var result_620765252 = 0;

    if ((y_620765251 <= x_620765250)) {
    Temporary1 = x_620765250;
    }
    else {
    Temporary1 = y_620765251;
    }
    
    result_620765252 = Temporary1;

  return result_620765252;

}

function nsuRepeatStr(s_671089668, n_671089669) {
  var result_671089670 = [];

    result_671089670 = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_671089675 = 0;
      var colontmp__620768484 = 0;
      colontmp__620768484 = n_671089669;
      var res_620768485 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_620768485 <= colontmp__620768484)) break Label3;
            i_671089675 = res_620768485;
            result_671089670.push.apply(result_671089670, s_671089668);;
            res_620768485 = addInt(res_620768485, 1);
          }
      } while (false);
    } while (false);

  return result_671089670;

}

function withFlag_654312438(rect_654312439, flag_654312440) {
  var result_654312441 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_654312441 = nimCopy(result_654312441, rect_654312439, NTI654311428);
    result_654312441.flag = flag_654312440;

  return result_654312441;

}

function HEX5BHEX5DHEX3D_620758398(s_620758400, i_620758401, x_620758402) {
    s_620758400[chckIndx(subInt((s_620758400).length, i_620758401), 0, (s_620758400).length - 1)] = nimCopy(null, x_620758402, NTI33554439);

  
}

function rawGet_620757153(t_620757156, key_620757157, hc_620757158, hc_620757158_Idx) {
            var Temporary3;

  var result_620757159 = 0;

  BeforeRet: do {
    hc_620757158[hc_620757158_Idx] = hash_1107296678(key_620757157);
    if ((hc_620757158[hc_620757158_Idx] == 0)) {
    hc_620757158[hc_620757158_Idx] = 314159265;
    }
    
    if (((t_620757156.data).length == 0)) {
    result_620757159 = -1;
    break BeforeRet;
    }
    
    var h_620757210 = (hc_620757158[hc_620757158_Idx] & (t_620757156.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1090519071(t_620757156.data[chckIndx(h_620757210, 0, (t_620757156.data).length - 1)].Field0)) break Label2;
            if (!(t_620757156.data[chckIndx(h_620757210, 0, (t_620757156.data).length - 1)].Field0 == hc_620757158[hc_620757158_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_620757156.data[chckIndx(h_620757210, 0, (t_620757156.data).length - 1)].Field1, key_620757157);            }          if (Temporary3) {
          result_620757159 = h_620757210;
          break BeforeRet;
          }
          
          h_620757210 = nextTry_1090519074(h_620757210, (t_620757156.data).length - 1);
        }
    } while (false);
    result_620757159 = subInt(-1, h_620757210);
  } while (false);

  return result_620757159;

}

function HEX5BHEX5D_620758481(t_620758484, key_620758485) {
  var result_620758486 = {Field0: [], Field1: [], Field2: []};

    var hcHEX60gensym20_620758487 = [0];
    var indexHEX60gensym20_620758494 = rawGet_620757153(t_620758484, key_620758485, hcHEX60gensym20_620758487, 0);
    if ((0 <= indexHEX60gensym20_620758494)) {
    result_620758486 = nimCopy(result_620758486, t_620758484.data[chckIndx(indexHEX60gensym20_620758494, 0, (t_620758484.data).length - 1)].Field2, NTI620756998);
    }
    else {
    raiseKeyError_1207961319(key_620758485);
    }
    

  return result_620758486;

}

function bigDelimiter_620757000(delimiter_620757001, height_620757002, baseline_620757003) {
  var result_620757004 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620757004.rows = nimCopy(null, newSeq_452985301(height_620757002), NTI452985127);
    result_620757004.width = 1;
    result_620757004.baseline = baseline_620757003;
    switch (toJSStr(delimiter_620757001)) {
    case "{":
      if ((height_620757002 == 2)) {
      result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB0"), NTI33554439);
      result_620757004.rows[chckIndx(1, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB1"), NTI33554439);
      }
      else {
        result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xA7"), NTI33554439);
        Label1: do {
          var i_620758397 = 0;
          var colontmp__620768488 = 0;
          colontmp__620768488 = subInt(height_620757002, 1);
          var i_620768489 = 1;
          Label2: do {
              Label3: while (true) {
              if (!(i_620768489 < colontmp__620768488)) break Label3;
                i_620758397 = i_620768489;
                result_620757004.rows[chckIndx(i_620758397, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAA"), NTI33554439);
                i_620768489 = addInt(i_620768489, 1);
              }
          } while (false);
        } while (false);
        result_620757004.rows[chckIndx(divInt(height_620757002, 2), 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xA8"), NTI33554439);
        HEX5BHEX5DHEX3D_620758398(result_620757004.rows, 1, makeNimstrLit("\xE2\x8E\xA9"));
      }
      
      break;
    case "}":
      if ((height_620757002 == 2)) {
      result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB1"), NTI33554439);
      result_620757004.rows[chckIndx(1, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB0"), NTI33554439);
      }
      else {
        result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAB"), NTI33554439);
        Label4: do {
          var i_620758410 = 0;
          var colontmp__620768492 = 0;
          colontmp__620768492 = subInt(height_620757002, 1);
          var i_620768493 = 1;
          Label5: do {
              Label6: while (true) {
              if (!(i_620768493 < colontmp__620768492)) break Label6;
                i_620758410 = i_620768493;
                result_620757004.rows[chckIndx(i_620758410, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAA"), NTI33554439);
                i_620768493 = addInt(i_620768493, 1);
              }
          } while (false);
        } while (false);
        result_620757004.rows[chckIndx(divInt(height_620757002, 2), 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAC"), NTI33554439);
        HEX5BHEX5DHEX3D_620758398(result_620757004.rows, 1, makeNimstrLit("\xE2\x8E\xAD"));
      }
      
      break;
    case "⟨":
      result_620757004.width = chckRange(divInt(addInt(height_620757002, 1), 2), 0, 2147483647);
      var widthDec_620758416 = subInt(result_620757004.width, 1);
      if ((modInt(height_620757002, 2) == 1)) {
      result_620757004.rows[chckIndx(divInt(height_620757002, 2), 0, (result_620757004.rows).length - 1)] = nimCopy(null, (makeNimstrLit("\xE2\x9F\xA8") || []).concat(nsuRepeatStr(makeNimstrLit(" "), chckRange(divInt(height_620757002, 2), 0, 2147483647)) || []), NTI33554439);
      }
      
      Label7: do {
        var i_620758421 = 0;
        var colontmp__620768496 = 0;
        colontmp__620768496 = divInt(height_620757002, 2);
        var i_620768497 = 0;
        Label8: do {
            Label9: while (true) {
            if (!(i_620768497 < colontmp__620768496)) break Label9;
              i_620758421 = i_620768497;
              result_620757004.rows[chckIndx(i_620758421, 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_620758416, i_620758421), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB1") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(i_620758421, 0, 2147483647)) || []), NTI33554439);
              result_620757004.rows[chckIndx(subInt(subInt(height_620757002, 1), i_620758421), 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_620758416, i_620758421), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB2") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(i_620758421, 0, 2147483647)) || []), NTI33554439);
              i_620768497 = addInt(i_620768497, 1);
            }
        } while (false);
      } while (false);
      break;
    case "⟩":
      result_620757004.width = chckRange(divInt(addInt(height_620757002, 1), 2), 0, 2147483647);
      var widthDec_620758422 = subInt(result_620757004.width, 1);
      if ((modInt(height_620757002, 2) == 1)) {
      result_620757004.rows[chckIndx(divInt(height_620757002, 2), 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(divInt(height_620757002, 2), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x9F\xA9") || []), NTI33554439);
      }
      
      Label10: do {
        var i_620758427 = 0;
        var colontmp__620768500 = 0;
        colontmp__620768500 = divInt(height_620757002, 2);
        var i_620768501 = 0;
        Label11: do {
            Label12: while (true) {
            if (!(i_620768501 < colontmp__620768500)) break Label12;
              i_620758427 = i_620768501;
              result_620757004.rows[chckIndx(i_620758427, 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(i_620758427, 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB2") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_620758422, i_620758427), 0, 2147483647)) || []), NTI33554439);
              result_620757004.rows[chckIndx(subInt(subInt(height_620757002, 1), i_620758427), 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(i_620758427, 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB1") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_620758422, i_620758427), 0, 2147483647)) || []), NTI33554439);
              i_620768501 = addInt(i_620768501, 1);
            }
        } while (false);
      } while (false);
      break;
    default: 
      var colontmp__620768507 = HEX5BHEX5D_620758481(delimiterParts_620758385, delimiter_620757001);
      var top_620758551 = nimCopy(null, colontmp__620768507["Field0"], NTI33554439);
      var mid_620758552 = nimCopy(null, colontmp__620768507["Field1"], NTI33554439);
      var bottom_620758553 = nimCopy(null, colontmp__620768507["Field2"], NTI33554439);
      result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, top_620758551, NTI33554439);
      Label13: do {
        var i_620758558 = 0;
        var colontmp__620768504 = 0;
        colontmp__620768504 = subInt(height_620757002, 1);
        var i_620768505 = 1;
        Label14: do {
            Label15: while (true) {
            if (!(i_620768505 < colontmp__620768504)) break Label15;
              i_620758558 = i_620768505;
              result_620757004.rows[chckIndx(i_620758558, 0, (result_620757004.rows).length - 1)] = nimCopy(null, mid_620758552, NTI33554439);
              i_620768505 = addInt(i_620768505, 1);
            }
        } while (false);
      } while (false);
      HEX5BHEX5DHEX3D_620758398(result_620757004.rows, 1, bottom_620758553);
      break;
    }

  return result_620757004;

}

function substrEq_671088869(s_671088870, pos_671088871, substr_671088872) {
  var result_671088873 = false;

  BeforeRet: do {
    var i_671088874 = 0;
    var length_671088875 = (substr_671088872).length;
    Label1: do {
        Label2: while (true) {
        if (!(((i_671088874 < length_671088875) && (addInt(pos_671088871, i_671088874) < (s_671088870).length)) && (s_671088870[chckIndx(addInt(pos_671088871, i_671088874), 0, (s_671088870).length - 1)] == substr_671088872[chckIndx(i_671088874, 0, (substr_671088872).length - 1)]))) break Label2;
          i_671088874 = addInt(i_671088874, 1);
        }
    } while (false);
    result_671088873 = (i_671088874 == length_671088875);
    break BeforeRet;
  } while (false);

  return result_671088873;

}

function nsuSplitString(s_671089161, sep_671089162, maxsplit_671089163) {
  var result_671089164 = [];

    if (!((0 < (sep_671089162).length))) {
    failedAssertImpl_218103864(makeNimstrLit("strutils.nim(739, 11) `sep.len > 0` "));
    }
    
    result_671089164 = nimCopy(null, [], NTI671089014);
    Label1: do {
      var xHEX60gensym72_671089175 = [];
      var lastHEX60gensym41_637534310 = 0;
      var splitsHEX60gensym41_637534311 = maxsplit_671089163;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym41_637534310 <= (s_671089161).length)) break Label3;
            var firstHEX60gensym41_637534313 = lastHEX60gensym41_637534310;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym41_637534310 < (s_671089161).length) && !(substrEq_671088869(s_671089161, lastHEX60gensym41_637534310, sep_671089162)))) break Label5;
                  lastHEX60gensym41_637534310 = addInt(lastHEX60gensym41_637534310, 1);
                }
            } while (false);
            if ((splitsHEX60gensym41_637534311 == 0)) {
            lastHEX60gensym41_637534310 = (s_671089161).length;
            }
            
            xHEX60gensym72_671089175 = substr_33557922(s_671089161, firstHEX60gensym41_637534313, subInt(lastHEX60gensym41_637534310, 1));
            var Temporary6 = nimCopy(null, xHEX60gensym72_671089175, NTI33554439);
            result_671089164.push(Temporary6);;
            if ((splitsHEX60gensym41_637534311 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym41_637534311 = subInt(splitsHEX60gensym41_637534311, 1);
            lastHEX60gensym41_637534310 = addInt(lastHEX60gensym41_637534310, (sep_671089162).length);
          }
      } while (false);
    } while (false);

  return result_671089164;

}

function toTextRect_654311477(s_654311478, baseline_654311479, flag_654311480) {
  var result_654311481 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    if (eqStrings(s_654311478, [])) {
    result_654311481.flag = flag_654311480;
    break BeforeRet;
    }
    
    result_654311481.rows = nimCopy(null, nsuSplitString(s_654311478, makeNimstrLit("\x0A"), -1), NTI671089002);
    result_654311481.width = chckRange(nucruneLen(result_654311481.rows[chckIndx(0, 0, (result_654311481.rows).length - 1)]), 0, 2147483647);
    Label1: do {
      var row_654311502 = [];
      var i_637534304 = 0;
      var L_637534305 = (result_654311481.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_637534304 < L_637534305)) break Label3;
            row_654311502 = result_654311481.rows[chckIndx(i_637534304, 0, (result_654311481.rows).length - 1)];
            if (!((nucruneLen(row_654311502) == result_654311481.width))) {
            raiseException({message: makeNimstrLit("All rows of a TextRect must be the same width"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            i_637534304 = addInt(i_637534304, 1);
            if (!(((result_654311481.rows).length == L_637534305))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_654311481.baseline = baseline_654311479;
    result_654311481.flag = flag_654311480;
  } while (false);

  return result_654311481;

}

function HEX3EHEX3E_620766345(a_620766348, b_620766349) {

function succeedImpl_620766361(inputInHEX60gensym178_620766362, valueInHEX60gensym178_620766363, tailInHEX60gensym178_620766364) {
  var result_620766366 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620766366 = nimCopy(result_620766366, {kind: 0, value: nimCopy(null, valueInHEX60gensym178_620766363, NTI620763069), tail: nimCopy(null, tailInHEX60gensym178_620766364, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym178_620766362, NTI33554439), expected: []}, NTI620758903);

  return result_620766366;

}

function failImpl_620766368(inputInHEX60gensym178_620766369, expectedInHEX60gensym178_620766370, tailInHEX60gensym178_620766371) {
  var result_620766373 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620766373 = nimCopy(result_620766373, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym178_620766370, NTI620764086), tail: nimCopy(null, tailInHEX60gensym178_620766371, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym178_620766369, NTI33554439), value: []}, NTI620758903);

  return result_620766373;

}
      
function HEX3Aanonymous_620766376(input_620766377) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620766379 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620766380 = succeedImpl_620766361;
          var fail_620766381 = failImpl_620766368;
          Label1: do {
            var tempHEX60gensym34_620766394 = parse_620759020(a_620766348, input_620766377);
            if ((tempHEX60gensym34_620766394.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620766394;
            if (ConstSet121[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620766379 = nimCopy(result_620766379, {kind: 1, fromInput: nimCopy(null, input_620766377, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620766394.tail, NTI33554439), value: []}, NTI620758903);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620766400 = nimCopy(null, tempHEX60gensym34_620766394, NTI620757839);
          Label3: do {
            var tempHEX60gensym36_620766413 = parse_620760265(b_620766349, result1_620766400.tail);
            if ((tempHEX60gensym36_620766413.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620766413;
            if (ConstSet122[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620766379 = nimCopy(result_620766379, {kind: 1, fromInput: nimCopy(null, input_620766377, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620766413.tail, NTI33554439), value: []}, NTI620758903);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620766419 = nimCopy(null, tempHEX60gensym36_620766413, NTI620758903);
          var Temporary5 = result2_620766419;
          if (ConstSet123[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620766379 = nimCopy(result_620766379, succeed_620766380(input_620766377, Temporary5.value, result2_620766419.tail), NTI620758903);
          break BeforeRet;
        } while (false);

        return result_620766379;

      }

  var result_620766350 = null;

    Label1: do {
    } while (false);
    result_620766350 = {body: HEX3Aanonymous_620766376};

  return result_620766350;

}

function HEX3CHEX3C_620766553(a_620766556, b_620766557) {

function succeedImpl_620766569(inputInHEX60gensym182_620766570, valueInHEX60gensym182_620766571, tailInHEX60gensym182_620766572) {
  var result_620766574 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766574 = nimCopy(result_620766574, {kind: 0, value: nimCopy(null, valueInHEX60gensym182_620766571, NTI654311428), tail: nimCopy(null, tailInHEX60gensym182_620766572, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym182_620766570, NTI33554439), expected: []}, NTI620758888);

  return result_620766574;

}

function failImpl_620766576(inputInHEX60gensym182_620766577, expectedInHEX60gensym182_620766578, tailInHEX60gensym182_620766579) {
  var result_620766581 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766581 = nimCopy(result_620766581, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym182_620766578, NTI620764233), tail: nimCopy(null, tailInHEX60gensym182_620766579, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym182_620766577, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620766581;

}
      
function HEX3Aanonymous_620766584(input_620766585) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620766587 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620766588 = succeedImpl_620766569;
          var fail_620766589 = failImpl_620766576;
          Label1: do {
            var tempHEX60gensym30_620766602 = parse_620760023(a_620766556, input_620766585);
            if ((tempHEX60gensym30_620766602.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620766602;
            if (ConstSet124[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620766587 = nimCopy(result_620766587, {kind: 1, fromInput: nimCopy(null, input_620766585, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym30_620766602.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620766608 = nimCopy(null, tempHEX60gensym30_620766602, NTI620758888);
          Label3: do {
            var tempHEX60gensym32_620766621 = parse_1191183306(b_620766557, result1_620766608.tail);
            if ((tempHEX60gensym32_620766621.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620766621;
            if (ConstSet125[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620766587 = nimCopy(result_620766587, {kind: 1, fromInput: nimCopy(null, input_620766585, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym32_620766621.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620766627 = nimCopy(null, tempHEX60gensym32_620766621, NTI1191182566);
          var Temporary5 = result1_620766608;
          if (ConstSet126[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620766587 = nimCopy(result_620766587, succeed_620766588(input_620766585, Temporary5.value, result2_620766627.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620766587;

      }

  var result_620766558 = null;

    Label1: do {
    } while (false);
    result_620766558 = {body: HEX3Aanonymous_620766584};

  return result_620766558;

}

function HEX3EHEX3E_620766470(a_620766473, b_620766474) {

function succeedImpl_620766486(inputInHEX60gensym181_620766487, valueInHEX60gensym181_620766488, tailInHEX60gensym181_620766489) {
  var result_620766491 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766491 = nimCopy(result_620766491, {kind: 0, value: nimCopy(null, valueInHEX60gensym181_620766488, NTI654311428), tail: nimCopy(null, tailInHEX60gensym181_620766489, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym181_620766487, NTI33554439), expected: []}, NTI620758888);

  return result_620766491;

}

function failImpl_620766493(inputInHEX60gensym181_620766494, expectedInHEX60gensym181_620766495, tailInHEX60gensym181_620766496) {
  var result_620766498 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766498 = nimCopy(result_620766498, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym181_620766495, NTI620764172), tail: nimCopy(null, tailInHEX60gensym181_620766496, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym181_620766494, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620766498;

}
      
function HEX3Aanonymous_620766501(input_620766502) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620766504 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620766505 = succeedImpl_620766486;
          var fail_620766506 = failImpl_620766493;
          Label1: do {
            var tempHEX60gensym34_620766519 = parse_1191183306(a_620766473, input_620766502);
            if ((tempHEX60gensym34_620766519.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620766519;
            if (ConstSet127[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620766504 = nimCopy(result_620766504, {kind: 1, fromInput: nimCopy(null, input_620766502, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym34_620766519.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620766525 = nimCopy(null, tempHEX60gensym34_620766519, NTI1191182566);
          Label3: do {
            var tempHEX60gensym36_620766538 = parse_620760023(b_620766474, result1_620766525.tail);
            if ((tempHEX60gensym36_620766538.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620766538;
            if (ConstSet128[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620766504 = nimCopy(result_620766504, {kind: 1, fromInput: nimCopy(null, input_620766502, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym36_620766538.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620766544 = nimCopy(null, tempHEX60gensym36_620766538, NTI620758888);
          var Temporary5 = result2_620766544;
          if (ConstSet129[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620766504 = nimCopy(result_620766504, succeed_620766505(input_620766502, Temporary5.value, result2_620766544.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620766504;

      }

  var result_620766475 = null;

    Label1: do {
    } while (false);
    result_620766475 = {body: HEX3Aanonymous_620766501};

  return result_620766475;

}

function HEX3CHEX3C_620766757(a_620766760, b_620766761) {

function succeedImpl_620766773(inputInHEX60gensym183_620766774, valueInHEX60gensym183_620766775, tailInHEX60gensym183_620766776) {
  var result_620766778 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766778 = nimCopy(result_620766778, {kind: 0, value: nimCopy(null, valueInHEX60gensym183_620766775, NTI654311428), tail: nimCopy(null, tailInHEX60gensym183_620766776, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym183_620766774, NTI33554439), expected: []}, NTI620758888);

  return result_620766778;

}

function failImpl_620766780(inputInHEX60gensym183_620766781, expectedInHEX60gensym183_620766782, tailInHEX60gensym183_620766783) {
  var result_620766785 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766785 = nimCopy(result_620766785, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym183_620766782, NTI620764354), tail: nimCopy(null, tailInHEX60gensym183_620766783, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym183_620766781, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620766785;

}
      
function HEX3Aanonymous_620766788(input_620766789) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620766791 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620766792 = succeedImpl_620766773;
          var fail_620766793 = failImpl_620766780;
          Label1: do {
            var tempHEX60gensym30_620766806 = parse_620760023(a_620766760, input_620766789);
            if ((tempHEX60gensym30_620766806.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620766806;
            if (ConstSet130[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620766791 = nimCopy(result_620766791, {kind: 1, fromInput: nimCopy(null, input_620766789, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym30_620766806.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620766812 = nimCopy(null, tempHEX60gensym30_620766806, NTI620758888);
          Label3: do {
            var tempHEX60gensym32_620766825 = parse_620759020(b_620766761, result1_620766812.tail);
            if ((tempHEX60gensym32_620766825.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620766825;
            if (ConstSet131[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620766791 = nimCopy(result_620766791, {kind: 1, fromInput: nimCopy(null, input_620766789, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym32_620766825.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620766831 = nimCopy(null, tempHEX60gensym32_620766825, NTI620757839);
          var Temporary5 = result1_620766812;
          if (ConstSet132[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620766791 = nimCopy(result_620766791, succeed_620766792(input_620766789, Temporary5.value, result2_620766831.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620766791;

      }

  var result_620766762 = null;

    Label1: do {
    } while (false);
    result_620766762 = {body: HEX3Aanonymous_620766788};

  return result_620766762;

}

function map_620767240(a_620767243, fn_620767245) {

function succeedImpl_620767257(inputInHEX60gensym195_620767258, valueInHEX60gensym195_620767259, tailInHEX60gensym195_620767260) {
  var result_620767262 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620767262 = nimCopy(result_620767262, {kind: 0, value: nimCopy(null, valueInHEX60gensym195_620767259, NTI654311428), tail: nimCopy(null, tailInHEX60gensym195_620767260, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym195_620767258, NTI33554439), expected: []}, NTI620758888);

  return result_620767262;

}

function failImpl_620767264(inputInHEX60gensym195_620767265, expectedInHEX60gensym195_620767266, tailInHEX60gensym195_620767267) {
  var result_620767269 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620767269 = nimCopy(result_620767269, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym195_620767266, NTI620764760), tail: nimCopy(null, tailInHEX60gensym195_620767267, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym195_620767265, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620767269;

}
      
function HEX3Aanonymous_620767272(input_620767273) {
            var Temporary2;
          var Temporary3;

        var result_620767275 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620767276 = succeedImpl_620767257;
          var fail_620767277 = failImpl_620767264;
          Label1: do {
            var tempHEX60gensym24_620767290 = parse_620763134(a_620767243, input_620767273);
            if ((tempHEX60gensym24_620767290.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620767290;
            if (ConstSet133[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620767275 = nimCopy(result_620767275, {kind: 1, fromInput: nimCopy(null, input_620767273, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym24_620767290.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620767296 = nimCopy(null, tempHEX60gensym24_620767290, NTI620761192);
          var Temporary3 = result1_620767296;
          if (ConstSet134[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1191182357)); }
          result_620767275 = nimCopy(result_620767275, succeed_620767276(input_620767273, fn_620767245(Temporary3.value), result1_620767296.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620767275;

      }

  var result_620767246 = null;

    Label1: do {
    } while (false);
    result_620767246 = {body: HEX3Aanonymous_620767272};

  return result_620767246;

}

function nop_620767360() {

function succeedImpl_620767373(inputInHEX60gensym197_620767374, valueInHEX60gensym197_620767375, tailInHEX60gensym197_620767376) {
  var result_620767378 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620767378 = nimCopy(result_620767378, {kind: 0, value: nimCopy(null, valueInHEX60gensym197_620767375, NTI654311428), tail: nimCopy(null, tailInHEX60gensym197_620767376, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym197_620767374, NTI33554439), expected: []}, NTI620758888);

  return result_620767378;

}

function failImpl_620767380(inputInHEX60gensym197_620767381, expectedInHEX60gensym197_620767382, tailInHEX60gensym197_620767383) {
  var result_620767385 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620767385 = nimCopy(result_620767385, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym197_620767382, NTI620764838), tail: nimCopy(null, tailInHEX60gensym197_620767383, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym197_620767381, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620767385;

}
      
function HEX3Aanonymous_620767388(input_620767389) {
        var result_620767391 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

          var succeed_620767392 = succeedImpl_620767373;
          var fail_620767393 = failImpl_620767380;
          result_620767391 = nimCopy(result_620767391, succeed_620767392(input_620767389, ({rows: [], baseline: 0, width: 0, flag: 0}), input_620767389), NTI620758888);

        return result_620767391;

      }

  var result_620767362 = null;

    Label1: do {
    } while (false);
    result_620767362 = {body: HEX3Aanonymous_620767388};

  return result_620767362;

}

function HEX26_654312290(left_654312291, right_654312292) {
  var result_654312293 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_654312293 = nimCopy(result_654312293, join_654311640([nimCopy(null, left_654312291, NTI654311428), nimCopy(null, right_654312292, NTI654311428)]), NTI654311428);

  return result_654312293;

}

function HEX3CHEX3C_620767939(a_620767942, b_620767943) {

function succeedImpl_620767955(inputInHEX60gensym213_620767956, valueInHEX60gensym213_620767957, tailInHEX60gensym213_620767958) {
  var result_620767960 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620767960 = nimCopy(result_620767960, {kind: 0, value: nimCopy(null, valueInHEX60gensym213_620767957, NTI654311428), tail: nimCopy(null, tailInHEX60gensym213_620767958, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym213_620767956, NTI33554439), expected: []}, NTI620758888);

  return result_620767960;

}

function failImpl_620767962(inputInHEX60gensym213_620767963, expectedInHEX60gensym213_620767964, tailInHEX60gensym213_620767965) {
  var result_620767967 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620767967 = nimCopy(result_620767967, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym213_620767964, NTI620765367), tail: nimCopy(null, tailInHEX60gensym213_620767965, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym213_620767963, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);

  return result_620767967;

}
      
function HEX3Aanonymous_620767970(input_620767971) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620767973 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620767974 = succeedImpl_620767955;
          var fail_620767975 = failImpl_620767962;
          Label1: do {
            var tempHEX60gensym30_620767988 = parse_620760023(a_620767942, input_620767971);
            if ((tempHEX60gensym30_620767988.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620767988;
            if (ConstSet137[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
            result_620767973 = nimCopy(result_620767973, {kind: 1, fromInput: nimCopy(null, input_620767971, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym30_620767988.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620767994 = nimCopy(null, tempHEX60gensym30_620767988, NTI620758888);
          Label3: do {
            var tempHEX60gensym32_620768007 = parse_620758790(b_620767943, result1_620767994.tail);
            if ((tempHEX60gensym32_620768007.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620768007;
            if (ConstSet138[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1191182357)); }
            result_620767973 = nimCopy(result_620767973, {kind: 1, fromInput: nimCopy(null, input_620767971, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1191182371), tail: nimCopy(null, tempHEX60gensym32_620768007.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620758888);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620768013 = nimCopy(null, tempHEX60gensym32_620768007, NTI1191182468);
          var Temporary5 = result1_620767994;
          if (ConstSet139[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1191182357)); }
          result_620767973 = nimCopy(result_620767973, succeed_620767974(input_620767971, Temporary5.value, result2_620768013.tail), NTI620758888);
          break BeforeRet;
        } while (false);

        return result_620767973;

      }

  var result_620767944 = null;

    Label1: do {
    } while (false);
    result_620767944 = {body: HEX3Aanonymous_620767970};

  return result_620767944;

}

function HEX3Aanonymous_620759426(x_620759446) {
  var result_620759449 = [];

    result_620759449 = nimCopy(null, [nimCopy(null, x_620759446, NTI620757882)], NTI620758399);

  return result_620759449;

}

function HEX3Aanonymous_620758930(x_620758950) {
  var result_620758953 = [];

    result_620758953 = nimCopy(null, [nimCopy(null, x_620758950, NTI33554439)], NTI654311478);

  return result_620758953;

}

function HEX3Aanonymous_620759625(x_620759686) {
  var result_620759689 = [];

    var resultHEX60gensym42_620759698 = newSeq_452985301(0);
    Label1: do {
      var xHEX60gensym42_620759702 = [];
      var i_620768192 = 0;
      var L_620768193 = (x_620759686).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768192 < L_620768193)) break Label3;
            xHEX60gensym42_620759702 = x_620759686[chckIndx(i_620768192, 0, (x_620759686).length - 1)];
            var a_620759703 = nimCopy(null, resultHEX60gensym42_620759698, NTI452985127);
            var b_620759704 = nimCopy(null, xHEX60gensym42_620759702, NTI620757833);
            resultHEX60gensym42_620759698 = nimCopy(null, HEX26_654311539(a_620759703, b_620759704), NTI654311493);
            i_620768192 = addInt(i_620768192, 1);
            if (!(((x_620759686).length == L_620768193))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_620759689 = nimCopy(null, resultHEX60gensym42_620759698, NTI452985127);

  return result_620759689;

}

function HEX3Aanonymous_620760671(x_620760691) {
  var result_620760694 = [];

    result_620760694 = nimCopy(null, [nimCopy(null, x_620760691, NTI620758946)], NTI620759482);

  return result_620760694;

}

function HEX3Aanonymous_620760175(x_620760195) {
  var result_620760198 = [];

    result_620760198 = nimCopy(null, [nimCopy(null, x_620760195, NTI654311428)], NTI620759053);

  return result_620760198;

}

function HEX3Aanonymous_620760870(x_620760961) {
  var result_620760964 = [];

    var resultHEX60gensym68_620760973 = newSeq_654311768(0);
    Label1: do {
      var xHEX60gensym68_620760977 = [];
      var i_620768231 = 0;
      var L_620768232 = (x_620760961).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768231 < L_620768232)) break Label3;
            xHEX60gensym68_620760977 = x_620760961[chckIndx(i_620768231, 0, (x_620760961).length - 1)];
            var a_620760978 = nimCopy(null, resultHEX60gensym68_620760973, NTI654311636);
            var b_620760979 = nimCopy(null, xHEX60gensym68_620760977, NTI620758897);
            resultHEX60gensym68_620760973 = nimCopy(null, HEX26_620760909(a_620760978, b_620760979), NTI620759887);
            i_620768231 = addInt(i_620768231, 1);
            if (!(((x_620760961).length == L_620768232))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_620760964 = nimCopy(null, resultHEX60gensym68_620760973, NTI654311636);

  return result_620760964;

}

function HEX3Aanonymous_620761050(atoms_620761066) {
  var result_620761069 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620761069 = nimCopy(result_620761069, join_654311640(atoms_620761066), NTI654311428);

  return result_620761069;

}

function HEX3Aanonymous_620761201(ch_620761217) {
  var result_620761220 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620761220 = nimCopy(result_620761220, toTextRectOneLine_654311513(nimCharToStr(ch_620761217), 0, 1), NTI654311428);

  return result_620761220;

}

function HEX3Aanonymous_620761288(letter_620761304) {
  var result_620761307 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620761307 = nimCopy(result_620761307, toTextRectOneLine_654311513(inFont_637534392(letter_620761304, 0), 0, 1), NTI654311428);

  return result_620761307;

}

function HEX3Aanonymous_620761331(pair_620761334) {
    
function HEX3Aanonymous_620761945(x_620761965) {
      var result_620761968 = [];

        result_620761968 = nimCopy(null, [nimCopy(null, x_620761965, NTI620757882)], NTI620758399);

      return result_620761968;

    }
    
function HEX3Aanonymous_620761842(x_620761862) {
      var result_620761865 = [];

        result_620761865 = nimCopy(null, [nimCopy(null, x_620761862, NTI33554439)], NTI654311478);

      return result_620761865;

    }
    
function HEX3Aanonymous_620762027(x_620762062) {
      var result_620762065 = [];

        var resultHEX60gensym87_620762074 = newSeq_452985301(0);
        Label1: do {
          var xHEX60gensym87_620762078 = [];
          var i_620768368 = 0;
          var L_620768369 = (x_620762062).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_620768368 < L_620768369)) break Label3;
                xHEX60gensym87_620762078 = x_620762062[chckIndx(i_620768368, 0, (x_620762062).length - 1)];
                var a_620762079 = nimCopy(null, resultHEX60gensym87_620762074, NTI452985127);
                var b_620762080 = nimCopy(null, xHEX60gensym87_620762078, NTI620757833);
                resultHEX60gensym87_620762074 = nimCopy(null, HEX26_654311539(a_620762079, b_620762080), NTI654311493);
                i_620768368 = addInt(i_620768368, 1);
                if (!(((x_620762062).length == L_620768369))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_620762065 = nimCopy(null, resultHEX60gensym87_620762074, NTI452985127);

      return result_620762065;

    }
    
function HEX3Aanonymous_620762130(letter_620762145) {
      var result_620762148 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_620762148 = nimCopy(result_620762148, toTextRectOneLine_654311513(inFont_637534392(letter_620762145, font_620761339), 0, 1), NTI654311428);

      return result_620762148;

    }

  var result_620761337 = null;

    var colontmp__620768348 = nimCopy(null, pair_620761334, NTI637534724);
    var name_620761338 = nimCopy(null, colontmp__620768348["Field0"], NTI33554439);
    var font_620761339 = colontmp__620768348["Field1"];
    result_620761337 = map_620761222(HEX7C_1191183450(HEX3CHEX3C_620761693(HEX3CHEX3C_620761610(HEX3EHEX3E_620761431(HEX3EHEX3E_620761514(HEX3EHEX3E_620761431(HEX3EHEX3E_620761348(s_1191182447(name_620761338), ws_620759767), c_1191182569(123)), ws_620759767), alpha_620761187), ws_620759767), c_1191182569(125)), HEX3EHEX3E_620761431(HEX3EHEX3E_620761348(s_1191182447(name_620761338), map_620759710(HEX26_620759483(map_620759246(HEX2A_620758608(whitespace_1191183431, HEX2EHEX2E_973079379(1, 2147483647).a), HEX3Aanonymous_620761945), HEX2A_620759078(HEX7C_620758976(map_620758744(whitespace_1191183431, HEX3Aanonymous_620761842), nop_620758616()), subInt(HEX2EHEX2E_973079379(1, 2147483647).b, HEX2EHEX2E_973079379(1, 2147483647).a))), HEX3Aanonymous_620762027)), alpha_620761187)), HEX3Aanonymous_620762130);

  return result_620761337;

}

function HEX3Aanonymous_620762317(entry_620762320) {
    var Temporary1;
    
function HEX3Aanonymous_620762484(x_620762500) {
      var result_620762503 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_620762503 = nimCopy(result_620762503, val_620762325, NTI654311428);

      return result_620762503;

    }
      
function HEX3Aanonymous_620762572(x_620762588) {
        var result_620762591 = ({rows: [], baseline: 0, width: 0, flag: 0});

          result_620762591 = nimCopy(result_620762591, val_620762325, NTI654311428);

        return result_620762591;

      }

  var result_620762323 = null;

    var colontmp__620768375 = nimCopy(null, entry_620762320, NTI637534217);
    var key_620762324 = nimCopy(null, colontmp__620768375["Field0"], NTI33554439);
    var val_620762325 = nimCopy(null, colontmp__620768375["Field1"], NTI654311428);
    if ((key_620762324[chckIndx(0, 0, (key_620762324).length - 1)] == 92)) {
    Temporary1 = map_620762505(HEX3CHEX3C_620762399(s_1191182447(key_620762324), HEX21_620762342(letter_1191183524)), HEX3Aanonymous_620762484);
    }
    else {
    Temporary1 = map_620762505(s_1191182447(key_620762324), HEX3Aanonymous_620762572);
    }
    
    result_620762323 = Temporary1;

  return result_620762323;

}

function HEX3Aanonymous_620763540(x_620763560) {
  var result_620763563 = [];

    result_620763563 = nimCopy(null, [nimCopy(null, x_620763560, NTI620761224)], NTI620761747);

  return result_620763563;

}

function HEX3Aanonymous_620763044(x_620763064) {
  var result_620763067 = [];

    result_620763067 = nimCopy(null, [x_620763064], NTI620761337);

  return result_620763067;

}

function HEX3Aanonymous_620763739(x_620763836) {
  var result_620763839 = [];

    var resultHEX60gensym124_620763848 = newSeq_620763748(0);
    Label1: do {
      var xHEX60gensym124_620763852 = [];
      var i_620768422 = 0;
      var L_620768423 = (x_620763836).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768422 < L_620768423)) break Label3;
            xHEX60gensym124_620763852 = x_620763836[chckIndx(i_620768422, 0, (x_620763836).length - 1)];
            var a_620763853 = nimCopy(null, resultHEX60gensym124_620763848, NTI620762132);
            var b_620763854 = nimCopy(null, xHEX60gensym124_620763852, NTI620761186);
            resultHEX60gensym124_620763848 = nimCopy(null, HEX26_620763783(a_620763853, b_620763854), NTI620762155);
            i_620768422 = addInt(i_620768422, 1);
            if (!(((x_620763836).length == L_620768423))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_620763839 = nimCopy(null, resultHEX60gensym124_620763848, NTI620762132);

  return result_620763839;

}

function HEX3Aanonymous_620764008(chars_620764044) {
  var result_620764047 = [];

    result_620764047 = nimCopy(null, join_620764015(chars_620764044, []), NTI33554439);

  return result_620764047;

}

function HEX3Aanonymous_620764118(name_620764121) {
  var result_620764124 = false;

    result_620764124 = contains_620764167(commands_637535932, name_620764121);

  return result_620764124;

}

function HEX3Aanonymous_620764250(name_620764389) {
  var result_620764392 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620764392 = nimCopy(result_620764392, HEX5BHEX5D_620764310(commands_637535932, name_620764389), NTI654311428);

  return result_620764392;

}

function HEX3Aanonymous_620764459(entry_620764462) {
    
function HEX3Aanonymous_620764478(x_620764494) {
      var result_620764497 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_620764497 = nimCopy(result_620764497, val_620764467, NTI654311428);

      return result_620764497;

    }

  var result_620764465 = null;

    var colontmp__620768440 = nimCopy(null, entry_620764462, NTI637534222);
    var key_620764466 = nimCopy(null, colontmp__620768440["Field0"], NTI33554439);
    var val_620764467 = nimCopy(null, colontmp__620768440["Field1"], NTI654311428);
    result_620764465 = map_620762505(s_1191182447(key_620764466), HEX3Aanonymous_620764478);

  return result_620764465;

}

function HEX3Aanonymous_620764556(entry_620764559) {
    
function HEX3Aanonymous_620764763(rect_620764779) {
        var Temporary1;
          var Temporary2;

      var result_620764782 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var rect_620764783 = nimCopy(null, rect_620764779, NTI654311428);
          if (!(rect_620764783.width == 1)) Temporary2 = false; else {            Temporary2 = (height_654311468(rect_620764783) == 1);          }        if (Temporary2) {
        rect_620764783.rows[chckIndx(0, 0, (rect_620764783.rows).length - 1)].push.apply(rect_620764783.rows[chckIndx(0, 0, (rect_620764783.rows).length - 1)], val_620764564.Field0);;
        Temporary1 = rect_620764783;
        }
        else {
        Temporary1 = stack_654312352([toTextRectOneLine_654311513(val_620764564.Field1, 0, 0), nimCopy(null, rect_620764783, NTI654311428)], addInt(1, rect_620764783.baseline), 0);
        }
        
        result_620764782 = nimCopy(result_620764782, Temporary1, NTI654311428);

      return result_620764782;

    }

  var result_620764562 = null;

    var colontmp__620768445 = nimCopy(null, entry_620764559, NTI637535031);
    var key_620764563 = nimCopy(null, colontmp__620768445["Field0"], NTI33554439);
    var val_620764564 = nimCopy(null, colontmp__620768445["Field1"], NTI637535032);
    result_620764562 = map_620764784(HEX3EHEX3E_620764680(HEX3EHEX3E_620761514(HEX3EHEX3E_620764584(s_1191182447(key_620764563), HEX21_620762342(letter_1191183524)), ws_620759767), atom_620759778[0]), HEX3Aanonymous_620764763);

  return result_620764562;

}

function HEX3Aanonymous_620765040(x_620765060) {
  var result_620765063 = [];

    result_620765063 = nimCopy(null, [nimCopy(null, x_620765060, NTI654311428)], NTI620759053);

  return result_620765063;

}

function HEX3Aanonymous_620765095(x_620765115) {
  var result_620765118 = [];

    result_620765118 = nimCopy(null, [nimCopy(null, x_620765115, NTI654311428)], NTI620759053);

  return result_620765118;

}

function HEX3Aanonymous_620765239(fraction_620765282) {
      var Temporary1;
      var Temporary2;
        var Temporary3;

  var result_620765285 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var numerator_620765286 = nimCopy(null, fraction_620765282[chckIndx(0, 0, (fraction_620765282).length - 1)], NTI654311428);
    var denominator_620765287 = nimCopy(null, fraction_620765282[chckIndx(1, 0, (fraction_620765282).length - 1)], NTI654311428);
    var width_620765292 = max_620765248(numerator_620765286.width, denominator_620765287.width);
    var fractionLine_620765293 = nsuRepeatStr(makeNimstrLit("\xE2\x94\x80"), width_620765292);
    var flag_620765294 = 5;
      if (!(numerator_620765286.flag == 5)) Temporary2 = false; else {        Temporary2 = (numerator_620765286.width == width_620765292);      }      if (Temporary2) Temporary1 = true; else {        if (!(denominator_620765287.flag == 5)) Temporary3 = false; else {          Temporary3 = (denominator_620765287.width == width_620765292);        }        Temporary1 = Temporary3;      }    if (Temporary1) {
    fractionLine_620765293 = nimCopy(null, (makeNimstrLit("\xE2\x95\xB6") || []).concat(fractionLine_620765293 || [],makeNimstrLit("\xE2\x95\xB4") || []), NTI33554439);
    flag_620765294 = 0;
    }
    
    result_620765285 = nimCopy(result_620765285, withFlag_654312438(stack_654312352([nimCopy(null, numerator_620765286, NTI654311428), toTextRectOneLine_654311513(fractionLine_620765293, 0, 0), nimCopy(null, denominator_620765287, NTI654311428)], height_654311468(numerator_620765286), 0), flag_620765294), NTI654311428);

  return result_620765285;

}

function HEX3Aanonymous_620765454(x_620765474) {
  var result_620765477 = [];

    result_620765477 = nimCopy(null, [nimCopy(null, x_620765474, NTI654311428)], NTI620759053);

  return result_620765477;

}

function HEX3Aanonymous_620765509(x_620765529) {
  var result_620765532 = [];

    result_620765532 = nimCopy(null, [nimCopy(null, x_620765529, NTI654311428)], NTI620759053);

  return result_620765532;

}

function HEX3Aanonymous_620765579(nk_620765598) {
  var result_620765601 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var n_620765602 = nimCopy(null, nk_620765598[chckIndx(0, 0, (nk_620765598).length - 1)], NTI654311428);
    var k_620765603 = nimCopy(null, nk_620765598[chckIndx(1, 0, (nk_620765598).length - 1)], NTI654311428);
    var inside_620765604 = stack_654312352([nimCopy(null, n_620765602, NTI654311428), nimCopy(null, k_620765603, NTI654311428)], height_654311468(n_620765602), 0);
    result_620765601 = nimCopy(result_620765601, join_654311640([bigDelimiter_620757000(makeNimstrLit("("), height_654311468(inside_620765604), chckRange(inside_620765604.baseline, 0, 2147483647)), nimCopy(null, inside_620765604, NTI654311428), bigDelimiter_620757000(makeNimstrLit(")"), height_654311468(inside_620765604), chckRange(inside_620765604.baseline, 0, 2147483647))]), NTI654311428);

  return result_620765601;

}

function HEX3Aanonymous_620765634(arg_620765676) {
  var result_620765679 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var horizontal_620765680 = toTextRectOneLine_654311513(nsuRepeatStr(makeNimstrLit("\xE2\x94\x80"), arg_620765676.width), 0, 0);
    var sandwich_620765681 = stack_654312352([nimCopy(null, horizontal_620765680, NTI654311428), nimCopy(null, arg_620765676, NTI654311428), nimCopy(null, horizontal_620765680, NTI654311428)], addInt(arg_620765676.baseline, 1), 1);
    var left_620765682 = ({rows: [], baseline: 0, width: 0, flag: 0});
    left_620765682.rows = nimCopy(null, newSeq_452985301(height_654311468(sandwich_620765681)), NTI452985127);
    left_620765682.width = 1;
    left_620765682.baseline = sandwich_620765681.baseline;
    Label1: do {
      var i_620765694 = 0;
      var colontmp__620768509 = 0;
      colontmp__620768509 = subInt(height_654311468(sandwich_620765681), 1);
      var i_620768510 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768510 < colontmp__620768509)) break Label3;
            i_620765694 = i_620768510;
            left_620765682.rows[chckIndx(i_620765694, 0, (left_620765682.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x82"), NTI33554439);
            i_620768510 = addInt(i_620768510, 1);
          }
      } while (false);
    } while (false);
    var right_620765695 = nimCopy(null, left_620765682, NTI654311428);
    left_620765682.rows[chckIndx(0, 0, (left_620765682.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x8C"), NTI33554439);
    HEX5BHEX5DHEX3D_620758398(left_620765682.rows, 1, makeNimstrLit("\xE2\x94\x94"));
    right_620765695.rows[chckIndx(0, 0, (right_620765695.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x90"), NTI33554439);
    HEX5BHEX5DHEX3D_620758398(right_620765695.rows, 1, makeNimstrLit("\xE2\x94\x98"));
    result_620765679 = nimCopy(result_620765679, join_654311640([nimCopy(null, left_620765682, NTI654311428), nimCopy(null, sandwich_620765681, NTI654311428), nimCopy(null, right_620765695, NTI654311428)]), NTI654311428);

  return result_620765679;

}

function HEX3Aanonymous_620765735(arg_620765900) {
    var Temporary1;

  var result_620765903 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var overbar_620765904 = toTextRectOneLine_654311513(nsuRepeatStr(makeNimstrLit("_"), arg_620765900.width), 0, 0);
    if ((height_654311468(arg_620765900) == 1)) {
    Temporary1 = {rows: [makeNimstrLit("\xE2\x88\x9A")], baseline: 0, width: 1, flag: 0};
    }
    else {
      Label2: do {
        var resultHEX60gensym165_620765919 = [];
        Label3: do {
          var xHEX60gensym165_620765920 = 0;
          var colontmp__620768514 = 0;
          colontmp__620768514 = divInt(height_654311468(arg_620765900), 2);
          var res_620768515 = colontmp__620768514;
          Label4: do {
              Label5: while (true) {
              if (!(1 <= res_620768515)) break Label5;
                xHEX60gensym165_620765920 = res_620768515;
                resultHEX60gensym165_620765919.push(xHEX60gensym165_620765920);;
                res_620768515 = subInt(res_620768515, 1);
              }
          } while (false);
        } while (false);
        var HEX3Atmp_620765944 = nimCopy(null, resultHEX60gensym165_620765919, NTI620763708);
        var iHEX60gensym166_620765947 = 0;
        var resultHEX60gensym166_620765954 = newSeq_654311768(chckRange((HEX3Atmp_620765944).length, 0, 2147483647));
        Label6: do {
          var it_620765958 = 0;
          var i_620768519 = 0;
          var L_620768520 = (HEX3Atmp_620765944).length;
          Label7: do {
              Label8: while (true) {
              if (!(i_620768519 < L_620768520)) break Label8;
                it_620765958 = HEX3Atmp_620765944[chckIndx(i_620768519, 0, (HEX3Atmp_620765944).length - 1)];
                resultHEX60gensym166_620765954[chckIndx(iHEX60gensym166_620765947, 0, (resultHEX60gensym166_620765954).length - 1)] = nimCopy(resultHEX60gensym166_620765954[chckIndx(iHEX60gensym166_620765947, 0, (resultHEX60gensym166_620765954).length - 1)], toTextRect_654311477(makeNimstrLit("\xE2\x95\xB2"), addInt(subInt(arg_620765900.baseline, height_654311468(arg_620765900)), it_620765958), 0), NTI654311428);
                iHEX60gensym166_620765947 = addInt(iHEX60gensym166_620765947, 1);
                i_620768519 = addInt(i_620768519, 1);
                if (!(((HEX3Atmp_620765944).length == L_620768520))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Label9: do {
        var resultHEX60gensym169_620765977 = [];
        Label10: do {
          var xHEX60gensym169_620765978 = 0;
          var colontmp__620768524 = 0;
          colontmp__620768524 = height_654311468(arg_620765900);
          var res_620768525 = 1;
          Label11: do {
              Label12: while (true) {
              if (!(res_620768525 <= colontmp__620768524)) break Label12;
                xHEX60gensym169_620765978 = res_620768525;
                resultHEX60gensym169_620765977.push(xHEX60gensym169_620765978);;
                res_620768525 = addInt(res_620768525, 1);
              }
          } while (false);
        } while (false);
        var HEX3Atmp_620766002 = nimCopy(null, resultHEX60gensym169_620765977, NTI620763763);
        var iHEX60gensym170_620766005 = 0;
        var resultHEX60gensym170_620766012 = newSeq_654311768(chckRange((HEX3Atmp_620766002).length, 0, 2147483647));
        Label13: do {
          var it_620766016 = 0;
          var i_620768528 = 0;
          var L_620768529 = (HEX3Atmp_620766002).length;
          Label14: do {
              Label15: while (true) {
              if (!(i_620768528 < L_620768529)) break Label15;
                it_620766016 = HEX3Atmp_620766002[chckIndx(i_620768528, 0, (HEX3Atmp_620766002).length - 1)];
                resultHEX60gensym170_620766012[chckIndx(iHEX60gensym170_620766005, 0, (resultHEX60gensym170_620766012).length - 1)] = nimCopy(resultHEX60gensym170_620766012[chckIndx(iHEX60gensym170_620766005, 0, (resultHEX60gensym170_620766012).length - 1)], toTextRect_654311477(makeNimstrLit("\xE2\x95\xB1"), addInt(subInt(arg_620765900.baseline, height_654311468(arg_620765900)), it_620766016), 0), NTI654311428);
                iHEX60gensym170_620766005 = addInt(iHEX60gensym170_620766005, 1);
                i_620768528 = addInt(i_620768528, 1);
                if (!(((HEX3Atmp_620766002).length == L_620768529))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
    Temporary1 = join_654311640(HEX26_620760909(resultHEX60gensym166_620765954, resultHEX60gensym170_620766012));
    }
    
    var symbol_620766025 = nimCopy(null, Temporary1, NTI654311428);
    result_620765903 = nimCopy(result_620765903, join_654311640([nimCopy(null, symbol_620766025, NTI654311428), stack_654312352([nimCopy(null, overbar_620765904, NTI654311428), nimCopy(null, arg_620765900, NTI654311428)], addInt(arg_620765900.baseline, 1), 1)]), NTI654311428);

  return result_620765903;

}

function HEX3Aanonymous_620766097(x_620766117) {
  var result_620766120 = [];

    result_620766120 = nimCopy(null, [nimCopy(null, x_620766117, NTI654311428)], NTI620759053);

  return result_620766120;

}

function HEX3Aanonymous_620766152(x_620766172) {
  var result_620766175 = [];

    result_620766175 = nimCopy(null, [nimCopy(null, x_620766172, NTI654311428)], NTI620759053);

  return result_620766175;

}

function HEX3Aanonymous_620766275(x_620766295) {
  var result_620766298 = [];

    result_620766298 = nimCopy(null, [nimCopy(null, x_620766295, NTI654311428)], NTI620759053);

  return result_620766298;

}

function HEX3Aanonymous_620766428(things_620766447) {
  var result_620766450 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var inside_620766451 = nimCopy(null, things_620766447[chckIndx(1, 0, (things_620766447).length - 1)], NTI654311428);
    var left_620766452 = nimCopy(null, things_620766447[chckIndx(0, 0, (things_620766447).length - 1)], NTI654311428);
    var right_620766453 = nimCopy(null, things_620766447[chckIndx(2, 0, (things_620766447).length - 1)], NTI654311428);
    if ((1 < height_654311468(inside_620766451))) {
    left_620766452 = nimCopy(left_620766452, bigDelimiter_620757000(left_620766452.rows[chckIndx(0, 0, (left_620766452.rows).length - 1)], height_654311468(inside_620766451), chckRange(inside_620766451.baseline, 0, 2147483647)), NTI654311428);
    right_620766453 = nimCopy(right_620766453, bigDelimiter_620757000(right_620766453.rows[chckIndx(0, 0, (right_620766453.rows).length - 1)], height_654311468(inside_620766451), chckRange(inside_620766451.baseline, 0, 2147483647)), NTI654311428);
    }
    
    result_620766450 = nimCopy(result_620766450, join_654311640([nimCopy(null, left_620766452, NTI654311428), nimCopy(null, inside_620766451, NTI654311428), nimCopy(null, right_620766453, NTI654311428)]), NTI654311428);

  return result_620766450;

}

function HEX3Aanonymous_620766854(sup_620766870) {
  var result_620766873 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620766873 = nimCopy(result_620766873, withFlag_654312438(sup_620766870, 7), NTI654311428);

  return result_620766873;

}

function HEX3Aanonymous_620767058(x_620767078) {
  var result_620767081 = [];

    result_620767081 = nimCopy(null, [nimCopy(null, x_620767078, NTI620761224)], NTI620761747);

  return result_620767081;

}

function HEX3Aanonymous_620766955(x_620766975) {
  var result_620766978 = [];

    result_620766978 = nimCopy(null, [x_620766975], NTI620761337);

  return result_620766978;

}

function HEX3Aanonymous_620767140(x_620767175) {
  var result_620767178 = [];

    var resultHEX60gensym194_620767187 = newSeq_620763748(0);
    Label1: do {
      var xHEX60gensym194_620767191 = [];
      var i_620768546 = 0;
      var L_620768547 = (x_620767175).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620768546 < L_620768547)) break Label3;
            xHEX60gensym194_620767191 = x_620767175[chckIndx(i_620768546, 0, (x_620767175).length - 1)];
            var a_620767192 = nimCopy(null, resultHEX60gensym194_620767187, NTI620762132);
            var b_620767193 = nimCopy(null, xHEX60gensym194_620767191, NTI620761186);
            resultHEX60gensym194_620767187 = nimCopy(null, HEX26_620763783(a_620767192, b_620767193), NTI620762155);
            i_620768546 = addInt(i_620768546, 1);
            if (!(((x_620767175).length == L_620768547))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_620767178 = nimCopy(null, resultHEX60gensym194_620767187, NTI620762132);

  return result_620767178;

}

function HEX3Aanonymous_620767213(primes_620767232) {
  var result_620767235 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620767235 = nimCopy(result_620767235, withFlag_654312438(toTextRectOneLine_654311513(nsuRepeatStr(makeNimstrLit("\xE2\x80\xB2"), chckRange((primes_620767232).length, 0, 2147483647)), 0, 0), 7), NTI654311428);

  return result_620767235;

}

function HEX3Aanonymous_620767323(sub_620767339) {
  var result_620767342 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620767342 = nimCopy(result_620767342, withFlag_654312438(sub_620767339, 6), NTI654311428);

  return result_620767342;

}

function HEX3Aanonymous_620767760(x_620767780) {
  var result_620767783 = [];

    result_620767783 = nimCopy(null, [nimCopy(null, x_620767780, NTI654311428)], NTI620759053);

  return result_620767783;

}

function HEX3Aanonymous_620767436(x_620767456) {
  var result_620767459 = [];

    result_620767459 = nimCopy(null, [nimCopy(null, x_620767456, NTI654311428)], NTI620759053);

  return result_620767459;

}

function HEX3Aanonymous_620767491(x_620767511) {
  var result_620767514 = [];

    result_620767514 = nimCopy(null, [nimCopy(null, x_620767511, NTI654311428)], NTI620759053);

  return result_620767514;

}

function HEX3Aanonymous_620767600(x_620767620) {
  var result_620767623 = [];

    result_620767623 = nimCopy(null, [nimCopy(null, x_620767620, NTI654311428)], NTI620759053);

  return result_620767623;

}

function HEX3Aanonymous_620767655(x_620767675) {
  var result_620767678 = [];

    result_620767678 = nimCopy(null, [nimCopy(null, x_620767675, NTI654311428)], NTI620759053);

  return result_620767678;

}

function HEX3Aanonymous_620767838(operands_620767891) {
      var Temporary1;
        var Temporary2;
      var Temporary3;

  var result_620767894 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var base_620767895 = nimCopy(null, operands_620767891[chckIndx(0, 0, (operands_620767891).length - 1)], NTI654311428);
    var flag_620767896 = base_620767895.flag;
    base_620767895.flag = 0;
    switch ((operands_620767891).length) {
    case 1:
      result_620767894 = nimCopy(result_620767894, base_620767895, NTI654311428);
      break;
    case 2:
      var script_620767900 = nimCopy(null, operands_620767891[chckIndx(1, 0, (operands_620767891).length - 1)], NTI654311428);
      if ((ConstSet135[flag_620767896] != undefined)) {
      if ((script_620767900.flag == 7)) {
      Temporary1 = stack_654312352([nimCopy(null, script_620767900, NTI654311428), nimCopy(null, base_620767895, NTI654311428)], addInt(base_620767895.baseline, height_654311468(script_620767900)), 0);
      }
      else {
      Temporary1 = stack_654312352([nimCopy(null, base_620767895, NTI654311428), nimCopy(null, script_620767900, NTI654311428)], base_620767895.baseline, 0);
      }
      
      result_620767894 = nimCopy(result_620767894, Temporary1, NTI654311428);
      }
      else {
        if ((script_620767900.flag == 7)) {
        Temporary2 = addInt(base_620767895.baseline, height_654311468(script_620767900));
        }
        else {
        Temporary2 = subInt(base_620767895.baseline, height_654311468(base_620767895));
        }
        
        script_620767900.baseline = Temporary2;
        result_620767894 = nimCopy(result_620767894, HEX26_654312290(base_620767895, script_620767900), NTI654311428);
      }
      
      break;
    case 3:
      if ((operands_620767891[chckIndx(1, 0, (operands_620767891).length - 1)].flag == 7)) {
      Temporary3 = {Field0: nimCopy(null, operands_620767891[chckIndx(1, 0, (operands_620767891).length - 1)], NTI654311428), Field1: nimCopy(null, operands_620767891[chckIndx(2, 0, (operands_620767891).length - 1)], NTI654311428)};
      }
      else {
      Temporary3 = {Field0: nimCopy(null, operands_620767891[chckIndx(2, 0, (operands_620767891).length - 1)], NTI654311428), Field1: nimCopy(null, operands_620767891[chckIndx(1, 0, (operands_620767891).length - 1)], NTI654311428)};
      }
      
      var colontmp__620768550 = nimCopy(null, Temporary3, NTI620765331);
      var sup_620767917 = nimCopy(null, colontmp__620768550["Field0"], NTI654311428);
      var sub_620767918 = nimCopy(null, colontmp__620768550["Field1"], NTI654311428);
      if ((ConstSet136[flag_620767896] != undefined)) {
      result_620767894 = nimCopy(result_620767894, stack_654312352([nimCopy(null, sup_620767917, NTI654311428), nimCopy(null, base_620767895, NTI654311428), nimCopy(null, sub_620767918, NTI654311428)], addInt(base_620767895.baseline, height_654311468(sup_620767917)), 0), NTI654311428);
      }
      else {
        result_620767894 = nimCopy(result_620767894, HEX26_654312290(base_620767895, stack_654312352([extendDown_654311573(sup_620767917, height_654311468(base_620767895)), nimCopy(null, sub_620767918, NTI654311428)], addInt(base_620767895.baseline, height_654311468(sup_620767917)), 1)), NTI654311428);
      }
      
      break;
    default: 
      break;
    }
    result_620767894.flag = flag_620767896;

  return result_620767894;

}
var ws_620759767 = map_620759710(HEX26_620759483(map_620759246(HEX2A_620758608(whitespace_1191183431, HEX2EHEX2E_973079379(0, 2147483647).a), HEX3Aanonymous_620759426), HEX2A_620759078(HEX7C_620758976(map_620758744(whitespace_1191183431, HEX3Aanonymous_620758930), nop_620758616()), subInt(HEX2EHEX2E_973079379(0, 2147483647).b, HEX2EHEX2E_973079379(0, 2147483647).a))), HEX3Aanonymous_620759625);
var atom_620759778 = [{body: null}];
var expr_620761164 = map_620761071(map_620760985(HEX26_620760728(map_620760491(HEX2A_620759823(atom_620759778[0], HEX2EHEX2E_973079379(0, 2147483647).a), HEX3Aanonymous_620760671), HEX2A_620760323(HEX7C_620760221(map_620759977(atom_620759778[0], HEX3Aanonymous_620760175), nop_620759831()), subInt(HEX2EHEX2E_973079379(0, 2147483647).b, HEX2EHEX2E_973079379(0, 2147483647).a))), HEX3Aanonymous_620760870), HEX3Aanonymous_620761050);
var alpha_620761187 = HEX7C_1191183450(c_1191182775(HEX2EHEX2E_637534419(65, 90)), c_1191182775(HEX2EHEX2E_637534419(97, 122)));
var digit_620761279 = map_620761222(c_1191182775(HEX2EHEX2E_637534419(48, 57)), HEX3Aanonymous_620761201);
var sHEX60gensym88_620762209 = map_620762174(fontsByName_637534324, HEX3Aanonymous_620761331);
if (!((0 < (sHEX60gensym88_620762209).length))) {
failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(895, 10) `s`gensym88.len > 0` Can\'t fold empty sequences"));
}

var resultHEX60gensym88_620762219 = [null];
resultHEX60gensym88_620762219[0] = sHEX60gensym88_620762209[chckIndx(0, 0, (sHEX60gensym88_620762209).length - 1)];
Label9: do {
  var iHEX60gensym88_620762227 = [0];
  var colontmp__620768142 = 0;
  colontmp__620768142 = (sHEX60gensym88_620762209).length;
  var i_620768143 = 1;
  Label10: do {
      Label11: while (true) {
      if (!(i_620768143 < colontmp__620768142)) break Label11;
        iHEX60gensym88_620762227[0] = i_620768143;
        var a_620762228 = resultHEX60gensym88_620762219[0];
        var b_620762229 = sHEX60gensym88_620762209[chckIndx(iHEX60gensym88_620762227[0], 0, (sHEX60gensym88_620762209).length - 1)];
        resultHEX60gensym88_620762219[0] = HEX7C_620762238(a_620762228, b_620762229);
        i_620768143 = addInt(i_620768143, 1);
      }
  } while (false);
} while (false);
var latinLetter_620762316 = HEX7C_620762238(map_620761222(alpha_620761187, HEX3Aanonymous_620761288), resultHEX60gensym88_620762219[0]);
var sHEX60gensym98_620762635 = map_620762609(delimiters_637534323, HEX3Aanonymous_620762317);
var nHEX60gensym98_620762639 = (sHEX60gensym98_620762635).length;
if (!((0 < nHEX60gensym98_620762639))) {
failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym98 > 0` Can\'t fold empty sequences"));
}

var resultHEX60gensym98_620762645 = [sHEX60gensym98_620762635[chckIndx(subInt(nHEX60gensym98_620762639, 1), 0, (sHEX60gensym98_620762635).length - 1)]];
Label12: do {
  var iHEX60gensym98_620762651 = [0];
  var colontmp__620768146 = 0;
  colontmp__620768146 = subInt(nHEX60gensym98_620762639, 2);
  var res_620768148 = colontmp__620768146;
  Label13: do {
      Label14: while (true) {
      if (!(0 <= res_620768148)) break Label14;
        iHEX60gensym98_620762651[0] = res_620768148;
        var a_620762652 = sHEX60gensym98_620762635[chckIndx(iHEX60gensym98_620762651[0], 0, (sHEX60gensym98_620762635).length - 1)];
        var b_620762653 = resultHEX60gensym98_620762645[0];
        resultHEX60gensym98_620762645[0] = HEX7C_620762238(a_620762652, b_620762653);
        res_620768148 = subInt(res_620768148, 1);
      }
  } while (false);
} while (false);
var delimiter_620762666 = resultHEX60gensym98_620762645[0];
var command_620764458 = map_620762505(validate_620764187(map_620764053(HEX3EHEX3E_620763925(c_1191182569(92), map_620763860(HEX26_620763597(map_620763360(HEX2A_620762707(letter_1191183524, HEX2EHEX2E_973079379(1, 2147483647).a), HEX3Aanonymous_620763540), HEX2A_620763192(HEX7C_620763090(map_620762870(letter_1191183524, HEX3Aanonymous_620763044), nop_620762715()), subInt(HEX2EHEX2E_973079379(1, 2147483647).b, HEX2EHEX2E_973079379(1, 2147483647).a))), HEX3Aanonymous_620763739)), HEX3Aanonymous_620764008), HEX3Aanonymous_620764118, makeNimstrLit("a command")), HEX3Aanonymous_620764250);
var sHEX60gensym131_620764516 = map_620762609(nonCommands_637535956, HEX3Aanonymous_620764459);
var nHEX60gensym131_620764520 = (sHEX60gensym131_620764516).length;
if (!((0 < nHEX60gensym131_620764520))) {
failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym131 > 0` Can\'t fold empty sequences"));
}

var resultHEX60gensym131_620764526 = [sHEX60gensym131_620764516[chckIndx(subInt(nHEX60gensym131_620764520, 1), 0, (sHEX60gensym131_620764516).length - 1)]];
Label15: do {
  var iHEX60gensym131_620764532 = [0];
  var colontmp__620768151 = 0;
  colontmp__620768151 = subInt(nHEX60gensym131_620764520, 2);
  var res_620768152 = colontmp__620768151;
  Label16: do {
      Label17: while (true) {
      if (!(0 <= res_620768152)) break Label17;
        iHEX60gensym131_620764532[0] = res_620768152;
        var a_620764533 = sHEX60gensym131_620764516[chckIndx(iHEX60gensym131_620764532[0], 0, (sHEX60gensym131_620764516).length - 1)];
        var b_620764534 = resultHEX60gensym131_620764526[0];
        resultHEX60gensym131_620764526[0] = HEX7C_620762238(a_620764533, b_620764534);
        res_620768152 = subInt(res_620768152, 1);
      }
  } while (false);
} while (false);
var nonCommand_620764547 = resultHEX60gensym131_620764526[0];
var sHEX60gensym138_620764878 = map_620764851(simpleDiacritics_637534551, HEX3Aanonymous_620764556);
var nHEX60gensym138_620764882 = (sHEX60gensym138_620764878).length;
if (!((0 < nHEX60gensym138_620764882))) {
failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym138 > 0` Can\'t fold empty sequences"));
}

var resultHEX60gensym138_620764888 = [sHEX60gensym138_620764878[chckIndx(subInt(nHEX60gensym138_620764882, 1), 0, (sHEX60gensym138_620764878).length - 1)]];
Label18: do {
  var iHEX60gensym138_620764894 = [0];
  var colontmp__620768155 = 0;
  colontmp__620768155 = subInt(nHEX60gensym138_620764882, 2);
  var res_620768156 = colontmp__620768155;
  Label19: do {
      Label20: while (true) {
      if (!(0 <= res_620768156)) break Label20;
        iHEX60gensym138_620764894[0] = res_620768156;
        var a_620764895 = sHEX60gensym138_620764878[chckIndx(iHEX60gensym138_620764894[0], 0, (sHEX60gensym138_620764878).length - 1)];
        var b_620764896 = resultHEX60gensym138_620764888[0];
        resultHEX60gensym138_620764888[0] = HEX7C_620762238(a_620764895, b_620764896);
        res_620768156 = subInt(res_620768156, 1);
      }
  } while (false);
} while (false);
var simpleDiacritic_620764909 = resultHEX60gensym138_620764888[0];
var frac_620765393 = HEX3EHEX3E_620765318(HEX7C_620764918(HEX7C_620764918(HEX7C_620764918(s_1191182447(makeNimstrLit("\\frac")), s_1191182447(makeNimstrLit("\\tfrac"))), s_1191182447(makeNimstrLit("\\dfrac"))), s_1191182447(makeNimstrLit("\\cfrac"))), map_620761071(HEX26_620765144(map_620759977(atom_620759778[0], HEX3Aanonymous_620765040), map_620759977(atom_620759778[0], HEX3Aanonymous_620765095)), HEX3Aanonymous_620765239));
var binom_620765625 = HEX3EHEX3E_620765318(HEX7C_620764918(HEX7C_620764918(HEX7C_620764918(s_1191182447(makeNimstrLit("\\binom")), s_1191182447(makeNimstrLit("\\tbinom"))), s_1191182447(makeNimstrLit("\\dbinom"))), s_1191182447(makeNimstrLit("\\cbinom"))), map_620761071(HEX26_620765144(map_620759977(atom_620759778[0], HEX3Aanonymous_620765454), map_620759977(atom_620759778[0], HEX3Aanonymous_620765509)), HEX3Aanonymous_620765579));
var boxed_620765726 = HEX3EHEX3E_620765318(s_1191182447(makeNimstrLit("\\boxed")), map_620764784(atom_620759778[0], HEX3Aanonymous_620765634));
var sqrt_620766046 = HEX3EHEX3E_620765318(s_1191182447(makeNimstrLit("\\sqrt")), map_620764784(atom_620759778[0], HEX3Aanonymous_620765735));
var leftright_620766461 = map_620761071(HEX3EHEX3E_620766345(HEX3EHEX3E_620761348(s_1191182447(makeNimstrLit("\\left")), ws_620759767), HEX26_620765144(HEX26_620765144(map_620759977(delimiter_620762666, HEX3Aanonymous_620766097), map_620759977(HEX3EHEX3E_620764680(ws_620759767, expr_620761164), HEX3Aanonymous_620766152)), map_620759977(HEX3EHEX3E_620764680(HEX3EHEX3E_620761348(s_1191182447(makeNimstrLit("\\right")), ws_620759767), delimiter_620762666), HEX3Aanonymous_620766275))), HEX3Aanonymous_620766428);
var bracedExpr_620766628 = HEX3CHEX3C_620766553(HEX3EHEX3E_620766470(c_1191182569(123), expr_620761164), c_1191182569(125));
var atom1_620766832 = HEX3CHEX3C_620766757(HEX7C_620762238(HEX7C_620762238(HEX7C_620762238(HEX7C_620762238(HEX7C_620762238(HEX7C_620762238(HEX7C_620762238(HEX7C_620762238(HEX7C_620762238(HEX7C_620762238(bracedExpr_620766628, leftright_620766461), digit_620761279), latinLetter_620762316), command_620764458), nonCommand_620764547), simpleDiacritic_620764909), frac_620765393), binom_620765625), sqrt_620766046), boxed_620765726), ws_620759767);
var superscript_620767301 = HEX7C_620762238(map_620764784(HEX3EHEX3E_620766470(c_1191182569(94), atom1_620766832), HEX3Aanonymous_620766854), map_620767240(map_620763860(HEX26_620763597(map_620763360(HEX2A_620762707(c_1191182569(39), HEX2EHEX2E_973079379(1, 2147483647).a), HEX3Aanonymous_620767058), HEX2A_620763192(HEX7C_620763090(map_620762870(c_1191182569(39), HEX3Aanonymous_620766955), nop_620762715()), subInt(HEX2EHEX2E_973079379(1, 2147483647).b, HEX2EHEX2E_973079379(1, 2147483647).a))), HEX3Aanonymous_620767140), HEX3Aanonymous_620767213));
var subscript_620767350 = map_620764784(HEX3EHEX3E_620766470(c_1191182569(95), atom1_620766832), HEX3Aanonymous_620767323);
atom_620759778[0].body = map_620761071(HEX26_620765144(map_620759977(atom1_620766832, HEX3Aanonymous_620767760), HEX7C_620760221(HEX7C_620760221(HEX26_620765144(map_620759977(superscript_620767301, HEX3Aanonymous_620767436), map_620759977(HEX7C_620762238(subscript_620767350, nop_620767360()), HEX3Aanonymous_620767491)), HEX26_620765144(map_620759977(subscript_620767350, HEX3Aanonymous_620767600), map_620759977(HEX7C_620762238(superscript_620767301, nop_620767360()), HEX3Aanonymous_620767655))), nop_620759831())), HEX3Aanonymous_620767838).body;
var completeExpr_620768014 = HEX3CHEX3C_620767939(expr_620761164, eof_1191183429);

function HEX24_654311456(rect_654311457) {
  var result_654311458 = [];

    result_654311458 = nimCopy(null, nsuJoinSep(rect_654311457.rows, makeNimstrLit("\x0A")), NTI33554439);

  return result_654311458;

}

function render_620768554(latex_620768555) {
    var Temporary1;
    var Temporary2;

  var result_620768556 = [];

    var parsed_620768569 = parse_620760023(completeExpr_620768014, latex_620768555);
    if ((parsed_620768569.kind == 0)) {
    var Temporary2 = parsed_620768569;
    if (ConstSet140[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1191182357)); }
    Temporary1 = HEX24_654311456(Temporary2.value);
    }
    else {
      raiseException({message: makeNimstrLit("Can\'t parse expression"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_620768556 = nimCopy(null, Temporary1, NTI33554439);

  return result_620768556;

}

function matext(latex_486539267) {
  var result_486539268 = null;

    result_486539268 = toJSStr(render_620768554(cstrToNimstr(latex_486539267)));

  return result_486539268;

}
export default matext;
