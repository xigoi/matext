/* Generated by the Nim Compiler v1.6.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI1207959605 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI687866336 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637543408 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI637542095 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI989855747 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI637542105 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637543334 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637542781 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637542695 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637542045 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637541863 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637541924 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637541769 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637540630 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI721420295 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI637541415 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866218 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866230 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI385876137 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI637541360 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534215 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637540660 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637540654 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637540438 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637540791 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637540181 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637540247 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637540352 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654312248 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI637539635 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539038 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539300 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539294 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539134 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539101 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538648 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538866 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538860 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538820 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538761 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538692 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538659 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539254 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539203 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539500 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539494 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539088 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539094 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637539714 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539612 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539761 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538610 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538616 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637539860 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637539941 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538383 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538428 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538514 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959810 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959718 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537569 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537691 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537630 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537757 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537818 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637538319 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537465 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537192 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536598 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536860 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536854 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536694 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536661 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536211 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536434 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536428 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536369 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536318 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536249 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536222 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536814 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536763 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537060 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637537054 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536648 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536654 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637537271 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI671088854 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536162 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536168 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637537344 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637536153 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI671088643 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33555088 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555081 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI671088647 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI671088644 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI671088712 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535467 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535729 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535723 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535563 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535530 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535099 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535303 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535297 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535245 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI671088697 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535137 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535110 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535683 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535632 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535929 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535923 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535517 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535523 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637536119 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535050 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637535056 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI452985127 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654312070 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207959963 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555129 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1207960691 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI738197565 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1207959558 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207960026 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI922746952 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI922746959 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1207960629 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI1207959782 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1207960595 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959587 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1207959573 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1207959684 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1207959573 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1207959573, name: "success", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1207959573, name: "failure", len: 0, sons: null}}};
NTI1207959573.node = NNI1207959573;
NTI1207959587.base = NTI33554439;
var NNI1207959684 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI33554439, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1207959684.node = NNI1207959684;
NTI1207960595.base = NTI33554439;
var NNI1207959782 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI33554438, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1207959782.node = NNI1207959782;
NTI1207960629.base = NTI33554439;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI922746959 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI922746952, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI922746959.node = NNI922746959;
NTI1207960026.base = NTI33554439;
var NNI1207959558 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI1207959558.node = NNI1207959558;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI738197565 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI738197565.node = NNI738197565;
NTI1207960691.base = NTI33554439;
var NNI33555129 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555129.node = NNI33555129;
NTI33555129.base = NTI33555113;
NTI1207959963.base = NTI33554439;
var NNI654312070 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI654312070.node = NNI654312070;
NTI452985127.base = NTI33554439;
NTI637535050.base = NTI33554439;
var NNI637535056 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI637535050, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI637535056.node = NNI637535056;
NTI637536119.base = NTI33554439;
NTI637535517.base = NTI637535050;
var NNI637535523 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI637535517, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI637535523.node = NNI637535523;
NTI637535923.base = NTI637535050;
NTI637535929.base = NTI33554439;
NTI637535632.base = NTI637535050;
NTI637535683.base = NTI33554439;
NTI637535110.base = NTI33554439;
NTI637535137.base = NTI33554439;
NTI671088697.base = NTI33554439;
NTI637535245.base = NTI33554439;
NTI637535297.base = NTI33554439;
NTI637535303.base = NTI33554439;
NTI637535099.base = NTI33554439;
NTI637535530.base = NTI637535050;
NTI637535563.base = NTI33554439;
NTI637535723.base = NTI637535050;
NTI637535729.base = NTI33554439;
NTI637535467.base = NTI33554439;
NTI671088712.base = NTI33554439;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
NTI671088647.base = NTI33554439;
NTI33555081.base = NTI33555088;
var NNI671088643 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI671088643, name: "trfNone", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI671088643, name: "trfAlnum", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI671088643, name: "trfOperator", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI671088643, name: "trfBigOperator", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI671088643, name: "trfWord", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI671088643, name: "trfFraction", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI671088643, name: "trfSub", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI671088643, name: "trfSup", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI671088643, name: "trfPunctuation", len: 0, sons: null}}};
NTI671088643.node = NNI671088643;
var NNI671088644 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "rows", len: 0, typ: NTI671088647, name: "rows", sons: null}, 
{kind: 1, offset: "baseline", len: 0, typ: NTI33554456, name: "baseline", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI33555081, name: "width", sons: null}, 
{kind: 1, offset: "flag", len: 0, typ: NTI671088643, name: "flag", sons: null}]};
NTI671088644.node = NNI671088644;
var NNI637536153 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI671088644, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI637536153.node = NNI637536153;
NTI637537344.base = NTI33554439;
NTI637536162.base = NTI671088644;
var NNI637536168 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI637536162, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI637536168.node = NNI637536168;
NTI671088854.base = NTI671088644;
NTI637537271.base = NTI33554439;
NTI637536648.base = NTI637536162;
var NNI637536654 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI637536648, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI637536654.node = NNI637536654;
NTI637537054.base = NTI637536162;
NTI637537060.base = NTI33554439;
NTI637536763.base = NTI637536162;
NTI637536814.base = NTI33554439;
NTI637536222.base = NTI671088644;
NTI637536249.base = NTI33554439;
NTI637536318.base = NTI671088644;
NTI637536369.base = NTI33554439;
NTI637536428.base = NTI671088644;
NTI637536434.base = NTI33554439;
NTI637536211.base = NTI671088644;
NTI637536661.base = NTI637536162;
NTI637536694.base = NTI33554439;
NTI637536854.base = NTI637536162;
NTI637536860.base = NTI33554439;
NTI637536598.base = NTI33554439;
NTI637537192.base = NTI671088644;
NTI637537465.base = NTI33554439;
NTI637538319.base = NTI33554439;
NTI637537818.base = NTI33554439;
NTI637537757.base = NTI33554439;
NTI637537630.base = NTI33554439;
NTI637537691.base = NTI33554439;
NTI637537569.base = NTI33554439;
NTI1207959718.base = NTI33554439;
NTI1207959810.base = NTI33554439;
NTI637538514.base = NTI33554439;
NTI637538428.base = NTI33554439;
NTI637538383.base = NTI33554439;
NTI637539941.base = NTI33554439;
NTI637539860.base = NTI33554439;
NTI637538610.base = NTI33554438;
var NNI637538616 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI637538610, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI637538616.node = NNI637538616;
NTI637539761.base = NTI33554439;
NTI637539612.base = NTI33554438;
NTI637539714.base = NTI33554439;
NTI637539088.base = NTI637538610;
var NNI637539094 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1207959573, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI637539088, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1207959587, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI637539094.node = NNI637539094;
NTI637539494.base = NTI637538610;
NTI637539500.base = NTI33554439;
NTI637539203.base = NTI637538610;
NTI637539254.base = NTI33554439;
NTI637538659.base = NTI33554438;
NTI637538692.base = NTI33554439;
NTI637538761.base = NTI33554438;
NTI637538820.base = NTI33554439;
NTI637538860.base = NTI33554438;
NTI637538866.base = NTI33554439;
NTI637538648.base = NTI33554438;
NTI637539101.base = NTI637538610;
NTI637539134.base = NTI33554439;
NTI637539294.base = NTI637538610;
NTI637539300.base = NTI33554439;
NTI637539038.base = NTI33554439;
NTI637539635.base = NTI33554438;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
NTI33555126.base = NTI33555125;
var NNI654312248 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI654312248.node = NNI654312248;
NTI637540352.base = NTI33554439;
NTI637540247.base = NTI33554439;
NTI637540181.base = NTI33554439;
NTI637540791.base = NTI33554439;
NTI637540438.base = NTI33554439;
NTI637540654.base = NTI671088644;
NTI637540660.base = NTI33554439;
var NNI637534215 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}]};
NTI637534215.node = NNI637534215;
NTI637541360.base = NTI385876137;
NTI687866230.base = NTI33554439;
NTI687866218.base = NTI33554439;
NTI637541415.base = NTI721420295;
NTI637540630.base = NTI671088644;
NTI637541769.base = NTI33554439;
NTI637541924.base = NTI33554439;
NTI637541863.base = NTI33554439;
NTI637542045.base = NTI33554439;
NTI637542695.base = NTI33554439;
NTI637542781.base = NTI33554439;
var NNI637543334 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI671088644, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI671088644, name: "Field1", sons: null}]};
NTI637543334.node = NNI637543334;
NTI637542105.base = NTI989855747;
var NNI637542095 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI33554439, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI33554466, name: "has", sons: null}]};
NTI637542095.node = NNI637542095;
NTI637543408.base = NTI33554439;
NTI687866336.base = NTI33554439;
var NNI1207959605 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI1207959605.node = NNI1207959605;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
var ConstSet2 = setConstr([48, 57]);

function mulInt(a_33556948, b_33556949) {
        var result = a_33556948 * b_33556949;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([65, 90]);

function nimMax(a_33556998, b_33556999) {
    var Temporary1;

  var result_33557000 = 0;

  BeforeRet: do {
    if ((b_33556999 <= a_33556998)) {
    Temporary1 = a_33556998;
    }
    else {
    Temporary1 = b_33556999;
    }
    
    result_33557000 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557000;

}

function nimMin(a_33556994, b_33556995) {
    var Temporary1;

  var result_33556996 = 0;

  BeforeRet: do {
    if ((a_33556994 <= b_33556995)) {
    Temporary1 = a_33556994;
    }
    else {
    Temporary1 = b_33556995;
    }
    
    result_33556996 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556996;

}
var ConstSet6 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var ConstSet7 = setConstr(1);

function raiseFieldError2(f_33556778, discVal_33556779) {
    raiseException({message: (f_33556778 || []).concat(discVal_33556779 || [],makeNimstrLit("\'") || []), parent: null, m_type: NTI33555129, name: null, trace: [], up: null}, "FieldDefect");

  
}

function nimBoolToStr(x_33556514) {
  var result_33556515 = [];

    if (x_33556514) {
    result_33556515 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33556515 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33556515;

}

function reprDiscriminant(e_33557424, typ_33557425) {
    var Temporary1;

  var result_33557426 = [];

    switch (typ_33557425.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557424, typ_33557425);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557424 == 0)));
      break;
    default: 
      Temporary1 = HEX24_335544323(e_33557424);
      break;
    }
    result_33557426 = nimCopy(null, Temporary1, NTI33554439);

  return result_33557426;

}
var ConstSet8 = setConstr(1);

function nimCharToStr(x_33556517) {
  var result_33556518 = [];

    result_33556518 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556518[0] = x_33556517;

  return result_33556518;

}
var ConstSet9 = setConstr(1);
var ConstSet10 = setConstr(0);
var ConstSet11 = setConstr(1);
var ConstSet12 = setConstr(1);
var ConstSet13 = setConstr(0);
var ConstSet14 = setConstr(0);
var ConstSet15 = setConstr(1);
var ConstSet16 = setConstr(0);
var ConstSet17 = setConstr(1);
var ConstSet18 = setConstr(0);
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr(0);
var ConstSet21 = setConstr(1);

function eqStrings(a_33556931, b_33556932) {
        if (a_33556931 == b_33556932) return true;
    if (a_33556931 === null && b_33556932.length == 0) return true;
    if (b_33556932 === null && a_33556931.length == 0) return true;
    if ((!a_33556931) || (!b_33556932)) return false;
    var alen = a_33556931.length;
    if (alen != b_33556932.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556931[i] != b_33556932[i]) return false;
    return true;
  

  
}
var ConstSet22 = setConstr(0);
var ConstSet23 = setConstr(1);
var ConstSet24 = setConstr(0);
var ConstSet25 = setConstr(1);
var ConstSet26 = setConstr(0);
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(1);
var ConstSet29 = setConstr(1);
var ConstSet30 = setConstr(0);
var ConstSet31 = setConstr(1);
var ConstSet32 = setConstr(0);
var ConstSet33 = setConstr(1);
var ConstSet34 = setConstr(1);
var ConstSet35 = setConstr(0);
var ConstSet36 = setConstr(0);
var ConstSet37 = setConstr(1);
var ConstSet38 = setConstr(0);
var ConstSet39 = setConstr(1);
var ConstSet40 = setConstr(0);
var ConstSet41 = setConstr(1);
var ConstSet42 = setConstr(0);
var ConstSet43 = setConstr(1);
var ConstSet44 = setConstr(0);
var ConstSet45 = setConstr(1);
var ConstSet46 = setConstr(0);
var ConstSet47 = setConstr(1);
var ConstSet48 = setConstr(0);
var ConstSet49 = setConstr(1);
var ConstSet50 = setConstr(1);
var ConstSet51 = setConstr(2, 3, 8);
var ConstSet52 = setConstr(1, 4);
var ConstSet53 = setConstr(1);
var ConstSet54 = setConstr(1);
var ConstSet55 = setConstr(0);
var ConstSet56 = setConstr(1);
var ConstSet57 = setConstr(1);
      var fontExceptions_654311562 = [[{Field0: 104, Field1: makeNimstrLit("\xE2\x84\x8E")}], [], [{Field0: 66, Field1: makeNimstrLit("\xE2\x84\xAC")}, {Field0: 69, Field1: makeNimstrLit("\xE2\x84\xB0")}, {Field0: 70, Field1: makeNimstrLit("\xE2\x84\xB1")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8B")}, {Field0: 73, Field1: makeNimstrLit("\xE2\x84\x90")}, {Field0: 76, Field1: makeNimstrLit("\xE2\x84\x92")}, {Field0: 77, Field1: makeNimstrLit("\xE2\x84\xB3")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9B")}, {Field0: 101, Field1: makeNimstrLit("\xE2\x84\xAF")}, {Field0: 103, Field1: makeNimstrLit("\xE2\x84\x8A")}, {Field0: 111, Field1: makeNimstrLit("\xE2\x84\xB4")}], [{Field0: 67, Field1: makeNimstrLit("\xE2\x84\xAD")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8C")}, {Field0: 73, Field1: makeNimstrLit("\xE2\x84\x91")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9C")}, {Field0: 90, Field1: makeNimstrLit("\xE2\x84\xA8")}], [{Field0: 67, Field1: makeNimstrLit("\xE2\x84\x82")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8D")}, {Field0: 78, Field1: makeNimstrLit("\xE2\x84\x95")}, {Field0: 80, Field1: makeNimstrLit("\xE2\x84\x99")}, {Field0: 81, Field1: makeNimstrLit("\xE2\x84\x9A")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9D")}, {Field0: 90, Field1: makeNimstrLit("\xE2\x84\xA4")}]];
    var fontStarts_654311541 = new Int32Array([119860, 119808, 119964, 120068, 120120]);
    var fontsByName_654311540 = [{Field0: makeNimstrLit("\\mathit"), Field1: 0}, {Field0: makeNimstrLit("\\mathbf"), Field1: 1}, {Field0: makeNimstrLit("\\mathcal"), Field1: 2}, {Field0: makeNimstrLit("\\mathfrak"), Field1: 3}, {Field0: makeNimstrLit("\\mathbb"), Field1: 4}];
var ConstSet58 = setConstr(1);
var ConstSet59 = setConstr(1);
var ConstSet60 = setConstr(0);
var ConstSet61 = setConstr(1);
var ConstSet62 = setConstr(1);
var ConstSet63 = setConstr(0);
var ConstSet64 = setConstr(1);
var ConstSet65 = setConstr(1);
var ConstSet66 = setConstr(0);
var ConstSet67 = setConstr(1);
var ConstSet68 = setConstr(1);
var ConstSet69 = setConstr(0);
var ConstSet70 = setConstr(1);
var ConstSet71 = setConstr(1);
var ConstSet72 = setConstr(0);
    var delimiters_654311539 = [{Field0: makeNimstrLit("("), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lparen"), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(")"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rparen"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("["), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lbrack"), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("]"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rbrack"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\{"), Field1: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lbrace"), Field1: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\}"), Field1: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rbrace"), Field1: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA8"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\langle"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lang"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA9"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rangle"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rang"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\vert"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\Vert"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x88"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lceil"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x89"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rceil"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8A"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\lfloor"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8B"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rfloor"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA6"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\llbracket"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA7"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\rrbracket"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}];
var ConstSet73 = setConstr(1);
var ConstSet74 = setConstr(0);
var ConstSet75 = setConstr(1);
var ConstSet76 = setConstr(1);
var ConstSet77 = setConstr(0);
var ConstSet78 = setConstr(0);
var ConstSet79 = setConstr(1);
var ConstSet80 = setConstr(0);
var ConstSet81 = setConstr(1);
var ConstSet82 = setConstr(1);
var ConstSet83 = setConstr(0);
var ConstSet84 = setConstr(1);
var ConstSet85 = setConstr(0);
var ConstSet86 = setConstr(1);
var ConstSet87 = setConstr(1);
var ConstSet88 = setConstr(0);
var ConstSet89 = setConstr(0);
var ConstSet90 = setConstr(1);
var ConstSet91 = setConstr(0);
var ConstSet92 = setConstr(1);
var ConstSet93 = setConstr(0);
var ConstSet94 = setConstr(1);
var ConstSet95 = setConstr(0);
var ConstSet96 = setConstr(1);
var ConstSet97 = setConstr(0);
var ConstSet98 = setConstr(1);
var ConstSet99 = setConstr(0);
var ConstSet100 = setConstr(1);
var ConstSet101 = setConstr(0);
var ConstSet102 = setConstr(1);
var ConstSet103 = setConstr(1);

function divInt(a_33556952, b_33556953) {
        if (b_33556953 == 0) raiseDivByZero();
    if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556952 / b_33556953);
  

  
}

function modInt(a_33556956, b_33556957) {
        if (b_33556957 == 0) raiseDivByZero();
    if (b_33556957 == -1 && a_33556956 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556956 % b_33556957);
  

  
}
        var commands_654314654 = {data: [{Field0: 773313536, Field1: makeNimstrLit("between"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: -1275910144, Field1: makeNimstrLit("varsupsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -1044255742, Field1: makeNimstrLit("boxdot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1805090809, Field1: makeNimstrLit("Complex"), Field2: {rows: [makeNimstrLit("C")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1296414729, Field1: makeNimstrLit("ddag"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -2143612919, Field1: makeNimstrLit("Box"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 690548749, Field1: makeNimstrLit("tau"), Field2: {rows: [makeNimstrLit("\xCF\x84")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -949300208, Field1: makeNimstrLit("rho"), Field2: {rows: [makeNimstrLit("\xCF\x81")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 374125587, Field1: makeNimstrLit("nearrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1939687445, Field1: makeNimstrLit("hookrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -262745065, Field1: makeNimstrLit("bigstar"), Field2: {rows: [makeNimstrLit("\xE2\x98\x85")], baseline: 0, width: 1, flag: 0}}, {Field0: 638361624, Field1: makeNimstrLit("smallint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: 1181947928, Field1: makeNimstrLit("searrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1376556004, Field1: makeNimstrLit("LaTeX"), Field2: {rows: [makeNimstrLit("L T X"), makeNimstrLit(" A E ")], baseline: 0, width: 5, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1177595934, Field1: makeNimstrLit("oint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAE")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -522425310, Field1: makeNimstrLit("geq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 482634787, Field1: makeNimstrLit("neg"), Field2: {rows: [makeNimstrLit("\xC2\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 699467812, Field1: makeNimstrLit("nvdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 385061925, Field1: makeNimstrLit("nabla"), Field2: {rows: [makeNimstrLit("\xE2\x88\x87")], baseline: 0, width: 1, flag: 0}}, {Field0: 1299890214, Field1: makeNimstrLit("subset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1847849000, Field1: makeNimstrLit("varUpsilon"), Field2: {rows: [makeNimstrLit("\xCE\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2128973781, Field1: makeNimstrLit("i"), Field2: {rows: [makeNimstrLit("\xC4\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1474680876, Field1: makeNimstrLit("uarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -1454298068, Field1: makeNimstrLit("nprec"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 598008878, Field1: makeNimstrLit("eqsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 1714570287, Field1: makeNimstrLit("emptyset"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1088214061, Field1: makeNimstrLit("nu"), Field2: {rows: [makeNimstrLit("\xCE\xBD")], baseline: 0, width: 1, flag: 1}}, {Field0: 181399601, Field1: makeNimstrLit("circledcirc"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: 444384306, Field1: makeNimstrLit("rightsquigarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 174735408, Field1: makeNimstrLit("textdaggerdbl"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -612250570, Field1: makeNimstrLit("Gamma"), Field2: {rows: [makeNimstrLit("\xCE\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: 340107318, Field1: makeNimstrLit("argmin"), Field2: {rows: [makeNimstrLit("arg\xE2\x80\x89min")], baseline: 0, width: 7, flag: 4}}, {Field0: -1880859592, Field1: makeNimstrLit("Phi"), Field2: {rows: [makeNimstrLit("\xCE\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: -601339847, Field1: makeNimstrLit("prec"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 644534329, Field1: makeNimstrLit("omega"), Field2: {rows: [makeNimstrLit("\xCF\x89")], baseline: 0, width: 1, flag: 1}}, {Field0: 299158587, Field1: makeNimstrLit("looparrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1695671356, Field1: makeNimstrLit("mid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661594566, Field1: makeNimstrLit("lozenge"), Field2: {rows: [makeNimstrLit("\xE2\x97\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -965019585, Field1: makeNimstrLit("dotsb"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: -353695681, Field1: makeNimstrLit("cos"), Field2: {rows: [makeNimstrLit("cos")], baseline: 0, width: 3, flag: 4}}, {Field0: -337936319, Field1: makeNimstrLit("xi"), Field2: {rows: [makeNimstrLit("\xCE\xBE")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -482070460, Field1: makeNimstrLit("triangleq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x9C")], baseline: 0, width: 1, flag: 2}}, {Field0: 1865025605, Field1: makeNimstrLit("upharpoonright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: -99402684, Field1: makeNimstrLit("llbracket"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -595749816, Field1: makeNimstrLit("Rrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: 444818505, Field1: makeNimstrLit("twoheadleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 949833801, Field1: makeNimstrLit("dashv"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 731926604, Field1: makeNimstrLit("Rho"), Field2: {rows: [makeNimstrLit("P")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -152946609, Field1: makeNimstrLit("Lrarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 999038032, Field1: makeNimstrLit("models"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 856149071, Field1: makeNimstrLit("liminf"), Field2: {rows: [makeNimstrLit("lim inf")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 260524116, Field1: makeNimstrLit("div"), Field2: {rows: [makeNimstrLit("\xC3\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1743740842, Field1: makeNimstrLit("varsigma"), Field2: {rows: [makeNimstrLit("\xCF\x82")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 152217691, Field1: makeNimstrLit("to"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -232435621, Field1: makeNimstrLit("leftrightarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: -1894549413, Field1: makeNimstrLit("gimel"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -977484706, Field1: makeNimstrLit("textunderscore"), Field2: {rows: [makeNimstrLit("_")], baseline: 0, width: 1, flag: 0}}, {Field0: -653542309, Field1: makeNimstrLit("hom"), Field2: {rows: [makeNimstrLit("hom")], baseline: 0, width: 3, flag: 4}}, {Field0: -836744096, Field1: makeNimstrLit("leftleftarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 778788961, Field1: makeNimstrLit("bigvee"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x81")], baseline: 0, width: 1, flag: 3}}, {Field0: 213332064, Field1: makeNimstrLit("precsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: 727641187, Field1: makeNimstrLit("minuscoloncolon"), Field2: {rows: [makeNimstrLit("::: :, \xE2\x88\x92\xE2\x88\xB7")], baseline: 0, width: 9, flag: 2}}, {Field0: -561121181, Field1: makeNimstrLit("backsim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: 282381413, Field1: makeNimstrLit("gneq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 460405857, Field1: makeNimstrLit("Vert"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1072275553, Field1: makeNimstrLit("AA"), Field2: {rows: [makeNimstrLit("\xC3\x85")], baseline: 0, width: 1, flag: 1}}, {Field0: 259182696, Field1: makeNimstrLit("gt"), Field2: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1338973290, Field1: makeNimstrLit("vdots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 749951083, Field1: makeNimstrLit("eta"), Field2: {rows: [makeNimstrLit("\xCE\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1938319251, Field1: makeNimstrLit("oiiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB0")], baseline: 0, width: 1, flag: 3}}, {Field0: 1672714350, Field1: makeNimstrLit("unrhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -587095952, Field1: makeNimstrLit("ntrianglelefteq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1364552818, Field1: makeNimstrLit("notin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: -718976910, Field1: makeNimstrLit("Sigma"), Field2: {rows: [makeNimstrLit("\xCE\xA3")], baseline: 0, width: 1, flag: 1}}, {Field0: -331592588, Field1: makeNimstrLit("lbrace"), Field2: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: -2046516107, Field1: makeNimstrLit("rArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1988400011, Field1: makeNimstrLit("gnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1748272243, Field1: makeNimstrLit("o"), Field2: {rows: [makeNimstrLit("\xC3\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 312313973, Field1: makeNimstrLit("dotsi"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 19161209, Field1: makeNimstrLit("ddagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -1893200774, Field1: makeNimstrLit("ln"), Field2: {rows: [makeNimstrLit("ln")], baseline: 0, width: 2, flag: 4}}, {Field0: -100797317, Field1: makeNimstrLit("downdownarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: -1755413380, Field1: makeNimstrLit("subsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2084440962, Field1: makeNimstrLit("parallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 977130622, Field1: makeNimstrLit("gamma"), Field2: {rows: [makeNimstrLit("\xCE\xB3")], baseline: 0, width: 1, flag: 1}}, {Field0: 1135297664, Field1: makeNimstrLit("uArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -296721281, Field1: makeNimstrLit("ddots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xB1")], baseline: 0, width: 1, flag: 0}}, {Field0: -222212994, Field1: makeNimstrLit("clubs"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: -1164247933, Field1: makeNimstrLit("boxplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1514094724, Field1: makeNimstrLit("dagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1311469697, Field1: makeNimstrLit("cotg"), Field2: {rows: [makeNimstrLit("cotg")], baseline: 0, width: 4, flag: 4}}, {Field0: 490725510, Field1: makeNimstrLit("because"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 966588552, Field1: makeNimstrLit("leftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -999892852, Field1: makeNimstrLit("ne"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: -1858303860, Field1: makeNimstrLit("iota"), Field2: {rows: [makeNimstrLit("\xCE\xB9")], baseline: 0, width: 1, flag: 1}}, {Field0: 1746366604, Field1: makeNimstrLit("rq"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 732241043, Field1: makeNimstrLit("doteq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 58222740, Field1: makeNimstrLit("sh"), Field2: {rows: [makeNimstrLit("sh")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -797167466, Field1: makeNimstrLit("gtreqqless"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1089103717, Field1: makeNimstrLit("blacktriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x97\x80")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1035649181, Field1: makeNimstrLit("Z"), Field2: {rows: [makeNimstrLit("Z")], baseline: 0, width: 1, flag: 1}}, {Field0: -2091908962, Field1: makeNimstrLit("gtreqless"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: 965928095, Field1: makeNimstrLit("Delta"), Field2: {rows: [makeNimstrLit("\xCE\x94")], baseline: 0, width: 1, flag: 1}}, {Field0: -420720480, Field1: makeNimstrLit("textasciitilde"), Field2: {rows: [makeNimstrLit("~")], baseline: 0, width: 1, flag: 0}}, {Field0: -778712927, Field1: makeNimstrLit("Join"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1789499230, Field1: makeNimstrLit("Leftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 1590319267, Field1: makeNimstrLit("ominus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 1997743268, Field1: makeNimstrLit("lt"), Field2: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 2}}, {Field0: -1355677533, Field1: makeNimstrLit("reals"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -523187031, Field1: makeNimstrLit("iint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAC")], baseline: 0, width: 1, flag: 3}}, {Field0: -1036495703, Field1: makeNimstrLit("bigsqcup"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x86")], baseline: 0, width: 1, flag: 3}}, {Field0: 128442538, Field1: makeNimstrLit("cosh"), Field2: {rows: [makeNimstrLit("cosh")], baseline: 0, width: 4, flag: 4}}, {Field0: -2114553684, Field1: makeNimstrLit("textellipsis"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1448098991, Field1: makeNimstrLit("lessapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -1900930897, Field1: makeNimstrLit("precnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1279032140, Field1: makeNimstrLit("mapsto"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 659410101, Field1: makeNimstrLit("biguplus"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x84")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 561724599, Field1: makeNimstrLit("lesseqqgtr"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1809787065, Field1: makeNimstrLit("amalg"), Field2: {rows: [makeNimstrLit("\xE2\xA8\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -37402437, Field1: makeNimstrLit("sum"), Field2: {rows: [makeNimstrLit("\xE2\x88\x91")], baseline: 0, width: 1, flag: 3}}, {Field0: 1885254844, Field1: makeNimstrLit("lor"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -1271205699, Field1: makeNimstrLit("harr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -9535301, Field1: makeNimstrLit("rrbracket"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: 784871615, Field1: makeNimstrLit("nleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 1326387387, Field1: makeNimstrLit("csc"), Field2: {rows: [makeNimstrLit("csc")], baseline: 0, width: 3, flag: 4}}, {Field0: -1490766655, Field1: makeNimstrLit("textquoteleft"), Field2: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -422736700, Field1: makeNimstrLit("oslash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 1286160581, Field1: makeNimstrLit("bigcirc"), Field2: {rows: [makeNimstrLit("\xE2\x97\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: 239622342, Field1: makeNimstrLit("twoheadrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: -142582585, Field1: makeNimstrLit("land"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -108495675, Field1: makeNimstrLit("upuparrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 1882464453, Field1: makeNimstrLit("pitchfork"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 695680199, Field1: makeNimstrLit("nsucc"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: 1379611846, Field1: makeNimstrLit("nsupseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 1519946951, Field1: makeNimstrLit("dotso"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1121218765, Field1: makeNimstrLit("rightthreetimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661306674, Field1: makeNimstrLit("Bumpeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: -1584718641, Field1: makeNimstrLit("Doteq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 2014841039, Field1: makeNimstrLit("succneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -159647535, Field1: makeNimstrLit("upsilon"), Field2: {rows: [makeNimstrLit("\xCF\x85")], baseline: 0, width: 1, flag: 1}}, {Field0: 1363198162, Field1: makeNimstrLit("curlyeqsucc"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9F")], baseline: 0, width: 1, flag: 2}}, {Field0: -884689710, Field1: makeNimstrLit("vartheta"), Field2: {rows: [makeNimstrLit("\xCF\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: -1843728178, Field1: makeNimstrLit("colon"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 0}}, {Field0: -1445616431, Field1: makeNimstrLit("surd"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9A")], baseline: 0, width: 1, flag: 0}}, {Field0: 457960649, Field1: makeNimstrLit("textbackslash"), Field2: {rows: [makeNimstrLit("\\")], baseline: 0, width: 1, flag: 0}}, {Field0: -435545897, Field1: makeNimstrLit("longrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -1222909744, Field1: makeNimstrLit("sect"), Field2: {rows: [makeNimstrLit("\xC2\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: -2121057065, Field1: makeNimstrLit("sin"), Field2: {rows: [makeNimstrLit("sin")], baseline: 0, width: 3, flag: 4}}, {Field0: -1726815019, Field1: makeNimstrLit("cth"), Field2: {rows: [makeNimstrLit("cth")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 979290334, Field1: makeNimstrLit("dots"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1312209120, Field1: makeNimstrLit("ldotp"), Field2: {rows: [makeNimstrLit(".")], baseline: 0, width: 1, flag: 2}}, {Field0: 861523169, Field1: makeNimstrLit("approxcolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88:")], baseline: 0, width: 2, flag: 2}}, {Field0: 2048828642, Field1: makeNimstrLit("upharpoonleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1199991581, Field1: makeNimstrLit("tg"), Field2: {rows: [makeNimstrLit("tg")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1893927147, Field1: makeNimstrLit("gtrdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -1959936789, Field1: makeNimstrLit("succeq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2132660463, Field1: makeNimstrLit("lrarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 488165615, Field1: makeNimstrLit("top"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA4")], baseline: 0, width: 1, flag: 0}}, {Field0: -606145295, Field1: makeNimstrLit("ll"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1807494389, Field1: makeNimstrLit("diamonds"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 192740599, Field1: makeNimstrLit("succapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -560628486, Field1: makeNimstrLit("min"), Field2: {rows: [makeNimstrLit("min")], baseline: 0, width: 3, flag: 4}}, {Field0: 1285704955, Field1: makeNimstrLit("longleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1234765051, Field1: makeNimstrLit("inf"), Field2: {rows: [makeNimstrLit("inf")], baseline: 0, width: 3, flag: 4}}, {Field0: -978306819, Field1: makeNimstrLit("projlim"), Field2: {rows: [makeNimstrLit("proj lim")], baseline: 0, width: 8, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1846918907, Field1: makeNimstrLit("impliedby"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: -1475488507, Field1: makeNimstrLit("Lleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1549492486, Field1: makeNimstrLit("equalscolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -1609219833, Field1: makeNimstrLit("blacksquare"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1089001737, Field1: makeNimstrLit("Supset"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -989102838, Field1: makeNimstrLit("preceq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1645364493, Field1: makeNimstrLit("rightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1458530034, Field1: makeNimstrLit("vartriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 1612016911, Field1: makeNimstrLit("bigoplus"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x81")], baseline: 0, width: 1, flag: 3}}, {Field0: 491266320, Field1: makeNimstrLit("lessdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 131900689, Field1: makeNimstrLit("in"), Field2: {rows: [makeNimstrLit("\xE2\x88\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -359701233, Field1: makeNimstrLit("dag"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: -187569904, Field1: makeNimstrLit("cot"), Field2: {rows: [makeNimstrLit("cot")], baseline: 0, width: 3, flag: 4}}, {Field0: -1545899756, Field1: makeNimstrLit("Game"), Field2: {rows: [makeNimstrLit("\xE2\x85\x81")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1835041046, Field1: makeNimstrLit("ntrianglerighteq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 1895304471, Field1: makeNimstrLit("gg"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: -1002856168, Field1: makeNimstrLit("exists"), Field2: {rows: [makeNimstrLit("\xE2\x88\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: 1855977753, Field1: makeNimstrLit("barwedge"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: -13362922, Field1: makeNimstrLit("varPhi"), Field2: {rows: [makeNimstrLit("\xCE\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1924908771, Field1: makeNimstrLit("Colonsim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1350079776, Field1: makeNimstrLit("ctg"), Field2: {rows: [makeNimstrLit("ctg")], baseline: 0, width: 3, flag: 4}}, {Field0: -419504863, Field1: makeNimstrLit("rightarrowtail"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1088790238, Field1: makeNimstrLit("pm"), Field2: {rows: [makeNimstrLit("\xC2\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1071612201, Field1: makeNimstrLit("oiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAF")], baseline: 0, width: 1, flag: 3}}, {Field0: -1023749846, Field1: makeNimstrLit("leq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2009879247, Field1: makeNimstrLit("unlhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 627659057, Field1: makeNimstrLit("Lambda"), Field2: {rows: [makeNimstrLit("\xCE\x9B")], baseline: 0, width: 1, flag: 1}}, {Field0: -1787755213, Field1: makeNimstrLit("oplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -184680143, Field1: makeNimstrLit("triangleright"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB9")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1440444105, Field1: makeNimstrLit("bigwedge"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x80")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -760926919, Field1: makeNimstrLit("diagdown"), Field2: {rows: [makeNimstrLit("\xE2\x95\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 535853370, Field1: makeNimstrLit("iiint"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAD")], baseline: 0, width: 1, flag: 3}}, {Field0: 1989892411, Field1: makeNimstrLit("cap"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -1078095557, Field1: makeNimstrLit("ngeqslant"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: -407561924, Field1: makeNimstrLit("arcsin"), Field2: {rows: [makeNimstrLit("arcsin")], baseline: 0, width: 6, flag: 4}}, {Field0: -490111682, Field1: makeNimstrLit("curlywedge"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1772874048, Field1: makeNimstrLit("mod"), Field2: {rows: [makeNimstrLit("bmod")], baseline: 0, width: 4, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1858042554, Field1: makeNimstrLit("square"), Field2: {rows: [makeNimstrLit("\xE2\x96\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -1357095609, Field1: makeNimstrLit("uparrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -52651705, Field1: makeNimstrLit("Diamond"), Field2: {rows: [makeNimstrLit("\xE2\x97\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -817700533, Field1: makeNimstrLit("sqsupseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1135570613, Field1: makeNimstrLit("multimap"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -30619314, Field1: makeNimstrLit("therefore"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 55854415, Field1: makeNimstrLit("smallsmile"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 468669778, Field1: makeNimstrLit("isin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1293458094, Field1: makeNimstrLit("restriction"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: 179645778, Field1: makeNimstrLit("Longleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB8")], baseline: 0, width: 1, flag: 2}}, {Field0: -970868397, Field1: makeNimstrLit("sube"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 125073749, Field1: makeNimstrLit("nsupseteqq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 353154387, Field1: makeNimstrLit("ntriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: -1536889512, Field1: makeNimstrLit("succsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1381979816, Field1: makeNimstrLit("neq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 9375058, Field1: makeNimstrLit("Re"), Field2: {rows: [makeNimstrLit("\xE2\x84\x9C")], baseline: 0, width: 1, flag: 1}}, {Field0: -1778153125, Field1: makeNimstrLit("And"), Field2: {rows: [makeNimstrLit("&")], baseline: 0, width: 1, flag: 2}}, {Field0: 2108854619, Field1: makeNimstrLit("aleph"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: -727795363, Field1: makeNimstrLit("boxtimes"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1245973854, Field1: makeNimstrLit("Larr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1574408866, Field1: makeNimstrLit("lArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -722184869, Field1: makeNimstrLit("AE"), Field2: {rows: [makeNimstrLit("\xC3\x86")], baseline: 0, width: 1, flag: 1}}, {Field0: -996418216, Field1: makeNimstrLit("infin"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9E")], baseline: 0, width: 1, flag: 0}}, {Field0: 940000598, Field1: makeNimstrLit("Dagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 432784739, Field1: makeNimstrLit("varDelta"), Field2: {rows: [makeNimstrLit("\xCE\x94")], baseline: 0, width: 1, flag: 1}}, {Field0: 1717310812, Field1: makeNimstrLit("yen"), Field2: {rows: [makeNimstrLit("\xC2\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1287358821, Field1: makeNimstrLit("varTheta"), Field2: {rows: [makeNimstrLit("\xCE\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -140368539, Field1: makeNimstrLit("blacktriangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: 1128273242, Field1: makeNimstrLit("degree"), Field2: {rows: [makeNimstrLit("\xC2\xB0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1182784865, Field1: makeNimstrLit("sup"), Field2: {rows: [makeNimstrLit("sup")], baseline: 0, width: 3, flag: 4}}, {Field0: 118212969, Field1: makeNimstrLit("eth"), Field2: {rows: [makeNimstrLit("\xC3\xB0")], baseline: 0, width: 1, flag: 1}}, {Field0: -970887830, Field1: makeNimstrLit("nsucceq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -69842580, Field1: makeNimstrLit("flat"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAD")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1415733615, Field1: makeNimstrLit("colonsim"), Field2: {rows: [makeNimstrLit(":\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: 1135244656, Field1: makeNimstrLit("nsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: -857002639, Field1: makeNimstrLit("Lsh"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1069478258, Field1: makeNimstrLit("vert"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1989233008, Field1: makeNimstrLit("thetasym"), Field2: {rows: [makeNimstrLit("\xCF\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 1164383599, Field1: makeNimstrLit("ldots"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 222810489, Field1: makeNimstrLit("sim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1532834170, Field1: makeNimstrLit("nparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 597902715, Field1: makeNimstrLit("ge"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: -1771227780, Field1: makeNimstrLit("centerdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 742864253, Field1: makeNimstrLit("sqsupset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1658382981, Field1: makeNimstrLit("Epsilon"), Field2: {rows: [makeNimstrLit("E")], baseline: 0, width: 1, flag: 1}}, {Field0: -650839681, Field1: makeNimstrLit("thickapprox"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1698018951, Field1: makeNimstrLit("Chi"), Field2: {rows: [makeNimstrLit("X")], baseline: 0, width: 1, flag: 1}}, {Field0: 428323201, Field1: makeNimstrLit("longmapsto"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1829878146, Field1: makeNimstrLit("textregistered"), Field2: {rows: [makeNimstrLit("\xC2\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -967296636, Field1: makeNimstrLit("lbrack"), Field2: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: -862051963, Field1: makeNimstrLit("nleq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 1726809478, Field1: makeNimstrLit("colonminus"), Field2: {rows: [makeNimstrLit(":\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1240069752, Field1: makeNimstrLit("divideontimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: -1122236023, Field1: makeNimstrLit("perp"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 448181641, Field1: makeNimstrLit("prime"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB2")], baseline: 0, width: 1, flag: 0}}, {Field0: -1049345653, Field1: makeNimstrLit("supsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -186772081, Field1: makeNimstrLit("lnot"), Field2: {rows: [makeNimstrLit("\xC2\xAC")], baseline: 0, width: 1, flag: 2}}, {Field0: 1143282064, Field1: makeNimstrLit("doublecup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1355421295, Field1: makeNimstrLit("forall"), Field2: {rows: [makeNimstrLit("\xE2\x88\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 780416399, Field1: makeNimstrLit("leftharpoondown"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: 851116435, Field1: makeNimstrLit("coloneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -2076267116, Field1: makeNimstrLit("leadsto"), Field2: {rows: [makeNimstrLit("\xE2\x87\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: -1095375470, Field1: makeNimstrLit("ncong"), Field2: {rows: [makeNimstrLit("\xE2\x89\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 1902103956, Field1: makeNimstrLit("varPi"), Field2: {rows: [makeNimstrLit("\xCE\xA0")], baseline: 0, width: 1, flag: 1}}, {Field0: -1114860145, Field1: makeNimstrLit("chi"), Field2: {rows: [makeNimstrLit("\xCF\x87")], baseline: 0, width: 1, flag: 1}}, {Field0: -137865835, Field1: makeNimstrLit("maltese"), Field2: {rows: [makeNimstrLit("\xE2\x9C\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1222922649, Field1: makeNimstrLit("dblcolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 142935450, Field1: makeNimstrLit("succ"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: -235331173, Field1: makeNimstrLit("smallsetminus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 153636250, Field1: makeNimstrLit("det"), Field2: {rows: [makeNimstrLit("det")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -534911583, Field1: makeNimstrLit("dashleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 331403682, Field1: makeNimstrLit("leqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 309436835, Field1: makeNimstrLit("textquoteright"), Field2: {rows: [makeNimstrLit("\xE2\x80\x99")], baseline: 0, width: 1, flag: 0}}, {Field0: 183010724, Field1: makeNimstrLit("doteqdot"), Field2: {rows: [makeNimstrLit("\xE2\x89\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -140396123, Field1: makeNimstrLit("geqslant"), Field2: {rows: [makeNimstrLit("\xE2\xA9\xBE")], baseline: 0, width: 1, flag: 2}}, {Field0: -822921819, Field1: makeNimstrLit("textquotedblleft"), Field2: {rows: [makeNimstrLit("\xE2\x80\x9C")], baseline: 0, width: 1, flag: 0}}, {Field0: 1216695713, Field1: makeNimstrLit("diagup"), Field2: {rows: [makeNimstrLit("\xE2\x95\xB1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2022730153, Field1: makeNimstrLit("beta"), Field2: {rows: [makeNimstrLit("\xCE\xB2")], baseline: 0, width: 1, flag: 1}}, {Field0: 923832745, Field1: makeNimstrLit("aa"), Field2: {rows: [makeNimstrLit("\xC3\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 483458475, Field1: makeNimstrLit("rbrack"), Field2: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: -701556308, Field1: makeNimstrLit("curvearrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -495585874, Field1: makeNimstrLit("sigma"), Field2: {rows: [makeNimstrLit("\xCF\x83")], baseline: 0, width: 1, flag: 1}}, {Field0: 937655727, Field1: makeNimstrLit("geqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -1858229842, Field1: makeNimstrLit("arctan"), Field2: {rows: [makeNimstrLit("arctan")], baseline: 0, width: 6, flag: 4}}, {Field0: -212827727, Field1: makeNimstrLit("larr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1177094581, Field1: makeNimstrLit("bigcup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x83")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 744779191, Field1: makeNimstrLit("le"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -189880903, Field1: makeNimstrLit("lll"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: -665286215, Field1: makeNimstrLit("varepsilon"), Field2: {rows: [makeNimstrLit("\xCE\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 1679721915, Field1: makeNimstrLit("ratio"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 438242753, Field1: makeNimstrLit("lfloor"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: -991056446, Field1: makeNimstrLit("smallfrown"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1690050109, Field1: makeNimstrLit("bullet"), Field2: {rows: [makeNimstrLit("\xE2\x88\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: -1543983676, Field1: makeNimstrLit("doublecap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1111792189, Field1: makeNimstrLit("varsupsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 1936615876, Field1: makeNimstrLit("Alpha"), Field2: {rows: [makeNimstrLit("A")], baseline: 0, width: 1, flag: 1}}, {Field0: -204029499, Field1: makeNimstrLit("epsilon"), Field2: {rows: [makeNimstrLit("\xCF\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 2041800129, Field1: makeNimstrLit("R"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: -1642090039, Field1: makeNimstrLit("wp"), Field2: {rows: [makeNimstrLit("\xE2\x84\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: 1401058759, Field1: makeNimstrLit("arcctg"), Field2: {rows: [makeNimstrLit("arcctg")], baseline: 0, width: 6, flag: 4}}, {Field0: 1577711051, Field1: makeNimstrLit("textbraceright"), Field2: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: -769423932, Field1: makeNimstrLit("arg"), Field2: {rows: [makeNimstrLit("arg")], baseline: 0, width: 3, flag: 4}}, {Field0: 1246567885, Field1: makeNimstrLit("pounds"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: -1440281138, Field1: makeNimstrLit("otimes"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 311781838, Field1: makeNimstrLit("copyright"), Field2: {rows: [makeNimstrLit("\xC2\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: -61369904, Field1: makeNimstrLit("intop"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: 492728785, Field1: makeNimstrLit("supset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -610245166, Field1: makeNimstrLit("Coloneqq"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7=")], baseline: 0, width: 2, flag: 2}}, {Field0: -337772077, Field1: makeNimstrLit("nmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: 1533272532, Field1: makeNimstrLit("varsubsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -481215022, Field1: makeNimstrLit("lceil"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: 2059920854, Field1: makeNimstrLit("downarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -332135977, Field1: makeNimstrLit("exist"), Field2: {rows: [makeNimstrLit("\xE2\x88\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -883057194, Field1: makeNimstrLit("imageof"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1847278041, Field1: makeNimstrLit("origof"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -2116573739, Field1: makeNimstrLit("textdegree"), Field2: {rows: [makeNimstrLit("\xC2\xB0")], baseline: 0, width: 1, flag: 0}}, {Field0: -799040039, Field1: makeNimstrLit("spadesuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: -221915691, Field1: makeNimstrLit("exp"), Field2: {rows: [makeNimstrLit("exp")], baseline: 0, width: 3, flag: 4}}, {Field0: 665108957, Field1: makeNimstrLit("coprod"), Field2: {rows: [makeNimstrLit("\xE2\x88\x90")], baseline: 0, width: 1, flag: 3}}, {Field0: 1630840286, Field1: makeNimstrLit("mho"), Field2: {rows: [makeNimstrLit("\xE2\x84\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: -830267937, Field1: makeNimstrLit("int"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAB")], baseline: 0, width: 1, flag: 3}}, {Field0: -2139331129, Field1: makeNimstrLit("limsup"), Field2: {rows: [makeNimstrLit("lim sup")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1610263010, Field1: makeNimstrLit("leftthreetimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 1114208738, Field1: makeNimstrLit("varnothing"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1077534179, Field1: makeNimstrLit("owns"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: 212498914, Field1: makeNimstrLit("Vdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -927282717, Field1: makeNimstrLit("gneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 1208823271, Field1: makeNimstrLit("swarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 1831684584, Field1: makeNimstrLit("lparen"), Field2: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: -1218212375, Field1: makeNimstrLit("curlyeqprec"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1897493989, Field1: makeNimstrLit("Nu"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: -695635477, Field1: makeNimstrLit("dashrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1443886612, Field1: makeNimstrLit("succnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 1807167981, Field1: makeNimstrLit("rang"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: 1580248552, Field1: makeNimstrLit("lambda"), Field2: {rows: [makeNimstrLit("\xCE\xBB")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -133512720, Field1: makeNimstrLit("iff"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 371297779, Field1: makeNimstrLit("circleddash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1649025525, Field1: makeNimstrLit("backepsilon"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -102348297, Field1: makeNimstrLit("circ"), Field2: {rows: [makeNimstrLit("\xE2\x88\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 738677240, Field1: makeNimstrLit("Leftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: -991826440, Field1: makeNimstrLit("nwarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1333410309, Field1: makeNimstrLit("hookleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: -879801861, Field1: makeNimstrLit("risingdotseq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 383633919, Field1: makeNimstrLit("preccurlyeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 317083140, Field1: makeNimstrLit("bigodot"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x80")], baseline: 0, width: 1, flag: 3}}, {Field0: 1446722052, Field1: makeNimstrLit("sqcap"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1995516410, Field1: makeNimstrLit("gets"), Field2: {rows: [makeNimstrLit("\xE2\x86\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1374693881, Field1: makeNimstrLit("P"), Field2: {rows: [makeNimstrLit("\xC2\xB6")], baseline: 0, width: 1, flag: 0}}, {Field0: -943235580, Field1: makeNimstrLit("ker"), Field2: {rows: [makeNimstrLit("ker")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1626003955, Field1: makeNimstrLit("prod"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8F")], baseline: 0, width: 1, flag: 3}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1262346769, Field1: makeNimstrLit("leftarrowtail"), Field2: {rows: [makeNimstrLit("\xE2\x86\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1225410029, Field1: makeNimstrLit("checkmark"), Field2: {rows: [makeNimstrLit("\xE2\x9C\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: -926707180, Field1: makeNimstrLit("image"), Field2: {rows: [makeNimstrLit("\xE2\x84\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -925142501, Field1: makeNimstrLit("curvearrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: -110310885, Field1: makeNimstrLit("equiv"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA1")], baseline: 0, width: 1, flag: 2}}, {Field0: 286669341, Field1: makeNimstrLit("Eqcolon"), Field2: {rows: [makeNimstrLit("::: :, \xE2\x88\x92\xE2\x88\xB7")], baseline: 0, width: 9, flag: 2}}, {Field0: -1745527269, Field1: makeNimstrLit("bot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 1511302685, Field1: makeNimstrLit("mathsterling"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1146067423, Field1: makeNimstrLit("hbar"), Field2: {rows: [makeNimstrLit("\xE2\x84\x8F")], baseline: 0, width: 1, flag: 1}}, {Field0: -2105364958, Field1: makeNimstrLit("subseteqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 891442723, Field1: makeNimstrLit("Theta"), Field2: {rows: [makeNimstrLit("\xCE\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -77740508, Field1: makeNimstrLit("backsimeq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 1783373347, Field1: makeNimstrLit("backprime"), Field2: {rows: [makeNimstrLit("\xE2\x80\xB5")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1891844648, Field1: makeNimstrLit("Zeta"), Field2: {rows: [makeNimstrLit("Z")], baseline: 0, width: 1, flag: 1}}, {Field0: 656361001, Field1: makeNimstrLit("darr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1435107798, Field1: makeNimstrLit("succnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 26894892, Field1: makeNimstrLit("Iota"), Field2: {rows: [makeNimstrLit("I")], baseline: 0, width: 1, flag: 1}}, {Field0: 1836716588, Field1: makeNimstrLit("zeta"), Field2: {rows: [makeNimstrLit("\xCE\xB6")], baseline: 0, width: 1, flag: 1}}, {Field0: -1691615698, Field1: makeNimstrLit("Longleftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 891450927, Field1: makeNimstrLit("rightleftharpoons"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1635509713, Field1: makeNimstrLit("Kappa"), Field2: {rows: [makeNimstrLit("K")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1001673268, Field1: makeNimstrLit("blacktriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1501875765, Field1: makeNimstrLit("Tau"), Field2: {rows: [makeNimstrLit("T")], baseline: 0, width: 1, flag: 1}}, {Field0: 1552782902, Field1: makeNimstrLit("frown"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: -1521156553, Field1: makeNimstrLit("nleqslant"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: -326324681, Field1: makeNimstrLit("varXi"), Field2: {rows: [makeNimstrLit("\xCE\x9E")], baseline: 0, width: 1, flag: 1}}, {Field0: -898344391, Field1: makeNimstrLit("j"), Field2: {rows: [makeNimstrLit("\xC8\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -503503303, Field1: makeNimstrLit("sdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1284465212, Field1: makeNimstrLit("infty"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9E")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1178661438, Field1: makeNimstrLit("alef"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1269727808, Field1: makeNimstrLit("textbardbl"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2085733821, Field1: makeNimstrLit("times"), Field2: {rows: [makeNimstrLit("\xC3\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 561956424, Field1: makeNimstrLit("eqslantgtr"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 919873098, Field1: makeNimstrLit("leftharpoonup"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 468909643, Field1: makeNimstrLit("supe"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: -1482317238, Field1: makeNimstrLit("nsubseteqq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: 1515227725, Field1: makeNimstrLit("Cap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -1300055474, Field1: makeNimstrLit("circlearrowright"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: -2128052658, Field1: makeNimstrLit("Harr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1337989708, Field1: makeNimstrLit("nshortmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA4")], baseline: 0, width: 1, flag: 2}}, {Field0: -1105456559, Field1: makeNimstrLit("sqsubseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: -2146981297, Field1: makeNimstrLit("ngeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: -1793030581, Field1: makeNimstrLit("KaTeX"), Field2: {rows: [makeNimstrLit("K T X"), makeNimstrLit(" A E ")], baseline: 0, width: 5, flag: 0}}, {Field0: 1056518736, Field1: makeNimstrLit("measuredangle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: -507666860, Field1: makeNimstrLit("textsterling"), Field2: {rows: [makeNimstrLit("\xC2\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1070808661, Field1: makeNimstrLit("lg"), Field2: {rows: [makeNimstrLit("lg")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1870681688, Field1: makeNimstrLit("heartsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 19948121, Field1: makeNimstrLit("sqsubset"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 193524313, Field1: makeNimstrLit("gvertneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA9")], baseline: 0, width: 1, flag: 2}}, {Field0: 2123680347, Field1: makeNimstrLit("ast"), Field2: {rows: [makeNimstrLit("\xE2\x88\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -1287315876, Field1: makeNimstrLit("Omega"), Field2: {rows: [makeNimstrLit("\xCE\xA9")], baseline: 0, width: 1, flag: 1}}, {Field0: 1827362397, Field1: makeNimstrLit("veebar"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBB")], baseline: 0, width: 1, flag: 2}}, {Field0: 699052638, Field1: makeNimstrLit("jmath"), Field2: {rows: [makeNimstrLit("\xC8\xB7")], baseline: 0, width: 1, flag: 1}}, {Field0: -1798255009, Field1: makeNimstrLit("ngtr"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: -1932101027, Field1: makeNimstrLit("textbraceleft"), Field2: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1924743581, Field1: makeNimstrLit("Im"), Field2: {rows: [makeNimstrLit("\xE2\x84\x91")], baseline: 0, width: 1, flag: 1}}, {Field0: 1990097508, Field1: makeNimstrLit("vartriangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: -414576028, Field1: makeNimstrLit("lim"), Field2: {rows: [makeNimstrLit("lim")], baseline: 0, width: 3, flag: 4}}, {Field0: -1006869914, Field1: makeNimstrLit("sec"), Field2: {rows: [makeNimstrLit("sec")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1552102808, Field1: makeNimstrLit("hearts"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA1")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1000346218, Field1: makeNimstrLit("wedge"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: 587550314, Field1: makeNimstrLit("rfloor"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: 729784939, Field1: makeNimstrLit("Reals"), Field2: {rows: [makeNimstrLit("R")], baseline: 0, width: 1, flag: 1}}, {Field0: 152785517, Field1: makeNimstrLit("vDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 793982576, Field1: makeNimstrLit("gcd"), Field2: {rows: [makeNimstrLit("gcd")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 458373746, Field1: makeNimstrLit("Rightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -468514189, Field1: makeNimstrLit("nLeftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1771689589, Field1: makeNimstrLit("textasciicircum"), Field2: {rows: [makeNimstrLit("^")], baseline: 0, width: 1, flag: 0}}, {Field0: 1260526198, Field1: makeNimstrLit("trianglerighteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 208938615, Field1: makeNimstrLit("theta"), Field2: {rows: [makeNimstrLit("\xCE\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 910490232, Field1: makeNimstrLit("coloneq"), Field2: {rows: [makeNimstrLit(":\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1997622910, Field1: makeNimstrLit("leqslant"), Field2: {rows: [makeNimstrLit("\xE2\xA9\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: -918172033, Field1: makeNimstrLit("looparrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: 1684372096, Field1: makeNimstrLit("precneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -425875838, Field1: makeNimstrLit("nsubseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1122263421, Field1: makeNimstrLit("imath"), Field2: {rows: [makeNimstrLit("\xEE\x84\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1607821956, Field1: makeNimstrLit("Vvdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1635205767, Field1: makeNimstrLit("bigotimes"), Field2: {rows: [makeNimstrLit("\xE2\xA8\x82")], baseline: 0, width: 1, flag: 3}}, {Field0: 2111140487, Field1: makeNimstrLit("eqcirc"), Field2: {rows: [makeNimstrLit("\xE2\x89\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 860426889, Field1: makeNimstrLit("shortparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 2}}, {Field0: 1892319880, Field1: makeNimstrLit("omicron"), Field2: {rows: [makeNimstrLit("\xCE\xBF")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1703044749, Field1: makeNimstrLit("nshortparallel"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: 845622926, Field1: makeNimstrLit("beth"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB6")], baseline: 0, width: 1, flag: 1}}, {Field0: 1257085583, Field1: makeNimstrLit("gtrsim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1417107824, Field1: makeNimstrLit("lesssim"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: 1990401680, Field1: makeNimstrLit("varSigma"), Field2: {rows: [makeNimstrLit("\xCE\xA3")], baseline: 0, width: 1, flag: 1}}, {Field0: 382401167, Field1: makeNimstrLit("textdagger"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -143540585, Field1: makeNimstrLit("eqslantless"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -315963751, Field1: makeNimstrLit("Psi"), Field2: {rows: [makeNimstrLit("\xCE\xA8")], baseline: 0, width: 1, flag: 1}}, {Field0: -49342823, Field1: makeNimstrLit("spades"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1618291044, Field1: makeNimstrLit("natnums"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: -188891491, Field1: makeNimstrLit("varpropto"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1256799583, Field1: makeNimstrLit("Coloneq"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1476694365, Field1: makeNimstrLit("rightleftarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x84")], baseline: 0, width: 1, flag: 2}}, {Field0: 90499748, Field1: makeNimstrLit("gtrapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1630717273, Field1: makeNimstrLit("textless"), Field2: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 626711210, Field1: makeNimstrLit("dotsm"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -282832210, Field1: makeNimstrLit("mathellipsis"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1055529648, Field1: makeNimstrLit("colonapprox"), Field2: {rows: [makeNimstrLit(":\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: 1306761904, Field1: makeNimstrLit("lq"), Field2: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 198273717, Field1: makeNimstrLit("textendash"), Field2: {rows: [makeNimstrLit("\xE2\x80\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: -436731210, Field1: makeNimstrLit("lhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB2")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 867351226, Field1: makeNimstrLit("vdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xA2")], baseline: 0, width: 1, flag: 2}}, {Field0: 77870779, Field1: makeNimstrLit("Finv"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB2")], baseline: 0, width: 1, flag: 1}}, {Field0: -1633238340, Field1: makeNimstrLit("sqcup"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1012737726, Field1: makeNimstrLit("setminus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x96")], baseline: 0, width: 1, flag: 2}}, {Field0: 1166910142, Field1: makeNimstrLit("O"), Field2: {rows: [makeNimstrLit("\xC3\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: -788264256, Field1: makeNimstrLit("lrArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1404075712, Field1: makeNimstrLit("succcurlyeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xBD")], baseline: 0, width: 1, flag: 2}}, {Field0: -708164930, Field1: makeNimstrLit("real"), Field2: {rows: [makeNimstrLit("\xE2\x84\x9C")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1582218556, Field1: makeNimstrLit("rbrace"), Field2: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: -1623751995, Field1: makeNimstrLit("rhd"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 2118272708, Field1: makeNimstrLit("rangle"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2128061129, Field1: makeNimstrLit("implies"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -128053556, Field1: makeNimstrLit("rarr"), Field2: {rows: [makeNimstrLit("\xE2\x86\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: 1485563597, Field1: makeNimstrLit("intercal"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: -1783832884, Field1: makeNimstrLit("tan"), Field2: {rows: [makeNimstrLit("tan")], baseline: 0, width: 3, flag: 4}}, {Field0: -508692785, Field1: makeNimstrLit("natural"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: -1571214640, Field1: makeNimstrLit("simeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: 1649711825, Field1: makeNimstrLit("sphericalangle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 968579795, Field1: makeNimstrLit("arctg"), Field2: {rows: [makeNimstrLit("arctg")], baseline: 0, width: 5, flag: 4}}, {Field0: -2087052588, Field1: makeNimstrLit("S"), Field2: {rows: [makeNimstrLit("\xC2\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1940638425, Field1: makeNimstrLit("triangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBD")], baseline: 0, width: 1, flag: 0}}, {Field0: 444881626, Field1: makeNimstrLit("nRightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 151659227, Field1: makeNimstrLit("complement"), Field2: {rows: [makeNimstrLit("\xE2\x88\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: -1693292837, Field1: makeNimstrLit("downharpoonleft"), Field2: {rows: [makeNimstrLit("\xE2\x87\x83")], baseline: 0, width: 1, flag: 2}}, {Field0: -4439333, Field1: makeNimstrLit("nLeftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: -1212450082, Field1: makeNimstrLit("ch"), Field2: {rows: [makeNimstrLit("ch")], baseline: 0, width: 2, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1868119328, Field1: makeNimstrLit("nrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: -318407968, Field1: makeNimstrLit("thicksim"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC")], baseline: 0, width: 1, flag: 2}}, {Field0: 345991905, Field1: makeNimstrLit("Pi"), Field2: {rows: [makeNimstrLit("\xCE\xA0")], baseline: 0, width: 1, flag: 1}}, {Field0: 631217891, Field1: makeNimstrLit("eqcolon"), Field2: {rows: [makeNimstrLit(">>> >, \xE2\x88\xB9")], baseline: 0, width: 8, flag: 2}}, {Field0: 1697382115, Field1: makeNimstrLit("varkappa"), Field2: {rows: [makeNimstrLit("\xCF\xB0")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 497549031, Field1: makeNimstrLit("ell"), Field2: {rows: [makeNimstrLit("\xE2\x84\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: -1187357976, Field1: makeNimstrLit("mu"), Field2: {rows: [makeNimstrLit("\xCE\xBC")], baseline: 0, width: 1, flag: 1}}, {Field0: -1972195609, Field1: makeNimstrLit("dim"), Field2: {rows: [makeNimstrLit("dim")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1516935444, Field1: makeNimstrLit("lnapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1945859345, Field1: makeNimstrLit("OE"), Field2: {rows: [makeNimstrLit("\xC5\x92")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1631707890, Field1: makeNimstrLit("textbar"), Field2: {rows: [makeNimstrLit("|")], baseline: 0, width: 1, flag: 0}}, {Field0: 156381939, Field1: makeNimstrLit("TeX"), Field2: {rows: [makeNimstrLit("T X"), makeNimstrLit(" E ")], baseline: 0, width: 3, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -737534219, Field1: makeNimstrLit("ltimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: -567946507, Field1: makeNimstrLit("Rarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: -189001994, Field1: makeNimstrLit("vartriangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 2}}, {Field0: 1167593205, Field1: makeNimstrLit("varPsi"), Field2: {rows: [makeNimstrLit("\xCE\xA8")], baseline: 0, width: 1, flag: 1}}, {Field0: 820849399, Field1: makeNimstrLit("psi"), Field2: {rows: [makeNimstrLit("\xCF\x88")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -728388867, Field1: makeNimstrLit("npreceq"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1786403073, Field1: makeNimstrLit("lneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -44866816, Field1: makeNimstrLit("Eta"), Field2: {rows: [makeNimstrLit("H")], baseline: 0, width: 1, flag: 1}}, {Field0: -1857517823, Field1: makeNimstrLit("gtrless"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 233755396, Field1: makeNimstrLit("Bbbk"), Field2: {rows: [makeNimstrLit("k")], baseline: 0, width: 1, flag: 1}}, {Field0: -1970031867, Field1: makeNimstrLit("vee"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 839637767, Field1: makeNimstrLit("lang"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1432461559, Field1: makeNimstrLit("vcentcolon"), Field2: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -944697589, Field1: makeNimstrLit("varrho"), Field2: {rows: [makeNimstrLit("\xCF\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1484265230, Field1: makeNimstrLit("varpi"), Field2: {rows: [makeNimstrLit("\xCF\x96")], baseline: 0, width: 1, flag: 1}}, {Field0: 93506319, Field1: makeNimstrLit("hslash"), Field2: {rows: [makeNimstrLit("\xE2\x84\x8F")], baseline: 0, width: 1, flag: 1}}, {Field0: 723635984, Field1: makeNimstrLit("sinh"), Field2: {rows: [makeNimstrLit("sinh")], baseline: 0, width: 4, flag: 4}}, {Field0: -808573167, Field1: makeNimstrLit("mp"), Field2: {rows: [makeNimstrLit("\xE2\x88\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -831156463, Field1: makeNimstrLit("nVdash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1011195116, Field1: makeNimstrLit("leftrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -316506345, Field1: makeNimstrLit("rceil"), Field2: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1905710309, Field1: makeNimstrLit("Rsh"), Field2: {rows: [makeNimstrLit("\xE2\x86\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1628249312, Field1: makeNimstrLit("Colonapprox"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -2032217310, Field1: makeNimstrLit("shortmid"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: -1282881757, Field1: makeNimstrLit("wr"), Field2: {rows: [makeNimstrLit("\xE2\x89\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 201751332, Field1: makeNimstrLit("circledR"), Field2: {rows: [makeNimstrLit("\xC2\xAE")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1853396185, Field1: makeNimstrLit("ni"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -1194945752, Field1: makeNimstrLit("Updownarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -2121473240, Field1: makeNimstrLit("cosec"), Field2: {rows: [makeNimstrLit("cosec")], baseline: 0, width: 5, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -418823380, Field1: makeNimstrLit("delta"), Field2: {rows: [makeNimstrLit("\xCE\xB4")], baseline: 0, width: 1, flag: 1}}, {Field0: 64160556, Field1: makeNimstrLit("diamondsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA2")], baseline: 0, width: 1, flag: 0}}, {Field0: 1405992750, Field1: makeNimstrLit("eqqcolon"), Field2: {rows: [makeNimstrLit("\xE2\x89\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: 1068375855, Field1: makeNimstrLit("Uarr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 1201711918, Field1: makeNimstrLit("lvertneqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: 129810225, Field1: makeNimstrLit("sub"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -616156365, Field1: makeNimstrLit("Upsilon"), Field2: {rows: [makeNimstrLit("\xCE\xA5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 965596985, Field1: makeNimstrLit("Cup"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 377626426, Field1: makeNimstrLit("dotplus"), Field2: {rows: [makeNimstrLit("\xE2\x88\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1447029955, Field1: makeNimstrLit("alpha"), Field2: {rows: [makeNimstrLit("\xCE\xB1")], baseline: 0, width: 1, flag: 1}}, {Field0: 1388739390, Field1: makeNimstrLit("cdot"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -1317677249, Field1: makeNimstrLit("weierp"), Field2: {rows: [makeNimstrLit("\xE2\x84\x98")], baseline: 0, width: 1, flag: 1}}, {Field0: 126402368, Field1: makeNimstrLit("boxminus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9F")], baseline: 0, width: 1, flag: 2}}, {Field0: 927969088, Field1: makeNimstrLit("supseteqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: -978777278, Field1: makeNimstrLit("propto"), Field2: {rows: [makeNimstrLit("\xE2\x88\x9D")], baseline: 0, width: 1, flag: 2}}, {Field0: 2044716865, Field1: makeNimstrLit("ss"), Field2: {rows: [makeNimstrLit("\xC3\x9F")], baseline: 0, width: 1, flag: 1}}, {Field0: -838084796, Field1: makeNimstrLit("lessgtr"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB6")], baseline: 0, width: 1, flag: 2}}, {Field0: -829358270, Field1: makeNimstrLit("textquotedblright"), Field2: {rows: [makeNimstrLit("\xE2\x80\x9D")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -389900469, Field1: makeNimstrLit("textdollar"), Field2: {rows: [makeNimstrLit("$")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 598895437, Field1: makeNimstrLit("minuscolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1181199183, Field1: makeNimstrLit("triangleleft"), Field2: {rows: [makeNimstrLit("\xE2\x97\x83")], baseline: 0, width: 1, flag: 0}}, {Field0: -582685872, Field1: makeNimstrLit("Darr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: -1009115312, Field1: makeNimstrLit("minuso"), Field2: {rows: [makeNimstrLit("\xE2\xA6\xB5")], baseline: 0, width: 1, flag: 0}}, {Field0: 499530577, Field1: makeNimstrLit("plim"), Field2: {rows: [makeNimstrLit("plim")], baseline: 0, width: 4, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -114982060, Field1: makeNimstrLit("nleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: -1058309292, Field1: makeNimstrLit("smile"), Field2: {rows: [makeNimstrLit("\xE2\x8C\xA3")], baseline: 0, width: 1, flag: 2}}, {Field0: 437992278, Field1: makeNimstrLit("precapprox"), Field2: {rows: [makeNimstrLit("\xE2\xAA\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: 1034010455, Field1: makeNimstrLit("hArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: 1814794072, Field1: makeNimstrLit("nexists"), Field2: {rows: [makeNimstrLit("\xE2\x88\x84")], baseline: 0, width: 1, flag: 2}}, {Field0: -848168103, Field1: makeNimstrLit("simcoloncolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: -2083237030, Field1: makeNimstrLit("trianglelefteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xB4")], baseline: 0, width: 1, flag: 2}}, {Field0: 624996184, Field1: makeNimstrLit("nVDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAF")], baseline: 0, width: 1, flag: 2}}, {Field0: -508762280, Field1: makeNimstrLit("varGamma"), Field2: {rows: [makeNimstrLit("\xCE\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: -582062244, Field1: makeNimstrLit("pi"), Field2: {rows: [makeNimstrLit("\xCF\x80")], baseline: 0, width: 1, flag: 1}}, {Field0: 485069654, Field1: makeNimstrLit("triangle"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1089835168, Field1: makeNimstrLit("approxeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1376821406, Field1: makeNimstrLit("bigtriangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBD")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1165389980, Field1: makeNimstrLit("downharpoonright"), Field2: {rows: [makeNimstrLit("\xE2\x87\x82")], baseline: 0, width: 1, flag: 2}}, {Field0: -498708635, Field1: makeNimstrLit("supseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 1390254950, Field1: makeNimstrLit("varOmega"), Field2: {rows: [makeNimstrLit("\xCE\xA9")], baseline: 0, width: 1, flag: 1}}, {Field0: 113278823, Field1: makeNimstrLit("cup"), Field2: {rows: [makeNimstrLit("\xE2\x88\xAA")], baseline: 0, width: 1, flag: 2}}, {Field0: 775896934, Field1: makeNimstrLit("cnums"), Field2: {rows: [makeNimstrLit("C")], baseline: 0, width: 1, flag: 1}}, {Field0: -1421636764, Field1: makeNimstrLit("angle"), Field2: {rows: [makeNimstrLit("\xE2\x88\xA0")], baseline: 0, width: 1, flag: 0}}, {Field0: 1368969066, Field1: makeNimstrLit("Omicron"), Field2: {rows: [makeNimstrLit("O")], baseline: 0, width: 1, flag: 1}}, {Field0: -1825022101, Field1: makeNimstrLit("dotsc"), Field2: {rows: [makeNimstrLit("\xE2\x80\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: 1049816935, Field1: makeNimstrLit("sharp"), Field2: {rows: [makeNimstrLit("\xE2\x99\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -660215953, Field1: makeNimstrLit("blacktriangledown"), Field2: {rows: [makeNimstrLit("\xE2\x96\xBC")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 701244274, Field1: makeNimstrLit("empty"), Field2: {rows: [makeNimstrLit("\xE2\x88\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -164919438, Field1: makeNimstrLit("gnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA7")], baseline: 0, width: 1, flag: 2}}, {Field0: -1450188941, Field1: makeNimstrLit("star"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x86")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1706303621, Field1: makeNimstrLit("dArr"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -250139779, Field1: makeNimstrLit("textemdash"), Field2: {rows: [makeNimstrLit("\xE2\x80\x94")], baseline: 0, width: 1, flag: 0}}, {Field0: 1726374782, Field1: makeNimstrLit("circledS"), Field2: {rows: [makeNimstrLit("\xE2\x93\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: 268964735, Field1: makeNimstrLit("circledast"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x9B")], baseline: 0, width: 1, flag: 2}}, {Field0: -722765953, Field1: makeNimstrLit("fallingdotseq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 978164610, Field1: makeNimstrLit("nless"), Field2: {rows: [makeNimstrLit("\xE2\x89\xAE")], baseline: 0, width: 1, flag: 2}}, {Field0: 1202677635, Field1: makeNimstrLit("rparen"), Field2: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: 1073095556, Field1: makeNimstrLit("phi"), Field2: {rows: [makeNimstrLit("\xCF\x95")], baseline: 0, width: 1, flag: 1}}, {Field0: -902326395, Field1: makeNimstrLit("arccos"), Field2: {rows: [makeNimstrLit("arccos")], baseline: 0, width: 6, flag: 4}}, {Field0: 104139654, Field1: makeNimstrLit("doublebarwedge"), Field2: {rows: [makeNimstrLit("\xE2\xA9\x9E")], baseline: 0, width: 1, flag: 2}}, {Field0: -296343675, Field1: makeNimstrLit("tanh"), Field2: {rows: [makeNimstrLit("tanh")], baseline: 0, width: 4, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1878301815, Field1: makeNimstrLit("rightharpoonup"), Field2: {rows: [makeNimstrLit("\xE2\x87\x80")], baseline: 0, width: 1, flag: 2}}, {Field0: 1586769802, Field1: makeNimstrLit("llless"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x98")], baseline: 0, width: 1, flag: 2}}, {Field0: 1991520139, Field1: makeNimstrLit("alefsym"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB5")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 773731214, Field1: makeNimstrLit("subsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 1642151823, Field1: makeNimstrLit("supsetneqq"), Field2: {rows: [makeNimstrLit("\xE2\xAB\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -399796335, Field1: makeNimstrLit("curlyvee"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1863581586, Field1: makeNimstrLit("clubsuit"), Field2: {rows: [makeNimstrLit("\xE2\x99\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: 1089098643, Field1: makeNimstrLit("circeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: -983711852, Field1: makeNimstrLit("bumpeq"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8F")], baseline: 0, width: 1, flag: 2}}, {Field0: 626165651, Field1: makeNimstrLit("cdots"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAF")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -135784553, Field1: makeNimstrLit("rightrightarrows"), Field2: {rows: [makeNimstrLit("\xE2\x87\x89")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -347878501, Field1: makeNimstrLit("rightharpoondown"), Field2: {rows: [makeNimstrLit("\xE2\x87\x81")], baseline: 0, width: 1, flag: 2}}, {Field0: 1961500571, Field1: makeNimstrLit("Subset"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x90")], baseline: 0, width: 1, flag: 2}}, {Field0: -1325636708, Field1: makeNimstrLit("partial"), Field2: {rows: [makeNimstrLit("\xE2\x88\x82")], baseline: 0, width: 1, flag: 1}}, {Field0: -1030514789, Field1: makeNimstrLit("max"), Field2: {rows: [makeNimstrLit("max")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -647533664, Field1: makeNimstrLit("circlearrowleft"), Field2: {rows: [makeNimstrLit("\xE2\x86\xBA")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2088133539, Field1: makeNimstrLit("notni"), Field2: {rows: [makeNimstrLit("\xE2\x88\x8C")], baseline: 0, width: 1, flag: 2}}, {Field0: -1130670173, Field1: makeNimstrLit("Uparrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x91")], baseline: 0, width: 1, flag: 2}}, {Field0: 1251576741, Field1: makeNimstrLit("asymp"), Field2: {rows: [makeNimstrLit("\xE2\x89\x8D")], baseline: 0, width: 1, flag: 2}}, {Field0: -949496923, Field1: makeNimstrLit("varLambda"), Field2: {rows: [makeNimstrLit("\xCE\x9B")], baseline: 0, width: 1, flag: 1}}, {Field0: 508142500, Field1: makeNimstrLit("textgreater"), Field2: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 0}}, {Field0: -1519553629, Field1: makeNimstrLit("blacklozenge"), Field2: {rows: [makeNimstrLit("\xE2\xA7\xAB")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -902478933, Field1: makeNimstrLit("longleftarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB5")], baseline: 0, width: 1, flag: 2}}, {Field0: 2018705324, Field1: makeNimstrLit("digamma"), Field2: {rows: [makeNimstrLit("\xCF\x9D")], baseline: 0, width: 1, flag: 1}}, {Field0: -1187603539, Field1: makeNimstrLit("bigcap"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x82")], baseline: 0, width: 1, flag: 3}}, {Field0: 1543318445, Field1: makeNimstrLit("daleth"), Field2: {rows: [makeNimstrLit("\xE2\x84\xB8")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -433189967, Field1: makeNimstrLit("N"), Field2: {rows: [makeNimstrLit("N")], baseline: 0, width: 1, flag: 1}}, {Field0: 924587953, Field1: makeNimstrLit("diamond"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x84")], baseline: 0, width: 1, flag: 0}}, {Field0: 1813402546, Field1: makeNimstrLit("coth"), Field2: {rows: [makeNimstrLit("coth")], baseline: 0, width: 4, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -817291339, Field1: makeNimstrLit("updownarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\x95")], baseline: 0, width: 1, flag: 2}}, {Field0: -769796170, Field1: makeNimstrLit("kappa"), Field2: {rows: [makeNimstrLit("\xCE\xBA")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1976659016, Field1: makeNimstrLit("rtimes"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1928334405, Field1: makeNimstrLit("varsubsetneq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8A")], baseline: 0, width: 1, flag: 2}}, {Field0: -31274052, Field1: makeNimstrLit("Eqqcolon"), Field2: {rows: [makeNimstrLit("=\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: 1465733053, Field1: makeNimstrLit("approx"), Field2: {rows: [makeNimstrLit("\xE2\x89\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -166071362, Field1: makeNimstrLit("subseteq"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x86")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1005448255, Field1: makeNimstrLit("ae"), Field2: {rows: [makeNimstrLit("\xC3\xA6")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -774891575, Field1: makeNimstrLit("Downarrow"), Field2: {rows: [makeNimstrLit("\xE2\x87\x93")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 886597579, Field1: makeNimstrLit("deg"), Field2: {rows: [makeNimstrLit("deg")], baseline: 0, width: 3, flag: 4}}, {Field0: 747939788, Field1: makeNimstrLit("argmax"), Field2: {rows: [makeNimstrLit("arg\xE2\x80\x89max")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 2054813647, Field1: makeNimstrLit("bigtriangleup"), Field2: {rows: [makeNimstrLit("\xE2\x96\xB3")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -288939055, Field1: makeNimstrLit("gggtr"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -996883499, Field1: makeNimstrLit("nleqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB0")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 1772959704, Field1: makeNimstrLit("lneq"), Field2: {rows: [makeNimstrLit("\xE2\xAA\x87")], baseline: 0, width: 1, flag: 2}}, {Field0: 1375335385, Field1: makeNimstrLit("leftrightsquigarrow"), Field2: {rows: [makeNimstrLit("\xE2\x86\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 1312613338, Field1: makeNimstrLit("nvDash"), Field2: {rows: [makeNimstrLit("\xE2\x8A\xAD")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 846101468, Field1: makeNimstrLit("ntriangleright"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xAB")], baseline: 0, width: 1, flag: 2}}, {Field0: -2075499555, Field1: makeNimstrLit("precnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA8")], baseline: 0, width: 1, flag: 2}}, {Field0: -2025091106, Field1: makeNimstrLit("cdotp"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: -606648354, Field1: makeNimstrLit("Longrightarrow"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xB9")], baseline: 0, width: 1, flag: 2}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1515557918, Field1: makeNimstrLit("uplus"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x8E")], baseline: 0, width: 1, flag: 2}}, {Field0: 1908426722, Field1: makeNimstrLit("Mu"), Field2: {rows: [makeNimstrLit("M")], baseline: 0, width: 1, flag: 1}}, {Field0: -2045698077, Field1: makeNimstrLit("Pr"), Field2: {rows: [makeNimstrLit("Pr")], baseline: 0, width: 2, flag: 4}}, {Field0: -757661723, Field1: makeNimstrLit("th"), Field2: {rows: [makeNimstrLit("th")], baseline: 0, width: 2, flag: 4}}, {Field0: 1227092966, Field1: makeNimstrLit("lnsim"), Field2: {rows: [makeNimstrLit("\xE2\x8B\xA6")], baseline: 0, width: 1, flag: 2}}, {Field0: -573794331, Field1: makeNimstrLit("injlim"), Field2: {rows: [makeNimstrLit("inj\xE2\x80\x89lim")], baseline: 0, width: 7, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -810559509, Field1: makeNimstrLit("cong"), Field2: {rows: [makeNimstrLit("\xE2\x89\x85")], baseline: 0, width: 1, flag: 2}}, {Field0: 1662921708, Field1: makeNimstrLit("Xi"), Field2: {rows: [makeNimstrLit("\xCE\x9E")], baseline: 0, width: 1, flag: 1}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -753883154, Field1: makeNimstrLit("varphi"), Field2: {rows: [makeNimstrLit("\xCF\x86")], baseline: 0, width: 1, flag: 1}}, {Field0: 783613935, Field1: makeNimstrLit("leftrightharpoons"), Field2: {rows: [makeNimstrLit("\xE2\x87\x8B")], baseline: 0, width: 1, flag: 2}}, {Field0: -826565649, Field1: makeNimstrLit("lesseqgtr"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x9A")], baseline: 0, width: 1, flag: 2}}, {Field0: -2057048081, Field1: makeNimstrLit("ggg"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: -1661005840, Field1: makeNimstrLit("simcolon"), Field2: {rows: [makeNimstrLit("\xE2\x88\xBC:")], baseline: 0, width: 2, flag: 2}}, {Field0: 816394223, Field1: makeNimstrLit("ngeqq"), Field2: {rows: [makeNimstrLit("\xE2\x89\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 1170508784, Field1: makeNimstrLit("langle"), Field2: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}, {Field0: -1927886855, Field1: makeNimstrLit("Beta"), Field2: {rows: [makeNimstrLit("B")], baseline: 0, width: 1, flag: 1}}, {Field0: -1420442630, Field1: makeNimstrLit("bowtie"), Field2: {rows: [makeNimstrLit("\xE2\x8B\x88")], baseline: 0, width: 1, flag: 2}}, {Field0: -1390482437, Field1: makeNimstrLit("odot"), Field2: {rows: [makeNimstrLit("\xE2\x8A\x99")], baseline: 0, width: 1, flag: 2}}, {Field0: 1269585915, Field1: makeNimstrLit("plusmn"), Field2: {rows: [makeNimstrLit("\xC2\xB1")], baseline: 0, width: 1, flag: 2}}, {Field0: 1408007165, Field1: makeNimstrLit("oe"), Field2: {rows: [makeNimstrLit("\xC5\x93")], baseline: 0, width: 1, flag: 1}}, {Field0: 1811268606, Field1: makeNimstrLit("log"), Field2: {rows: [makeNimstrLit("log")], baseline: 0, width: 3, flag: 4}}, {Field0: 0, Field1: [], Field2: {rows: [], baseline: 0, width: 0, flag: 0}}], counter: 653};
    var nonCommands_654314678 = [{Field0: makeNimstrLit("+"), Field1: {rows: [makeNimstrLit("+")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("-"), Field1: {rows: [makeNimstrLit("\xE2\x88\x92")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("*"), Field1: {rows: [makeNimstrLit("\xE2\x88\x97")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("/"), Field1: {rows: [makeNimstrLit("/")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("="), Field1: {rows: [makeNimstrLit("=")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("<"), Field1: {rows: [makeNimstrLit("<")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit(">"), Field1: {rows: [makeNimstrLit(">")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("\x1Bqualscoloncolon"), Field1: {rows: [makeNimstrLit("=\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x07pproxcoloncolon"), Field1: {rows: [makeNimstrLit("\xE2\x89\x88\xE2\x88\xB7")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonapprox"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x89\x88")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonminus"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\x92")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Dolonequals"), Field1: {rows: [makeNimstrLit("\xE2\x89\x94")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonequals"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7=")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolonsim"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7\xE2\x88\xBC")], baseline: 0, width: 2, flag: 2}}, {Field0: makeNimstrLit("\x0Doloncolon"), Field1: {rows: [makeNimstrLit("\xE2\x88\xB7")], baseline: 0, width: 1, flag: 2}}, {Field0: makeNimstrLit("("), Field1: {rows: [makeNimstrLit("(")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(")"), Field1: {rows: [makeNimstrLit(")")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("["), Field1: {rows: [makeNimstrLit("[")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("]"), Field1: {rows: [makeNimstrLit("]")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\{"), Field1: {rows: [makeNimstrLit("{")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\}"), Field1: {rows: [makeNimstrLit("}")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA8"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA8")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA9"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA9")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA3")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\|"), Field1: {rows: [makeNimstrLit("\xE2\x88\xA5")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x88"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x88")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x89"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x89")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8A"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8A")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x8C\x8B"), Field1: {rows: [makeNimstrLit("\xE2\x8C\x8B")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA6"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA6")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\xE2\x9F\xA7"), Field1: {rows: [makeNimstrLit("\xE2\x9F\xA7")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit(","), Field1: {rows: [makeNimstrLit(",")], baseline: 0, width: 1, flag: 8}}, {Field0: makeNimstrLit(":"), Field1: {rows: [makeNimstrLit(":")], baseline: 0, width: 1, flag: 8}}, {Field0: makeNimstrLit("\\%"), Field1: {rows: [makeNimstrLit("%")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\#"), Field1: {rows: [makeNimstrLit("#")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\&"), Field1: {rows: [makeNimstrLit("&")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\_"), Field1: {rows: [makeNimstrLit("_")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\--"), Field1: {rows: [makeNimstrLit("\xE2\x80\x93")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\---"), Field1: {rows: [makeNimstrLit("\xE2\x80\x94")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("`"), Field1: {rows: [makeNimstrLit("\xE2\x80\x98")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\""), Field1: {rows: [makeNimstrLit("\"")], baseline: 0, width: 1, flag: 0}}, {Field0: makeNimstrLit("\\$"), Field1: {rows: [makeNimstrLit("$")], baseline: 0, width: 1, flag: 0}}];
    var simpleDiacritics_654311767 = [{Field0: makeNimstrLit("\\acute"), Field1: {Field0: makeNimstrLit("\xCC\x81"), Field1: makeNimstrLit("\xCB\x8F")}}, {Field0: makeNimstrLit("\\bar"), Field1: {Field0: makeNimstrLit("\xCC\x84"), Field1: makeNimstrLit("_")}}, {Field0: makeNimstrLit("\\breve"), Field1: {Field0: makeNimstrLit("\xCC\x86"), Field1: makeNimstrLit("\xE2\x8F\x91")}}, {Field0: makeNimstrLit("\\check"), Field1: {Field0: makeNimstrLit("\xCC\x8C"), Field1: makeNimstrLit("\xCB\x87")}}, {Field0: makeNimstrLit("\\dot"), Field1: {Field0: makeNimstrLit("\xCC\x87"), Field1: makeNimstrLit(".")}}, {Field0: makeNimstrLit("\\ddot"), Field1: {Field0: makeNimstrLit("\xCC\x88"), Field1: makeNimstrLit("\xC2\xA8")}}, {Field0: makeNimstrLit("\\grave"), Field1: {Field0: makeNimstrLit("\xCC\x80"), Field1: makeNimstrLit("\xCB\x8E")}}, {Field0: makeNimstrLit("\\hat"), Field1: {Field0: makeNimstrLit("\xCC\x82"), Field1: makeNimstrLit("\xEA\x9E\x88")}}, {Field0: makeNimstrLit("\\not"), Field1: {Field0: makeNimstrLit("\xCC\xB8"), Field1: makeNimstrLit("/")}}, {Field0: makeNimstrLit("\\tilde"), Field1: {Field0: makeNimstrLit("\xCC\x83"), Field1: makeNimstrLit("\xCB\xB7")}}, {Field0: makeNimstrLit("\\vec"), Field1: {Field0: makeNimstrLit("\xE2\x83\x97"), Field1: makeNimstrLit("\xE2\x86\x92")}}];
var ConstSet104 = setConstr(1);
var ConstSet105 = setConstr(0);
var ConstSet106 = setConstr(1);
var ConstSet107 = setConstr(1);
var ConstSet108 = setConstr(0);
var ConstSet109 = setConstr(1);
var ConstSet110 = setConstr(1);
var ConstSet111 = setConstr(0);
var ConstSet112 = setConstr(60, 62, 94);
var ConstSet113 = setConstr(60, 62, 94);
var ConstSet114 = setConstr(45, 43, 32);
var ConstSet115 = setConstr([48, 57]);
var ConstSet116 = setConstr([48, 57]);
var ConstSet117 = setConstr([48, 57]);
var ConstSet118 = setConstr([65, 90], [97, 122]);
    var alignFuncs_671089564 = [HEX3Aanonymous_671089552, HEX3Aanonymous_671089556, HEX3Aanonymous_671089560];
var ConstSet119 = setConstr(1);
var ConstSet120 = setConstr(1);
var ConstSet121 = setConstr(0);
var ConstSet122 = setConstr(1);
var ConstSet123 = setConstr(1);
var ConstSet124 = setConstr(1);
var ConstSet125 = setConstr(1);
var ConstSet126 = setConstr(0);
var ConstSet127 = setConstr(0);
      var delimiterParts_637535608 = {data: [{Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 132032417, Field1: makeNimstrLit("\xE2\x88\xA5"), Field2: {Field0: makeNimstrLit("\xE2\x95\x91"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x91")}}, {Field0: 1632932802, Field1: makeNimstrLit("["), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA1"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA3")}}, {Field0: -289087198, Field1: makeNimstrLit("\xE2\x9F\xA7"), Field2: {Field0: makeNimstrLit("\xE2\x95\x96"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x9C")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -436772347, Field1: makeNimstrLit(")"), Field2: {Field0: makeNimstrLit("\xE2\x8E\x9E"), Field1: makeNimstrLit("\xE2\x8E\x9F"), Field2: makeNimstrLit("\xE2\x8E\xA0")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -1827680438, Field1: makeNimstrLit("\xE2\x8C\x88"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA1"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA2")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 501150701, Field1: makeNimstrLit("("), Field2: {Field0: makeNimstrLit("\xE2\x8E\x9B"), Field1: makeNimstrLit("\xE2\x8E\x9C"), Field2: makeNimstrLit("\xE2\x8E\x9D")}}, {Field0: 243936301, Field1: makeNimstrLit("\xE2\x8C\x8A"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA2"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA3")}}, {Field0: 1380037103, Field1: makeNimstrLit("\xE2\x9F\xA6"), Field2: {Field0: makeNimstrLit("\xE2\x95\x93"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x99")}}, {Field0: 1862135120, Field1: makeNimstrLit("]"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA4"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA6")}}, {Field0: -696588431, Field1: makeNimstrLit("\xE2\x8C\x8B"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA5"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA6")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -1377921419, Field1: makeNimstrLit("\xE2\x88\xA3"), Field2: {Field0: makeNimstrLit("\xE2\x94\x82"), Field1: makeNimstrLit("\xE2\x94\x82"), Field2: makeNimstrLit("\xE2\x94\x82")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -2091933701, Field1: makeNimstrLit("\xE2\x8C\x89"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA4"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA5")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}], counter: 12};
var ConstSet128 = setConstr(1);
var ConstSet129 = setConstr(1);
var ConstSet130 = setConstr(0);
var ConstSet131 = setConstr(1);
var ConstSet132 = setConstr(1);
var ConstSet133 = setConstr(0);
var ConstSet134 = setConstr(1);
var ConstSet135 = setConstr(1);
var ConstSet136 = setConstr(0);
var ConstSet137 = setConstr(1);
var ConstSet138 = setConstr(1);
var ConstSet139 = setConstr(0);
var ConstSet140 = setConstr(1);
var ConstSet141 = setConstr(0);
          var subscripts_654313146 = {data: [{Field0: -1651658498, Field1: 45, Field2: makeNimstrLit("\xE2\x82\x8B")}, {Field0: 340567103, Field1: 101, Field2: makeNimstrLit("\xE2\x82\x91")}, {Field0: -1262851587, Field1: 109, Field2: makeNimstrLit("\xE2\x82\x98")}, {Field0: -1852580415, Field1: 961, Field2: makeNimstrLit("\xE1\xB5\xA8")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 45316872, Field1: 54, Field2: makeNimstrLit("\xE2\x82\x86")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1131254452, Field1: 55, Field2: makeNimstrLit("\xE2\x82\x87")}, {Field0: 131599437, Field1: 118, Field2: makeNimstrLit("\xE1\xB5\xA5")}, {Field0: 1651272845, Field1: 967, Field2: makeNimstrLit("\xE1\xB5\xAA")}, {Field0: -720547953, Field1: 111, Field2: makeNimstrLit("\xE2\x82\x92")}, {Field0: -130464176, Field1: 105, Field2: makeNimstrLit("\xE1\xB5\xA2")}, {Field0: -1802190319, Field1: 49, Field2: makeNimstrLit("\xE2\x82\x81")}, {Field0: -632269230, Field1: 120, Field2: makeNimstrLit("\xE2\x82\x93")}, {Field0: 922521427, Field1: 107, Field2: makeNimstrLit("\xE2\x82\x96")}, {Field0: 1876833038, Field1: 947, Field2: makeNimstrLit("\xE1\xB5\xA7")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 96048537, Field1: 114, Field2: makeNimstrLit("\xE1\xB5\xA3")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 1152145308, Field1: 115, Field2: makeNimstrLit("\xE2\x82\x9B")}, {Field0: 1890224028, Field1: 117, Field2: makeNimstrLit("\xE1\xB5\xA4")}, {Field0: -910705250, Field1: 32, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 889415264, Field1: 97, Field2: makeNimstrLit("\xE2\x82\x90")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1778223580, Field1: 52, Field2: makeNimstrLit("\xE2\x82\x84")}, {Field0: 908899684, Field1: 104, Field2: makeNimstrLit("\xE2\x82\x95")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 1581067563, Field1: 56, Field2: makeNimstrLit("\xE2\x82\x88")}, {Field0: 1049132588, Field1: 51, Field2: makeNimstrLit("\xE2\x82\x83")}, {Field0: -2116423573, Field1: 106, Field2: makeNimstrLit("\xE2\xB1\xBC")}, {Field0: -41588306, Field1: 48, Field2: makeNimstrLit("\xE2\x82\x80")}, {Field0: 826013230, Field1: 61, Field2: makeNimstrLit("\xE2\x82\x8C")}, {Field0: -1160343377, Field1: 112, Field2: makeNimstrLit("\xE2\x82\x9A")}, {Field0: -1380996561, Field1: 116, Field2: makeNimstrLit("\xE2\x82\x9C")}, {Field0: -21492693, Field1: 966, Field2: makeNimstrLit("\xE1\xB5\xA9")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 2019811060, Field1: 40, Field2: makeNimstrLit("\xE2\x82\x8D")}, {Field0: -1823011404, Field1: 41, Field2: makeNimstrLit("\xE2\x82\x8E")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -369358473, Field1: 57, Field2: makeNimstrLit("\xE2\x82\x89")}, {Field0: -1629987273, Field1: 108, Field2: makeNimstrLit("\xE2\x82\x97")}, {Field0: -2070212424, Field1: 946, Field2: makeNimstrLit("\xE1\xB5\xA6")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1712371396, Field1: 110, Field2: makeNimstrLit("\xE2\x82\x99")}, {Field0: -1941233091, Field1: 50, Field2: makeNimstrLit("\xE2\x82\x82")}, {Field0: 1003719038, Field1: 53, Field2: makeNimstrLit("\xE2\x82\x85")}, {Field0: -1019208771, Field1: 43, Field2: makeNimstrLit("\xE2\x82\x8A")}], counter: 38};
          var superscripts_654313141 = {data: [{Field0: 329902878, Field1: 8722, Field2: makeNimstrLit("\xE2\x81\xBB")}, {Field0: -910705250, Field1: 32, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1778223580, Field1: 52, Field2: makeNimstrLit("\xE2\x81\xB4")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 45316872, Field1: 54, Field2: makeNimstrLit("\xE2\x81\xB6")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 1581067563, Field1: 56, Field2: makeNimstrLit("\xE2\x81\xB8")}, {Field0: 1049132588, Field1: 51, Field2: makeNimstrLit("\xC2\xB3")}, {Field0: -1131254452, Field1: 55, Field2: makeNimstrLit("\xE2\x81\xB7")}, {Field0: -41588306, Field1: 48, Field2: makeNimstrLit("\xE2\x81\xB0")}, {Field0: 826013230, Field1: 61, Field2: makeNimstrLit("\xE2\x81\xBC")}, {Field0: -130464176, Field1: 105, Field2: makeNimstrLit("\xE2\x81\xB1")}, {Field0: -1802190319, Field1: 49, Field2: makeNimstrLit("\xC2\xB9")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 2019811060, Field1: 40, Field2: makeNimstrLit("\xE2\x81\xBD")}, {Field0: -1823011404, Field1: 41, Field2: makeNimstrLit("\xE2\x81\xBE")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -369358473, Field1: 57, Field2: makeNimstrLit("\xE2\x81\xB9")}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: 0, Field1: 0, Field2: []}, {Field0: -1712371396, Field1: 110, Field2: makeNimstrLit("\xE2\x81\xBF")}, {Field0: -1941233091, Field1: 50, Field2: makeNimstrLit("\xC2\xB2")}, {Field0: 1003719038, Field1: 53, Field2: makeNimstrLit("\xE2\x81\xB5")}, {Field0: -1019208771, Field1: 43, Field2: makeNimstrLit("\xE2\x81\xBA")}], counter: 18};
var ConstSet142 = setConstr(3, 4);
var ConstSet143 = setConstr(1);
var ConstSet144 = setConstr(1);
var ConstSet145 = setConstr(0);
var ConstSet146 = setConstr(0);
var ConstSet147 = setConstr(13, 10);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_1124073634 = [0];

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function succeedImpl_1207960565(inputInHEX60gensym43_1207960566, valueInHEX60gensym43_1207960567, tailInHEX60gensym43_1207960568) {
  var result_1207960570 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1207960570 = nimCopy(result_1207960570, {kind: 0, value: nimCopy(null, valueInHEX60gensym43_1207960567, NTI33554439), tail: nimCopy(null, tailInHEX60gensym43_1207960568, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_1207960566, NTI33554439), expected: []}, NTI1207959684);

  return result_1207960570;

}

function failImpl_1207960572(inputInHEX60gensym43_1207960573, expectedInHEX60gensym43_1207960574, tailInHEX60gensym43_1207960575) {
  var result_1207960577 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1207960577 = nimCopy(result_1207960577, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym43_1207960574, NTI1207960595), tail: nimCopy(null, tailInHEX60gensym43_1207960575, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_1207960573, NTI33554439), value: []}, NTI1207959684);

  return result_1207960577;

}

function succeedImpl_1207960601(inputInHEX60gensym45_1207960602, valueInHEX60gensym45_1207960603, tailInHEX60gensym45_1207960604) {
  var result_1207960606 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1207960606 = nimCopy(result_1207960606, {kind: 0, value: valueInHEX60gensym45_1207960603, tail: nimCopy(null, tailInHEX60gensym45_1207960604, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_1207960602, NTI33554439), expected: []}, NTI1207959782);

  return result_1207960606;

}

function failImpl_1207960608(inputInHEX60gensym45_1207960609, expectedInHEX60gensym45_1207960610, tailInHEX60gensym45_1207960611) {
  var result_1207960613 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1207960613 = nimCopy(result_1207960613, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym45_1207960610, NTI1207960629), tail: nimCopy(null, tailInHEX60gensym45_1207960611, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_1207960609, NTI33554439), value: 0}, NTI1207959782);

  return result_1207960613;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_1207960784 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1207960784 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_1207960784;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_1207960784 = addInt(i_1207960784, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function HEX5BHEX5D_989858970(s_989858973, x_989858974) {
  var result_989858975 = [];

    var a_989858977 = x_989858974.a;
    var L_989858979 = addInt(subInt(subInt((s_989858973).length, x_989858974.b), a_989858977), 1);
    result_989858975 = nimCopy(null, mnewString(chckRange(L_989858979, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_989858984 = 0;
      var i_654314643 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_654314643 < L_989858979)) break Label3;
            i_989858984 = i_654314643;
            result_989858975[chckIndx(i_989858984, 0, (result_989858975).length - 1)] = s_989858973[chckIndx(addInt(i_989858984, a_989858977), 0, (s_989858973).length - 1)];
            i_654314643 = addInt(i_654314643, 1);
          }
      } while (false);
    } while (false);

  return result_989858975;

}

function HEX2EHEX2E_922746960(a_922746963, b_922746964) {
  var result_922746967 = ({a: 0, b: 0});

    result_922746967 = nimCopy(result_922746967, {a: a_922746963, b: b_922746964}, NTI922746959);

  return result_922746967;

}

function nsuFindChar(s_687867381, sub_687867382, start_687867383, last_687867384) {
    var Temporary1;

  var result_687867385 = 0;

  BeforeRet: do {
    if ((last_687867384 == 0)) {
    Temporary1 = (s_687867381).length - 1;
    }
    else {
    Temporary1 = last_687867384;
    }
    
    var last_687867386 = Temporary1;
    Label2: do {
      var i_687867396 = 0;
      var colontmp__1207960798 = 0;
      colontmp__1207960798 = start_687867383;
      var res_1207960799 = colontmp__1207960798;
      Label3: do {
          Label4: while (true) {
          if (!(res_1207960799 <= last_687867386)) break Label4;
            i_687867396 = res_1207960799;
            if ((sub_687867382 == s_687867381[chckIndx(i_687867396, 0, (s_687867381).length - 1)])) {
            result_687867385 = i_687867396;
            break BeforeRet;
            }
            
            res_1207960799 = addInt(res_1207960799, 1);
          }
      } while (false);
    } while (false);
    result_687867385 = -1;
    break BeforeRet;
  } while (false);

  return result_687867385;

}

function fill_687867323(a_687867325, value_687867326) {
    var xHEX60gensym166_687867332 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(xHEX60gensym166_687867332 <= (a_687867325).length - 1)) break Label2;
          a_687867325[chckIndx(xHEX60gensym166_687867332, 0, (a_687867325).length - 1)] = value_687867326;
          xHEX60gensym166_687867332 = addInt(xHEX60gensym166_687867332, 1);
        }
    } while (false);

  
}

function nsuInitSkipTable(a_687867320, sub_687867321) {
    var m_687867322 = (sub_687867321).length;
    fill_687867323(a_687867320, m_687867322);
    Label1: do {
      var i_687867341 = 0;
      var colontmp__1207960802 = 0;
      colontmp__1207960802 = subInt(m_687867322, 1);
      var i_1207960803 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1207960803 < colontmp__1207960802)) break Label3;
            i_687867341 = i_1207960803;
            a_687867320[chckIndx(sub_687867321[chckIndx(i_687867341, 0, (sub_687867321).length - 1)], 0, (a_687867320).length - 1)] = subInt(subInt(m_687867322, 1), i_687867341);
            i_1207960803 = addInt(i_1207960803, 1);
          }
      } while (false);
    } while (false);

  
}

function nsuFindStrA(a_687867361, s_687867362, sub_687867363, start_687867364, last_687867365) {
    var Temporary1;

  var result_687867366 = 0;

  BeforeRet: do {
    if ((last_687867365 == 0)) {
    Temporary1 = (s_687867362).length - 1;
    }
    else {
    Temporary1 = last_687867365;
    }
    
    var last_687867367 = Temporary1;
    var subLast_687867368 = subInt((sub_687867363).length, 1);
    if ((subLast_687867368 == -1)) {
    result_687867366 = start_687867364;
    break BeforeRet;
    }
    
    var skip_687867369 = start_687867364;
    Label2: do {
        Label3: while (true) {
        if (!(subLast_687867368 <= subInt(last_687867367, skip_687867369))) break Label3;
          var i_687867370 = subLast_687867368;
          Label4: do {
              Label5: while (true) {
              if (!(s_687867362[chckIndx(addInt(skip_687867369, i_687867370), 0, (s_687867362).length - 1)] == sub_687867363[chckIndx(i_687867370, 0, (sub_687867363).length - 1)])) break Label5;
                if ((i_687867370 == 0)) {
                result_687867366 = skip_687867369;
                break BeforeRet;
                }
                
                i_687867370 = subInt(i_687867370, 1);
              }
          } while (false);
          skip_687867369 = addInt(skip_687867369, a_687867361[chckIndx(s_687867362[chckIndx(addInt(skip_687867369, subLast_687867368), 0, (s_687867362).length - 1)], 0, (a_687867361).length - 1)]);
        }
    } while (false);
    result_687867366 = -1;
    break BeforeRet;
  } while (false);

  return result_687867366;

}

function nsuFindStr(s_687867414, sub_687867415, start_687867416, last_687867417) {
  var result_687867418 = 0;

  BeforeRet: do {
    if ((subInt((s_687867414).length, start_687867416) < (sub_687867415).length)) {
    result_687867418 = -1;
    break BeforeRet;
    }
    
    if (((sub_687867415).length == 1)) {
    result_687867418 = nsuFindChar(s_687867414, sub_687867415[chckIndx(0, 0, (sub_687867415).length - 1)], start_687867416, last_687867417);
    break BeforeRet;
    }
    
    var a_687867420 = [new Int32Array(256)];
    nsuInitSkipTable(a_687867420[0], sub_687867415);
    result_687867418 = nsuFindStrA(a_687867420[0], s_687867414, sub_687867415, start_687867416, last_687867417);
  } while (false);

  return result_687867418;

}

function findBounds_1207959560(s_1207959561, r_1207959562) {
  var result_1207959563 = {Field0: 0, Field1: 0};

  BeforeRet: do {
    var m_1207959564 = toJSStr(s_1207959561).match(r_1207959562);
    if (!(((m_1207959564) == null))) {
    var start_1207959572 = nsuFindStr(s_1207959561, cstrToNimstr(m_1207959564[chckIndx(0, 0, (m_1207959564).length - 1)]), 0, 0);
    var colontmp__1207960789 = start_1207959572;
    var colontmp__1207960790 = subInt(addInt(start_1207959572, ((m_1207959564[chckIndx(0, 0, (m_1207959564).length - 1)]) == null ? 0 : (m_1207959564[chckIndx(0, 0, (m_1207959564).length - 1)]).length)), 1);
    result_1207959563 = nimCopy(result_1207959563, {Field0: colontmp__1207960789, Field1: colontmp__1207960790}, NTI1207959558);
    break BeforeRet;
    }
    
    var colontmp__1207960791 = -1;
    var colontmp__1207960792 = 0;
    result_1207959563 = nimCopy(result_1207959563, {Field0: colontmp__1207960791, Field1: colontmp__1207960792}, NTI1207959558);
    break BeforeRet;
  } while (false);

  return result_1207959563;

}

function invalidFormatString_687867981() {
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");

  
}

function toLowerAscii_1023410177(c_1023410178) {
  var result_1023410179 = 0;

    if ((ConstSet5[c_1023410178] != undefined)) {
    result_1023410179 = chckRange(addInt(c_1023410178, 32), 0, 255);
    }
    else {
      result_1023410179 = c_1023410178;
    }
    

  return result_1023410179;

}

function nsuCmpIgnoreStyle(a_687866046, b_687866047) {
          var Temporary7;
          var Temporary8;

  var result_687866048 = 0;

  BeforeRet: do {
    var aLenHEX60gensym25_687866057 = (a_687866046).length;
    var bLenHEX60gensym25_687866058 = (b_687866047).length;
    var iHEX60gensym25_687866059 = 0;
    var jHEX60gensym25_687866060 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          Label3: do {
              Label4: while (true) {
              if (!((iHEX60gensym25_687866059 < aLenHEX60gensym25_687866057) && (a_687866046[iHEX60gensym25_687866059] == 95))) break Label4;
                iHEX60gensym25_687866059 += 1;
              }
          } while (false);
          Label5: do {
              Label6: while (true) {
              if (!((jHEX60gensym25_687866060 < bLenHEX60gensym25_687866058) && (b_687866047[jHEX60gensym25_687866060] == 95))) break Label6;
                jHEX60gensym25_687866060 += 1;
              }
          } while (false);
          if ((iHEX60gensym25_687866059 < aLenHEX60gensym25_687866057)) {
          Temporary7 = toLowerAscii_1023410177(a_687866046[iHEX60gensym25_687866059]);
          }
          else {
          Temporary7 = 0;
          }
          
          var aaHEX60gensym25_687866069 = Temporary7;
          if ((jHEX60gensym25_687866060 < bLenHEX60gensym25_687866058)) {
          Temporary8 = toLowerAscii_1023410177(b_687866047[jHEX60gensym25_687866060]);
          }
          else {
          Temporary8 = 0;
          }
          
          var bbHEX60gensym25_687866070 = Temporary8;
          result_687866048 = (aaHEX60gensym25_687866069 - bbHEX60gensym25_687866070);
          if (!((result_687866048 == 0))) {
          break BeforeRet;
          }
          
          if ((aLenHEX60gensym25_687866057 <= iHEX60gensym25_687866059)) {
          if ((bLenHEX60gensym25_687866058 <= jHEX60gensym25_687866060)) {
          result_687866048 = 0;
          break BeforeRet;
          }
          
          result_687866048 = -1;
          break BeforeRet;
          }
          else {
          if ((bLenHEX60gensym25_687866058 <= jHEX60gensym25_687866060)) {
          result_687866048 = 1;
          break BeforeRet;
          }
          }
          iHEX60gensym25_687866059 += 1;
          jHEX60gensym25_687866060 += 1;
        }
    } while (false);
  } while (false);

  return result_687866048;

}

function findNormalized_687867969(x_687867970, inArray_687867971) {
  var result_687867972 = 0;

  BeforeRet: do {
    var i_687867973 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_687867973 < (inArray_687867971).length - 1)) break Label2;
          if ((nsuCmpIgnoreStyle(x_687867970, inArray_687867971[chckIndx(i_687867973, 0, (inArray_687867971).length - 1)]) == 0)) {
          result_687867972 = i_687867973;
          break BeforeRet;
          }
          
          i_687867973 = addInt(i_687867973, 2);
        }
    } while (false);
    result_687867972 = -1;
    break BeforeRet;
  } while (false);

  return result_687867972;

}

function substr_33557921(s_33557922, first_33557923, last_33557924) {
  var result_33557925 = [];

    var first_33557926 = nimMax(first_33557923, 0);
    var L_33557927 = nimMax(addInt(subInt(nimMin(last_33557924, (s_33557922).length - 1), first_33557926), 1), 0);
    result_33557925 = nimCopy(null, mnewString(chckRange(L_33557927, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557932 = 0;
      var colontmp__654311533 = 0;
      colontmp__654311533 = subInt(L_33557927, 1);
      var res_654311534 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_654311534 <= colontmp__654311533)) break Label3;
            i_33557932 = res_654311534;
            result_33557925[chckIndx(i_33557932, 0, (result_33557925).length - 1)] = s_33557922[chckIndx(addInt(i_33557932, first_33557926), 0, (s_33557922).length - 1)];
            res_654311534 = addInt(res_654311534, 1);
          }
      } while (false);
    } while (false);

  return result_33557925;

}

function nsuAddf(s_687867984, s_687867984_Idx, formatstr_687867985, a_687867986) {
                  var Temporary5;
            var Temporary6;
              var Temporary7;
            var Temporary10;
              var Temporary11;
                var Temporary12;
                  var Temporary15;
              var Temporary16;

    var i_687867988 = 0;
    var num_687867989 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_687867988 < (formatstr_687867985).length)) break Label2;
          if (((formatstr_687867985[chckIndx(i_687867988, 0, (formatstr_687867985).length - 1)] == 36) && (addInt(i_687867988, 1) < (formatstr_687867985).length))) {
          switch (formatstr_687867985[chckIndx(addInt(i_687867988, 1), 0, (formatstr_687867985).length - 1)]) {
          case 35:
            if (((a_687867986).length - 1 < num_687867989)) {
            invalidFormatString_687867981();
            }
            
            s_687867984[s_687867984_Idx].push.apply(s_687867984[s_687867984_Idx], a_687867986[chckIndx(num_687867989, 0, (a_687867986).length - 1)]);;
            i_687867988 = addInt(i_687867988, 2);
            num_687867989 = addInt(num_687867989, 1);
            break;
          case 36:
            addChar(s_687867984[s_687867984_Idx], 36);;
            i_687867988 = addInt(i_687867988, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            var j_687868005 = 0;
            i_687867988 = addInt(i_687867988, 1);
            var negative_687868010 = (formatstr_687867985[chckIndx(i_687867988, 0, (formatstr_687867985).length - 1)] == 45);
            if (negative_687868010) {
            i_687867988 = addInt(i_687867988, 1);
            }
            
            Label3: do {
                Label4: while (true) {
                  if (!(i_687867988 < (formatstr_687867985).length)) Temporary5 = false; else {                    Temporary5 = (ConstSet2[formatstr_687867985[chckIndx(i_687867988, 0, (formatstr_687867985).length - 1)]] != undefined);                  }                if (!Temporary5) break Label4;
                  j_687868005 = subInt(addInt(mulInt(j_687868005, 10), formatstr_687867985[chckIndx(i_687867988, 0, (formatstr_687867985).length - 1)]), 48);
                  i_687867988 = addInt(i_687867988, 1);
                }
            } while (false);
            if (!(negative_687868010)) {
            Temporary6 = subInt(j_687868005, 1);
            }
            else {
            Temporary6 = subInt((a_687867986).length, j_687868005);
            }
            
            var idx_687868033 = Temporary6;
              if ((idx_687868033 < 0)) Temporary7 = true; else {                Temporary7 = ((a_687867986).length - 1 < idx_687868033);              }            if (Temporary7) {
            invalidFormatString_687867981();
            }
            
            s_687867984[s_687867984_Idx].push.apply(s_687867984[s_687867984_Idx], a_687867986[chckIndx(idx_687868033, 0, (a_687867986).length - 1)]);;
            break;
          case 123:
            var j_687868037 = addInt(i_687867988, 2);
            var k_687868038 = 0;
            var negative_687868039 = (formatstr_687867985[chckIndx(j_687868037, 0, (formatstr_687867985).length - 1)] == 45);
            if (negative_687868039) {
            j_687868037 = addInt(j_687868037, 1);
            }
            
            var isNumber_687868044 = 0;
            Label8: do {
                Label9: while (true) {
                if (!((j_687868037 < (formatstr_687867985).length) && !((ConstSet3[formatstr_687867985[chckIndx(j_687868037, 0, (formatstr_687867985).length - 1)]] != undefined)))) break Label9;
                  if ((ConstSet4[formatstr_687867985[chckIndx(j_687868037, 0, (formatstr_687867985).length - 1)]] != undefined)) {
                  k_687868038 = subInt(addInt(mulInt(k_687868038, 10), formatstr_687867985[chckIndx(j_687868037, 0, (formatstr_687867985).length - 1)]), 48);
                  if ((isNumber_687868044 == 0)) {
                  isNumber_687868044 = 1;
                  }
                  
                  }
                  else {
                    isNumber_687868044 = -1;
                  }
                  
                  j_687868037 = addInt(j_687868037, 1);
                }
            } while (false);
            if ((isNumber_687868044 == 1)) {
            if (!(negative_687868039)) {
            Temporary10 = subInt(k_687868038, 1);
            }
            else {
            Temporary10 = subInt((a_687867986).length, k_687868038);
            }
            
            var idx_687868066 = Temporary10;
              if ((idx_687868066 < 0)) Temporary11 = true; else {                Temporary11 = ((a_687867986).length - 1 < idx_687868066);              }            if (Temporary11) {
            invalidFormatString_687867981();
            }
            
            s_687867984[s_687867984_Idx].push.apply(s_687867984[s_687867984_Idx], a_687867986[chckIndx(idx_687868066, 0, (a_687867986).length - 1)]);;
            }
            else {
              var x_687868070 = findNormalized_687867969(substr_33557921(formatstr_687867985, addInt(i_687867988, 2), subInt(j_687868037, 1)), a_687867986);
                if (!(0 <= x_687868070)) Temporary12 = false; else {                  Temporary12 = (x_687868070 < (a_687867986).length - 1);                }              if (Temporary12) {
              s_687867984[s_687867984_Idx].push.apply(s_687867984[s_687867984_Idx], a_687867986[chckIndx(addInt(x_687868070, 1), 0, (a_687867986).length - 1)]);;
              }
              else {
              invalidFormatString_687867981();
              }
              
            }
            
            i_687867988 = addInt(j_687868037, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            var j_687868074 = addInt(i_687867988, 1);
            Label13: do {
                Label14: while (true) {
                  if (!(j_687868074 < (formatstr_687867985).length)) Temporary15 = false; else {                    Temporary15 = (ConstSet6[formatstr_687867985[chckIndx(j_687868074, 0, (formatstr_687867985).length - 1)]] != undefined);                  }                if (!Temporary15) break Label14;
                  j_687868074 = addInt(j_687868074, 1);
                }
            } while (false);
            var x_687868083 = findNormalized_687867969(substr_33557921(formatstr_687867985, addInt(i_687867988, 1), subInt(j_687868074, 1)), a_687867986);
              if (!(0 <= x_687868083)) Temporary16 = false; else {                Temporary16 = (x_687868083 < (a_687867986).length - 1);              }            if (Temporary16) {
            s_687867984[s_687867984_Idx].push.apply(s_687867984[s_687867984_Idx], a_687867986[chckIndx(addInt(x_687868083, 1), 0, (a_687867986).length - 1)]);;
            }
            else {
            invalidFormatString_687867981();
            }
            
            i_687867988 = j_687868074;
            break;
          default: 
            invalidFormatString_687867981();
            break;
          }
          }
          else {
            addChar(s_687867984[s_687867984_Idx], formatstr_687867985[chckIndx(i_687867988, 0, (formatstr_687867985).length - 1)]);;
            i_687867988 = addInt(i_687867988, 1);
          }
          
        }
    } while (false);

  
}

function nsuFormatSingleElem(formatstr_687868103, a_687868104) {
  var result_687868105 = [[]];

    result_687868105[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_687868105, 0, formatstr_687868103, [nimCopy(null, a_687868104, NTI33554439)]);

  return result_687868105[0];

}

function HEX5BHEX5D_989856620(s_989856623, x_989856624) {
  var result_989856625 = [];

    var a_989856627 = x_989856624.a;
    var L_989856629 = addInt(subInt(x_989856624.b, a_989856627), 1);
    result_989856625 = nimCopy(null, mnewString(chckRange(L_989856629, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_989856634 = 0;
      var i_1207960817 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1207960817 < L_989856629)) break Label3;
            i_989856634 = i_1207960817;
            result_989856625[chckIndx(i_989856634, 0, (result_989856625).length - 1)] = s_989856623[chckIndx(addInt(i_989856634, a_989856627), 0, (s_989856623).length - 1)];
            i_1207960817 = addInt(i_1207960817, 1);
          }
      } while (false);
    } while (false);

  return result_989856625;

}

function HEX2EHEX2E_989856595(a_989856598, b_989856599) {
  var result_989856600 = ({a: 0, b: 0});

    result_989856600 = nimCopy(result_989856600, {a: a_989856598, b: b_989856599}, NTI738197565);

  return result_989856600;

}

function regex_1207960066(expect_1207960067) {

function succeedImpl_1207960081(inputInHEX60gensym20_1207960082, valueInHEX60gensym20_1207960083, tailInHEX60gensym20_1207960084) {
  var result_1207960086 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1207960086 = nimCopy(result_1207960086, {kind: 0, value: nimCopy(null, valueInHEX60gensym20_1207960083, NTI33554439), tail: nimCopy(null, tailInHEX60gensym20_1207960084, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_1207960082, NTI33554439), expected: []}, NTI1207959684);

  return result_1207960086;

}

function failImpl_1207960088(inputInHEX60gensym20_1207960089, expectedInHEX60gensym20_1207960090, tailInHEX60gensym20_1207960091) {
  var result_1207960093 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1207960093 = nimCopy(result_1207960093, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym20_1207960090, NTI1207960026), tail: nimCopy(null, tailInHEX60gensym20_1207960091, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_1207960089, NTI33554439), value: []}, NTI1207959684);

  return result_1207960093;

}
      expect_1207960067 = nimCopy(null, expect_1207960067, NTI33554439);
      
function HEX3Aanonymous_1207960096(input_1207960097) {
        var result_1207960099 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1207960100 = succeedImpl_1207960081;
          var fail_1207960101 = failImpl_1207960088;
          var bounds_1207960102 = findBounds_1207959560(input_1207960097, expreg_1207960070);
          if (!((bounds_1207960102["Field0"] == 0))) {
          result_1207960099 = nimCopy(result_1207960099, fail_1207960101(input_1207960097, [nsuFormatSingleElem(makeNimstrLit("match for regex \'$1\'"), expect_1207960067)], input_1207960097), NTI1207959684);
          break BeforeRet;
          }
          
          result_1207960099 = nimCopy(result_1207960099, succeed_1207960100(input_1207960097, HEX5BHEX5D_989856620(input_1207960097, HEX2EHEX2E_989856595(0, bounds_1207960102["Field1"])), HEX5BHEX5D_989858970(input_1207960097, HEX2EHEX2E_922746960(addInt(bounds_1207960102["Field1"], 1), 1))), NTI1207959684);
        } while (false);

        return result_1207960099;

      }

  var result_1207960069 = null;

    var expreg_1207960070 = new RegExp(toJSStr(expect_1207960067));
    Label1: do {
    } while (false);
    result_1207960069 = {body: HEX3Aanonymous_1207960096};

  return result_1207960069;

}

function parse_1207960522(p_1207960524, input_1207960525) {
  var result_1207960526 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1207960524.body == null)) {
    result_1207960526 = nimCopy(result_1207960526, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1207960525, NTI33554439), fromInput: nimCopy(null, input_1207960525, NTI33554439), value: 0}, NTI1207959782);
    break BeforeRet;
    }
    
    result_1207960526 = nimCopy(result_1207960526, p_1207960524.body(input_1207960525), NTI1207959782);
  } while (false);

  return result_1207960526;

}

function HEX26_671088761(x_671088763, y_671088764) {
  var result_671088765 = [];

    result_671088765 = new Array(chckRange(addInt((x_671088763).length, (y_671088764).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_671088763).length, (y_671088764).length), 0, 2147483647) ; ++i) { result_671088765[i] = []; }    Label1: do {
      var i_671088783 = 0;
      var colontmp__1207960821 = 0;
      colontmp__1207960821 = subInt((x_671088763).length, 1);
      var res_1207960822 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1207960822 <= colontmp__1207960821)) break Label3;
            i_671088783 = res_1207960822;
            result_671088765[chckIndx(i_671088783, 0, (result_671088765).length - 1)] = nimCopy(null, x_671088763[chckIndx(i_671088783, 0, (x_671088763).length - 1)], NTI33554439);
            res_1207960822 = addInt(res_1207960822, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_671088791 = 0;
      var colontmp__1207960825 = 0;
      colontmp__1207960825 = subInt((y_671088764).length, 1);
      var res_1207960826 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_1207960826 <= colontmp__1207960825)) break Label6;
            i_671088791 = res_1207960826;
            result_671088765[chckIndx(addInt(i_671088791, (x_671088763).length), 0, (result_671088765).length - 1)] = nimCopy(null, y_671088764[chckIndx(i_671088791, 0, (y_671088764).length - 1)], NTI33554439);
            res_1207960826 = addInt(res_1207960826, 1);
          }
      } while (false);
    } while (false);

  return result_671088765;

}

function reprEnum(e_33557400, typ_33557401) {
  var result_33557402 = [];

    var tmp_33557403 = false;
    var item_33557404 = typ_33557401.node.sons[e_33557400];
    tmp_33557403 = item_33557404 !== undefined
    if (tmp_33557403) {
    result_33557402 = nimCopy(null, makeNimstrLit(item_33557404.name), NTI33554439);
    }
    else {
      result_33557402 = nimCopy(null, (HEX24_335544323(e_33557400) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557402;

}

function HEX7C_1207960666(a_1207960668, b_1207960669) {

function succeedImpl_1207960681(inputInHEX60gensym49_1207960682, valueInHEX60gensym49_1207960683, tailInHEX60gensym49_1207960684) {
  var result_1207960686 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1207960686 = nimCopy(result_1207960686, {kind: 0, value: valueInHEX60gensym49_1207960683, tail: nimCopy(null, tailInHEX60gensym49_1207960684, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_1207960682, NTI33554439), expected: []}, NTI1207959782);

  return result_1207960686;

}

function failImpl_1207960688(inputInHEX60gensym49_1207960689, expectedInHEX60gensym49_1207960690, tailInHEX60gensym49_1207960691) {
  var result_1207960693 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1207960693 = nimCopy(result_1207960693, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym49_1207960690, NTI1207960691), tail: nimCopy(null, tailInHEX60gensym49_1207960691, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_1207960689, NTI33554439), value: 0}, NTI1207959782);

  return result_1207960693;

}
      
function HEX3Aanonymous_1207960696(input_1207960697) {
          var Temporary1;
          var Temporary2;

        var result_1207960699 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1207960700 = succeedImpl_1207960681;
          var fail_1207960701 = failImpl_1207960688;
          var result1_1207960714 = parse_1207960522(a_1207960668, input_1207960697);
          if ((result1_1207960714.kind == 0)) {
          result_1207960699 = nimCopy(result_1207960699, result1_1207960714, NTI1207959782);
          break BeforeRet;
          }
          
          var result2_1207960731 = parse_1207960522(b_1207960669, input_1207960697);
          if ((result2_1207960731.kind == 0)) {
          result_1207960699 = nimCopy(result_1207960699, result2_1207960731, NTI1207959782);
          break BeforeRet;
          }
          
          var Temporary1 = result1_1207960714;
          if (ConstSet7[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1207959573)); }
          var Temporary2 = result2_1207960731;
          if (ConstSet8[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
          result_1207960699 = nimCopy(result_1207960699, fail_1207960701(input_1207960697, HEX26_671088761(Temporary1.expected, Temporary2.expected), input_1207960697), NTI1207959782);
        } while (false);

        return result_1207960699;

      }

  var result_1207960670 = null;

    Label1: do {
    } while (false);
    result_1207960670 = {body: HEX3Aanonymous_1207960696};

  return result_1207960670;

}

function contains_654311705(s_654311709, value_654311710) {
  var result_654311711 = false;

    result_654311711 = ((s_654311709.a <= value_654311710) && (value_654311710 <= s_654311709.b));

  return result_654311711;

}

function nsuFormatOpenArray(formatstr_687868092, a_687868093) {
  var result_687868094 = [[]];

    result_687868094[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_687868094, 0, formatstr_687868092, a_687868093);

  return result_687868094[0];

}

function c_1207959991(expect_1207959993) {

function succeedImpl_1207960006(inputInHEX60gensym14_1207960007, valueInHEX60gensym14_1207960008, tailInHEX60gensym14_1207960009) {
  var result_1207960011 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1207960011 = nimCopy(result_1207960011, {kind: 0, value: valueInHEX60gensym14_1207960008, tail: nimCopy(null, tailInHEX60gensym14_1207960009, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym14_1207960007, NTI33554439), expected: []}, NTI1207959782);

  return result_1207960011;

}

function failImpl_1207960013(inputInHEX60gensym14_1207960014, expectedInHEX60gensym14_1207960015, tailInHEX60gensym14_1207960016) {
  var result_1207960018 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1207960018 = nimCopy(result_1207960018, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym14_1207960015, NTI1207959963), tail: nimCopy(null, tailInHEX60gensym14_1207960016, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym14_1207960014, NTI33554439), value: 0}, NTI1207959782);

  return result_1207960018;

}
      expect_1207959993 = nimCopy(null, expect_1207959993, NTI654312070);
      
function HEX3Aanonymous_1207960021(input_1207960022) {
            var Temporary1;

        var result_1207960024 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1207960025 = succeedImpl_1207960006;
          var fail_1207960026 = failImpl_1207960013;
            if (!(0 < (input_1207960022).length)) Temporary1 = false; else {              Temporary1 = contains_654311705(expect_1207959993, input_1207960022[chckIndx(0, 0, (input_1207960022).length - 1)]);            }          if (Temporary1) {
          result_1207960024 = nimCopy(result_1207960024, succeed_1207960025(input_1207960022, input_1207960022[chckIndx(0, 0, (input_1207960022).length - 1)], HEX5BHEX5D_989858970(input_1207960022, HEX2EHEX2E_922746960(1, 1))), NTI1207959782);
          break BeforeRet;
          }
          
          result_1207960024 = nimCopy(result_1207960024, fail_1207960026(input_1207960022, [nsuFormatOpenArray(makeNimstrLit("character from $1..$2"), [nimCharToStr(expect_1207959993.a), nimCharToStr(expect_1207959993.b)])], input_1207960022), NTI1207959782);
        } while (false);

        return result_1207960024;

      }

  var result_1207959995 = null;

    Label1: do {
    } while (false);
    result_1207959995 = {body: HEX3Aanonymous_1207960021};

  return result_1207959995;

}

function HEX2EHEX2E_654311635(a_654311638, b_654311639) {
  var result_654311642 = ({a: 0, b: 0});

    result_654311642 = nimCopy(result_654311642, {a: a_654311638, b: b_654311639}, NTI654312070);

  return result_654311642;

}

function HEX3Aanonymous_1207960580(input_1207960581) {
  var result_1207960583 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    var succeed_1207960584 = succeedImpl_1207960565;
    var fail_1207960585 = failImpl_1207960572;
    if ((0 < (input_1207960581).length)) {
    result_1207960583 = nimCopy(result_1207960583, fail_1207960585(input_1207960581, [makeNimstrLit("EOF")], input_1207960581), NTI1207959684);
    break BeforeRet;
    }
    
    result_1207960583 = nimCopy(result_1207960583, succeed_1207960584(input_1207960581, [], []), NTI1207959684);
  } while (false);

  return result_1207960583;

}

function HEX3Aanonymous_1207960616(input_1207960617) {
  var result_1207960619 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    var succeed_1207960620 = succeedImpl_1207960601;
    var fail_1207960621 = failImpl_1207960608;
    if ((0 < (input_1207960617).length)) {
    result_1207960619 = nimCopy(result_1207960619, succeed_1207960620(input_1207960617, input_1207960617[chckIndx(0, 0, (input_1207960617).length - 1)], HEX5BHEX5D_989858970(input_1207960617, HEX2EHEX2E_922746960(1, 1))), NTI1207959782);
    break BeforeRet;
    }
    
    result_1207960619 = nimCopy(result_1207960619, fail_1207960621(input_1207960617, [makeNimstrLit("any character")], input_1207960617), NTI1207959782);
  } while (false);

  return result_1207960619;

}
Label1: do {
} while (false);
var eofImpl_1207960590 = {body: HEX3Aanonymous_1207960580};
Label2: do {
} while (false);
var anyCharImpl_1207960644 = {body: HEX3Aanonymous_1207960616};
var eof_1207960645 = eofImpl_1207960590;
var anyChar_1207960646 = anyCharImpl_1207960644;
var whitespace_1207960647 = regex_1207960066(makeNimstrLit("\\s+"));
var letter_1207960740 = HEX7C_1207960666(c_1207959991(HEX2EHEX2E_654311635(97, 122)), c_1207959991(HEX2EHEX2E_654311635(65, 90)));
var digit_1207960746 = c_1207959991(HEX2EHEX2E_654311635(48, 57));
var alphanumeric_1207960759 = HEX7C_1207960666(letter_1207960740, digit_1207960746);

function parse_637536791(p_637536793, input_637536794) {
  var result_637536795 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_637536793.body == null)) {
    result_637536795 = nimCopy(result_637536795, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_637536794, NTI33554439), fromInput: nimCopy(null, input_637536794, NTI33554439), value: []}, NTI637535523);
    break BeforeRet;
    }
    
    result_637536795 = nimCopy(result_637536795, p_637536793.body(input_637536794), NTI637535523);
  } while (false);

  return result_637536795;

}

function map_637536981(a_637536984, fn_637536986) {

function succeedImpl_637536998(inputInHEX60gensym43_637536999, valueInHEX60gensym43_637537000, tailInHEX60gensym43_637537001) {
  var result_637537003 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537003 = nimCopy(result_637537003, {kind: 0, value: nimCopy(null, valueInHEX60gensym43_637537000, NTI452985127), tail: nimCopy(null, tailInHEX60gensym43_637537001, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_637536999, NTI33554439), expected: []}, NTI637535056);

  return result_637537003;

}

function failImpl_637537005(inputInHEX60gensym43_637537006, expectedInHEX60gensym43_637537007, tailInHEX60gensym43_637537008) {
  var result_637537010 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537010 = nimCopy(result_637537010, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym43_637537007, NTI637536119), tail: nimCopy(null, tailInHEX60gensym43_637537008, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_637537006, NTI33554439), value: []}, NTI637535056);

  return result_637537010;

}
      
function HEX3Aanonymous_637537013(input_637537014) {
            var Temporary2;
          var Temporary3;

        var result_637537016 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637537017 = succeedImpl_637536998;
          var fail_637537018 = failImpl_637537005;
          Label1: do {
            var tempHEX60gensym24_637537031 = parse_637536791(a_637536984, input_637537014);
            if ((tempHEX60gensym24_637537031.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637537031;
            if (ConstSet9[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637537016 = nimCopy(result_637537016, {kind: 1, fromInput: nimCopy(null, input_637537014, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637537031.tail, NTI33554439), value: []}, NTI637535056);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637537037 = nimCopy(null, tempHEX60gensym24_637537031, NTI637535523);
          var Temporary3 = result1_637537037;
          if (ConstSet10[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637537016 = nimCopy(result_637537016, succeed_637537017(input_637537014, fn_637536986(Temporary3.value), result1_637537037.tail), NTI637535056);
          break BeforeRet;
        } while (false);

        return result_637537016;

      }

  var result_637536987 = null;

    Label1: do {
    } while (false);
    result_637536987 = {body: HEX3Aanonymous_637537013};

  return result_637536987;

}

function HEX26_637536833(x_637536835, y_637536836) {
  var result_637536837 = [];

    result_637536837 = new Array(chckRange(addInt((x_637536835).length, (y_637536836).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_637536835).length, (y_637536836).length), 0, 2147483647) ; ++i) { result_637536837[i] = []; }    Label1: do {
      var i_637536856 = 0;
      var colontmp__503316550 = 0;
      colontmp__503316550 = subInt((x_637536835).length, 1);
      var res_503316551 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316551 <= colontmp__503316550)) break Label3;
            i_637536856 = res_503316551;
            result_637536837[chckIndx(i_637536856, 0, (result_637536837).length - 1)] = nimCopy(null, x_637536835[chckIndx(i_637536856, 0, (x_637536835).length - 1)], NTI637535050);
            res_503316551 = addInt(res_503316551, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_637536864 = 0;
      var colontmp__503316554 = 0;
      colontmp__503316554 = subInt((y_637536836).length, 1);
      var res_503316555 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_503316555 <= colontmp__503316554)) break Label6;
            i_637536864 = res_503316555;
            result_637536837[chckIndx(addInt(i_637536864, (x_637536835).length), 0, (result_637536837).length - 1)] = nimCopy(null, y_637536836[chckIndx(i_637536864, 0, (y_637536836).length - 1)], NTI637535050);
            res_503316555 = addInt(res_503316555, 1);
          }
      } while (false);
    } while (false);

  return result_637536837;

}

function HEX26_637536738(a_637536743, b_637536747) {

function succeedImpl_637536762(inputInHEX60gensym37_637536763, valueInHEX60gensym37_637536764, tailInHEX60gensym37_637536765) {
  var result_637536767 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536767 = nimCopy(result_637536767, {kind: 0, value: nimCopy(null, valueInHEX60gensym37_637536764, NTI637535923), tail: nimCopy(null, tailInHEX60gensym37_637536765, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym37_637536763, NTI33554439), expected: []}, NTI637535523);

  return result_637536767;

}

function failImpl_637536769(inputInHEX60gensym37_637536770, expectedInHEX60gensym37_637536771, tailInHEX60gensym37_637536772) {
  var result_637536774 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536774 = nimCopy(result_637536774, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym37_637536771, NTI637535929), tail: nimCopy(null, tailInHEX60gensym37_637536772, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym37_637536770, NTI33554439), value: []}, NTI637535523);

  return result_637536774;

}
      
function HEX3Aanonymous_637536777(input_637536778) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_637536780 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637536781 = succeedImpl_637536762;
          var fail_637536782 = failImpl_637536769;
          Label1: do {
            var tempHEX60gensym26_637536807 = parse_637536791(a_637536743, input_637536778);
            if ((tempHEX60gensym26_637536807.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_637536807;
            if (ConstSet11[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637536780 = nimCopy(result_637536780, {kind: 1, fromInput: nimCopy(null, input_637536778, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym26_637536807.tail, NTI33554439), value: []}, NTI637535523);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637536813 = nimCopy(null, tempHEX60gensym26_637536807, NTI637535523);
          Label3: do {
            var tempHEX60gensym28_637536826 = parse_637536791(b_637536747, result1_637536813.tail);
            if ((tempHEX60gensym28_637536826.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_637536826;
            if (ConstSet12[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637536780 = nimCopy(result_637536780, {kind: 1, fromInput: nimCopy(null, input_637536778, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym28_637536826.tail, NTI33554439), value: []}, NTI637535523);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637536832 = nimCopy(null, tempHEX60gensym28_637536826, NTI637535523);
          var Temporary5 = result1_637536813;
          if (ConstSet13[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          var Temporary6 = result2_637536832;
          if (ConstSet14[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1207959573)); }
          result_637536780 = nimCopy(result_637536780, succeed_637536781(input_637536778, HEX26_637536833(Temporary5.value, Temporary6.value), result2_637536832.tail), NTI637535523);
          break BeforeRet;
        } while (false);

        return result_637536780;

      }

  var result_637536751 = null;

    Label1: do {
    } while (false);
    result_637536751 = {body: HEX3Aanonymous_637536777};

  return result_637536751;

}

function parse_637536259(p_637536261, input_637536262) {
  var result_637536263 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_637536261.body == null)) {
    result_637536263 = nimCopy(result_637536263, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_637536262, NTI33554439), fromInput: nimCopy(null, input_637536262, NTI33554439), value: []}, NTI637535056);
    break BeforeRet;
    }
    
    result_637536263 = nimCopy(result_637536263, p_637536261.body(input_637536262), NTI637535056);
  } while (false);

  return result_637536263;

}

function map_637536493(a_637536496, fn_637536498) {

function succeedImpl_637536510(inputInHEX60gensym33_637536511, valueInHEX60gensym33_637536512, tailInHEX60gensym33_637536513) {
  var result_637536515 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536515 = nimCopy(result_637536515, {kind: 0, value: nimCopy(null, valueInHEX60gensym33_637536512, NTI637535632), tail: nimCopy(null, tailInHEX60gensym33_637536513, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym33_637536511, NTI33554439), expected: []}, NTI637535523);

  return result_637536515;

}

function failImpl_637536517(inputInHEX60gensym33_637536518, expectedInHEX60gensym33_637536519, tailInHEX60gensym33_637536520) {
  var result_637536522 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536522 = nimCopy(result_637536522, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym33_637536519, NTI637535683), tail: nimCopy(null, tailInHEX60gensym33_637536520, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym33_637536518, NTI33554439), value: []}, NTI637535523);

  return result_637536522;

}
      
function HEX3Aanonymous_637536525(input_637536526) {
            var Temporary2;
          var Temporary3;

        var result_637536528 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637536529 = succeedImpl_637536510;
          var fail_637536530 = failImpl_637536517;
          Label1: do {
            var tempHEX60gensym24_637536543 = parse_637536259(a_637536496, input_637536526);
            if ((tempHEX60gensym24_637536543.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637536543;
            if (ConstSet15[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637536528 = nimCopy(result_637536528, {kind: 1, fromInput: nimCopy(null, input_637536526, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637536543.tail, NTI33554439), value: []}, NTI637535523);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637536549 = nimCopy(null, tempHEX60gensym24_637536543, NTI637535056);
          var Temporary3 = result1_637536549;
          if (ConstSet16[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637536528 = nimCopy(result_637536528, succeed_637536529(input_637536526, fn_637536498(Temporary3.value), result1_637536549.tail), NTI637535523);
          break BeforeRet;
        } while (false);

        return result_637536528;

      }

  var result_637536499 = null;

    Label1: do {
    } while (false);
    result_637536499 = {body: HEX3Aanonymous_637536525};

  return result_637536499;

}

function nop_637535839() {

function succeedImpl_637535852(inputInHEX60gensym23_637535853, valueInHEX60gensym23_637535854, tailInHEX60gensym23_637535855) {
  var result_637535857 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637535857 = nimCopy(result_637535857, {kind: 0, value: nimCopy(null, valueInHEX60gensym23_637535854, NTI637535110), tail: nimCopy(null, tailInHEX60gensym23_637535855, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym23_637535853, NTI33554439), expected: []}, NTI637535056);

  return result_637535857;

}

function failImpl_637535871(inputInHEX60gensym23_637535872, expectedInHEX60gensym23_637535873, tailInHEX60gensym23_637535874) {
  var result_637535876 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637535876 = nimCopy(result_637535876, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym23_637535873, NTI637535137), tail: nimCopy(null, tailInHEX60gensym23_637535874, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym23_637535872, NTI33554439), value: []}, NTI637535056);

  return result_637535876;

}
      
function HEX3Aanonymous_637535879(input_637535880) {
        var result_637535882 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_637535883 = succeedImpl_637535852;
          var fail_637535884 = failImpl_637535871;
          result_637535882 = nimCopy(result_637535882, succeed_637535883(input_637535880, [], input_637535880), NTI637535056);

        return result_637535882;

      }

  var result_637535841 = null;

    Label1: do {
    } while (false);
    result_637535841 = {body: HEX3Aanonymous_637535879};

  return result_637535841;

}

function parse_637536021(p_637536023, input_637536024) {
  var result_637536025 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_637536023.body == null)) {
    result_637536025 = nimCopy(result_637536025, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_637536024, NTI33554439), fromInput: nimCopy(null, input_637536024, NTI33554439), value: []}, NTI1207959684);
    break BeforeRet;
    }
    
    result_637536025 = nimCopy(result_637536025, p_637536023.body(input_637536024), NTI1207959684);
  } while (false);

  return result_637536025;

}

function map_637535975(a_637535978, fn_637535980) {

function succeedImpl_637535992(inputInHEX60gensym25_637535993, valueInHEX60gensym25_637535994, tailInHEX60gensym25_637535995) {
  var result_637535997 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637535997 = nimCopy(result_637535997, {kind: 0, value: nimCopy(null, valueInHEX60gensym25_637535994, NTI671088697), tail: nimCopy(null, tailInHEX60gensym25_637535995, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym25_637535993, NTI33554439), expected: []}, NTI637535056);

  return result_637535997;

}

function failImpl_637535999(inputInHEX60gensym25_637536000, expectedInHEX60gensym25_637536001, tailInHEX60gensym25_637536002) {
  var result_637536004 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536004 = nimCopy(result_637536004, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym25_637536001, NTI637535245), tail: nimCopy(null, tailInHEX60gensym25_637536002, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym25_637536000, NTI33554439), value: []}, NTI637535056);

  return result_637536004;

}
      
function HEX3Aanonymous_637536007(input_637536008) {
            var Temporary2;
          var Temporary3;

        var result_637536010 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637536011 = succeedImpl_637535992;
          var fail_637536012 = failImpl_637535999;
          Label1: do {
            var tempHEX60gensym24_637536037 = parse_637536021(a_637535978, input_637536008);
            if ((tempHEX60gensym24_637536037.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637536037;
            if (ConstSet17[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637536010 = nimCopy(result_637536010, {kind: 1, fromInput: nimCopy(null, input_637536008, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637536037.tail, NTI33554439), value: []}, NTI637535056);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637536043 = nimCopy(null, tempHEX60gensym24_637536037, NTI1207959684);
          var Temporary3 = result1_637536043;
          if (ConstSet18[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637536010 = nimCopy(result_637536010, succeed_637536011(input_637536008, fn_637535980(Temporary3.value), result1_637536043.tail), NTI637535056);
          break BeforeRet;
        } while (false);

        return result_637536010;

      }

  var result_637535981 = null;

    Label1: do {
    } while (false);
    result_637535981 = {body: HEX3Aanonymous_637536007};

  return result_637535981;

}

function HEX2A_637535831(a_637535833, n_637535834) {
    var Temporary1;
      
function HEX3Aanonymous_637535938(x_637535958) {
        var result_637535961 = [];

          result_637535961 = nimCopy(null, [nimCopy(null, x_637535958, NTI33554439)], NTI671088697);

        return result_637535961;

      }

function succeedImpl_637536054(inputInHEX60gensym26_637536055, valueInHEX60gensym26_637536056, tailInHEX60gensym26_637536057) {
  var result_637536059 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536059 = nimCopy(result_637536059, {kind: 0, value: nimCopy(null, valueInHEX60gensym26_637536056, NTI637535297), tail: nimCopy(null, tailInHEX60gensym26_637536057, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym26_637536055, NTI33554439), expected: []}, NTI637535056);

  return result_637536059;

}

function failImpl_637536061(inputInHEX60gensym26_637536062, expectedInHEX60gensym26_637536063, tailInHEX60gensym26_637536064) {
  var result_637536066 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536066 = nimCopy(result_637536066, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym26_637536063, NTI637535303), tail: nimCopy(null, tailInHEX60gensym26_637536064, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym26_637536062, NTI33554439), value: []}, NTI637535056);

  return result_637536066;

}
        
function HEX3Aanonymous_637536069(input_637536070) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_637536072 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_637536073 = succeedImpl_637536054;
            var fail_637536074 = failImpl_637536061;
            Label1: do {
              var tempHEX60gensym38_637536087 = parse_637536021(a_637535833, input_637536070);
              if ((tempHEX60gensym38_637536087.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_637536087;
              if (ConstSet19[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
              result_637536072 = nimCopy(result_637536072, {kind: 1, fromInput: nimCopy(null, input_637536070, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym38_637536087.tail, NTI33554439), value: []}, NTI637535056);
              break BeforeRet;
              }
              
            } while (false);
            var result1_637536093 = nimCopy(null, tempHEX60gensym38_637536087, NTI1207959684);
            var Temporary3 = result1_637536093;
            if (ConstSet20[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
            var outputs_637536098 = [nimCopy(null, Temporary3.value, NTI33554439)];
            var lastTail_637536099 = nimCopy(null, result1_637536093.tail, NTI33554439);
            Label4: do {
              var i_637536105 = 0;
              var res_503316563 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_503316563 <= n_637535834)) break Label6;
                    i_637536105 = res_503316563;
                    Label7: do {
                      var tempHEX60gensym40_637536118 = parse_637536021(a_637535833, result1_637536093.tail);
                      if ((tempHEX60gensym40_637536118.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_637536118;
                      if (ConstSet21[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1207959573)); }
                      result_637536072 = nimCopy(result_637536072, {kind: 1, fromInput: nimCopy(null, input_637536070, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym40_637536118.tail, NTI33554439), value: []}, NTI637535056);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_637536093 = nimCopy(result1_637536093, tempHEX60gensym40_637536118, NTI1207959684);
                    if (eqStrings(result1_637536093.tail, lastTail_637536099)) {
                    break Label4;
                    }
                    
                    lastTail_637536099 = nimCopy(null, result1_637536093.tail, NTI33554439);
                    var Temporary9 = result1_637536093;
                    if (ConstSet22[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1207959573)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI33554439);
                    outputs_637536098.push(Temporary10);;
                    res_503316563 = addInt(res_503316563, 1);
                  }
              } while (false);
            } while (false);
            result_637536072 = nimCopy(result_637536072, succeed_637536073(input_637536070, outputs_637536098, result1_637536093.tail), NTI637535056);
          } while (false);

          return result_637536072;

        }

  var result_637535838 = null;

  BeforeRet: do {
    switch (n_637535834) {
    case 0:
      result_637535838 = nop_637535839();
      break BeforeRet;
      break;
    case 1:
      result_637535838 = map_637535975(a_637535833, HEX3Aanonymous_637535938);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_637536069};
      break;
    }
    result_637535838 = Temporary1;
  } while (false);

  return result_637535838;

}

function nop_637536330() {

function succeedImpl_637536343(inputInHEX60gensym31_637536344, valueInHEX60gensym31_637536345, tailInHEX60gensym31_637536346) {
  var result_637536348 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536348 = nimCopy(result_637536348, {kind: 0, value: nimCopy(null, valueInHEX60gensym31_637536345, NTI637535530), tail: nimCopy(null, tailInHEX60gensym31_637536346, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym31_637536344, NTI33554439), expected: []}, NTI637535523);

  return result_637536348;

}

function failImpl_637536371(inputInHEX60gensym31_637536372, expectedInHEX60gensym31_637536373, tailInHEX60gensym31_637536374) {
  var result_637536376 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536376 = nimCopy(result_637536376, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym31_637536373, NTI637535563), tail: nimCopy(null, tailInHEX60gensym31_637536374, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym31_637536372, NTI33554439), value: []}, NTI637535523);

  return result_637536376;

}
      
function HEX3Aanonymous_637536379(input_637536380) {
        var result_637536382 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_637536383 = succeedImpl_637536343;
          var fail_637536384 = failImpl_637536371;
          result_637536382 = nimCopy(result_637536382, succeed_637536383(input_637536380, [], input_637536380), NTI637535523);

        return result_637536382;

      }

  var result_637536332 = null;

    Label1: do {
    } while (false);
    result_637536332 = {body: HEX3Aanonymous_637536379};

  return result_637536332;

}

function HEX2A_637536317(a_637536319, n_637536320) {
    var Temporary1;
      
function HEX3Aanonymous_637536447(x_637536476) {
        var result_637536479 = [];

          result_637536479 = nimCopy(null, [nimCopy(null, x_637536476, NTI637535050)], NTI637535632);

        return result_637536479;

      }

function succeedImpl_637536560(inputInHEX60gensym34_637536561, valueInHEX60gensym34_637536562, tailInHEX60gensym34_637536563) {
  var result_637536565 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536565 = nimCopy(result_637536565, {kind: 0, value: nimCopy(null, valueInHEX60gensym34_637536562, NTI637535723), tail: nimCopy(null, tailInHEX60gensym34_637536563, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym34_637536561, NTI33554439), expected: []}, NTI637535523);

  return result_637536565;

}

function failImpl_637536567(inputInHEX60gensym34_637536568, expectedInHEX60gensym34_637536569, tailInHEX60gensym34_637536570) {
  var result_637536572 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536572 = nimCopy(result_637536572, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym34_637536569, NTI637535729), tail: nimCopy(null, tailInHEX60gensym34_637536570, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym34_637536568, NTI33554439), value: []}, NTI637535523);

  return result_637536572;

}
        
function HEX3Aanonymous_637536575(input_637536576) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_637536578 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_637536579 = succeedImpl_637536560;
            var fail_637536580 = failImpl_637536567;
            Label1: do {
              var tempHEX60gensym38_637536593 = parse_637536259(a_637536319, input_637536576);
              if ((tempHEX60gensym38_637536593.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_637536593;
              if (ConstSet23[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
              result_637536578 = nimCopy(result_637536578, {kind: 1, fromInput: nimCopy(null, input_637536576, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym38_637536593.tail, NTI33554439), value: []}, NTI637535523);
              break BeforeRet;
              }
              
            } while (false);
            var result1_637536599 = nimCopy(null, tempHEX60gensym38_637536593, NTI637535056);
            var Temporary3 = result1_637536599;
            if (ConstSet24[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
            var outputs_637536604 = [nimCopy(null, Temporary3.value, NTI637535050)];
            var lastTail_637536605 = nimCopy(null, result1_637536599.tail, NTI33554439);
            Label4: do {
              var i_637536611 = 0;
              var res_503316572 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_503316572 <= n_637536320)) break Label6;
                    i_637536611 = res_503316572;
                    Label7: do {
                      var tempHEX60gensym40_637536624 = parse_637536259(a_637536319, result1_637536599.tail);
                      if ((tempHEX60gensym40_637536624.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_637536624;
                      if (ConstSet25[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1207959573)); }
                      result_637536578 = nimCopy(result_637536578, {kind: 1, fromInput: nimCopy(null, input_637536576, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym40_637536624.tail, NTI33554439), value: []}, NTI637535523);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_637536599 = nimCopy(result1_637536599, tempHEX60gensym40_637536624, NTI637535056);
                    if (eqStrings(result1_637536599.tail, lastTail_637536605)) {
                    break Label4;
                    }
                    
                    lastTail_637536605 = nimCopy(null, result1_637536599.tail, NTI33554439);
                    var Temporary9 = result1_637536599;
                    if (ConstSet26[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1207959573)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI637535050);
                    outputs_637536604.push(Temporary10);;
                    res_503316572 = addInt(res_503316572, 1);
                  }
              } while (false);
            } while (false);
            result_637536578 = nimCopy(result_637536578, succeed_637536579(input_637536576, outputs_637536604, result1_637536599.tail), NTI637535523);
          } while (false);

          return result_637536578;

        }

  var result_637536329 = null;

  BeforeRet: do {
    switch (n_637536320) {
    case 0:
      result_637536329 = nop_637536330();
      break BeforeRet;
      break;
    case 1:
      result_637536329 = map_637536493(a_637536319, HEX3Aanonymous_637536447);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_637536575};
      break;
    }
    result_637536329 = Temporary1;
  } while (false);

  return result_637536329;

}

function HEX7C_637536215(a_637536217, b_637536218) {

function succeedImpl_637536230(inputInHEX60gensym30_637536231, valueInHEX60gensym30_637536232, tailInHEX60gensym30_637536233) {
  var result_637536235 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536235 = nimCopy(result_637536235, {kind: 0, value: nimCopy(null, valueInHEX60gensym30_637536232, NTI637535050), tail: nimCopy(null, tailInHEX60gensym30_637536233, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym30_637536231, NTI33554439), expected: []}, NTI637535056);

  return result_637536235;

}

function failImpl_637536237(inputInHEX60gensym30_637536238, expectedInHEX60gensym30_637536239, tailInHEX60gensym30_637536240) {
  var result_637536242 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637536242 = nimCopy(result_637536242, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym30_637536239, NTI637535467), tail: nimCopy(null, tailInHEX60gensym30_637536240, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym30_637536238, NTI33554439), value: []}, NTI637535056);

  return result_637536242;

}
      
function HEX3Aanonymous_637536245(input_637536246) {
          var Temporary1;
          var Temporary2;

        var result_637536248 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637536249 = succeedImpl_637536230;
          var fail_637536250 = failImpl_637536237;
          var result1_637536275 = parse_637536259(a_637536217, input_637536246);
          if ((result1_637536275.kind == 0)) {
          result_637536248 = nimCopy(result_637536248, result1_637536275, NTI637535056);
          break BeforeRet;
          }
          
          var result2_637536292 = parse_637536259(b_637536218, input_637536246);
          if ((result2_637536292.kind == 0)) {
          result_637536248 = nimCopy(result_637536248, result2_637536292, NTI637535056);
          break BeforeRet;
          }
          
          var Temporary1 = result1_637536275;
          if (ConstSet27[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1207959573)); }
          var Temporary2 = result2_637536292;
          if (ConstSet28[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
          result_637536248 = nimCopy(result_637536248, fail_637536250(input_637536246, HEX26_671088761(Temporary1.expected, Temporary2.expected), input_637536246), NTI637535056);
        } while (false);

        return result_637536248;

      }

  var result_637536219 = null;

    Label1: do {
    } while (false);
    result_637536219 = {body: HEX3Aanonymous_637536245};

  return result_637536219;

}

function newSeq_452985301(len_452985303) {
  var result_452985304 = [];

    result_452985304 = new Array(len_452985303); for (var i = 0 ; i < len_452985303 ; ++i) { result_452985304[i] = []; }
  return result_452985304;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function parse_637537552(p_637537554, input_637537555) {
  var result_637537556 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_637537554.body == null)) {
    result_637537556 = nimCopy(result_637537556, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_637537555, NTI33554439), fromInput: nimCopy(null, input_637537555, NTI33554439), value: []}, NTI637536168);
    break BeforeRet;
    }
    
    result_637537556 = nimCopy(result_637537556, p_637537554.body(input_637537555), NTI637536168);
  } while (false);

  return result_637537556;

}

function map_637538398(a_637538401, fn_637538403) {

function succeedImpl_637538415(inputInHEX60gensym70_637538416, valueInHEX60gensym70_637538417, tailInHEX60gensym70_637538418) {
  var result_637538420 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637538420 = nimCopy(result_637538420, {kind: 0, value: nimCopy(null, valueInHEX60gensym70_637538417, NTI671088644), tail: nimCopy(null, tailInHEX60gensym70_637538418, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym70_637538416, NTI33554439), expected: []}, NTI637536153);

  return result_637538420;

}

function failImpl_637538422(inputInHEX60gensym70_637538423, expectedInHEX60gensym70_637538424, tailInHEX60gensym70_637538425) {
  var result_637538427 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637538427 = nimCopy(result_637538427, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym70_637538424, NTI637537344), tail: nimCopy(null, tailInHEX60gensym70_637538425, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym70_637538423, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637538427;

}
      
function HEX3Aanonymous_637538430(input_637538431) {
            var Temporary2;
          var Temporary3;

        var result_637538433 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637538434 = succeedImpl_637538415;
          var fail_637538435 = failImpl_637538422;
          Label1: do {
            var tempHEX60gensym24_637538448 = parse_637537552(a_637538401, input_637538431);
            if ((tempHEX60gensym24_637538448.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637538448;
            if (ConstSet29[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637538433 = nimCopy(result_637538433, {kind: 1, fromInput: nimCopy(null, input_637538431, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637538448.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637538454 = nimCopy(null, tempHEX60gensym24_637538448, NTI637536168);
          var Temporary3 = result1_637538454;
          if (ConstSet30[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637538433 = nimCopy(result_637538433, succeed_637538434(input_637538431, fn_637538403(Temporary3.value), result1_637538454.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637538433;

      }

  var result_637538404 = null;

    Label1: do {
    } while (false);
    result_637538404 = {body: HEX3Aanonymous_637538430};

  return result_637538404;

}

function parse_637538084(p_637538086, input_637538087) {
  var result_637538088 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_637538086.body == null)) {
    result_637538088 = nimCopy(result_637538088, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_637538087, NTI33554439), fromInput: nimCopy(null, input_637538087, NTI33554439), value: []}, NTI637536654);
    break BeforeRet;
    }
    
    result_637538088 = nimCopy(result_637538088, p_637538086.body(input_637538087), NTI637536654);
  } while (false);

  return result_637538088;

}

function map_637538304(a_637538307, fn_637538309) {

function succeedImpl_637538321(inputInHEX60gensym69_637538322, valueInHEX60gensym69_637538323, tailInHEX60gensym69_637538324) {
  var result_637538326 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637538326 = nimCopy(result_637538326, {kind: 0, value: nimCopy(null, valueInHEX60gensym69_637538323, NTI671088854), tail: nimCopy(null, tailInHEX60gensym69_637538324, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym69_637538322, NTI33554439), expected: []}, NTI637536168);

  return result_637538326;

}

function failImpl_637538328(inputInHEX60gensym69_637538329, expectedInHEX60gensym69_637538330, tailInHEX60gensym69_637538331) {
  var result_637538333 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637538333 = nimCopy(result_637538333, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym69_637538330, NTI637537271), tail: nimCopy(null, tailInHEX60gensym69_637538331, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym69_637538329, NTI33554439), value: []}, NTI637536168);

  return result_637538333;

}
      
function HEX3Aanonymous_637538336(input_637538337) {
            var Temporary2;
          var Temporary3;

        var result_637538339 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637538340 = succeedImpl_637538321;
          var fail_637538341 = failImpl_637538328;
          Label1: do {
            var tempHEX60gensym24_637538354 = parse_637538084(a_637538307, input_637538337);
            if ((tempHEX60gensym24_637538354.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637538354;
            if (ConstSet31[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637538339 = nimCopy(result_637538339, {kind: 1, fromInput: nimCopy(null, input_637538337, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637538354.tail, NTI33554439), value: []}, NTI637536168);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637538360 = nimCopy(null, tempHEX60gensym24_637538354, NTI637536654);
          var Temporary3 = result1_637538360;
          if (ConstSet32[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637538339 = nimCopy(result_637538339, succeed_637538340(input_637538337, fn_637538309(Temporary3.value), result1_637538360.tail), NTI637536168);
          break BeforeRet;
        } while (false);

        return result_637538339;

      }

  var result_637538310 = null;

    Label1: do {
    } while (false);
    result_637538310 = {body: HEX3Aanonymous_637538336};

  return result_637538310;

}

function HEX26_637538126(x_637538128, y_637538129) {
  var result_637538130 = [];

    result_637538130 = new Array(chckRange(addInt((x_637538128).length, (y_637538129).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_637538128).length, (y_637538129).length), 0, 2147483647) ; ++i) { result_637538130[i] = []; }    Label1: do {
      var i_637538149 = 0;
      var colontmp__503316589 = 0;
      colontmp__503316589 = subInt((x_637538128).length, 1);
      var res_503316590 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316590 <= colontmp__503316589)) break Label3;
            i_637538149 = res_503316590;
            result_637538130[chckIndx(i_637538149, 0, (result_637538130).length - 1)] = nimCopy(null, x_637538128[chckIndx(i_637538149, 0, (x_637538128).length - 1)], NTI637536162);
            res_503316590 = addInt(res_503316590, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_637538157 = 0;
      var colontmp__503316593 = 0;
      colontmp__503316593 = subInt((y_637538129).length, 1);
      var res_503316594 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_503316594 <= colontmp__503316593)) break Label6;
            i_637538157 = res_503316594;
            result_637538130[chckIndx(addInt(i_637538157, (x_637538128).length), 0, (result_637538130).length - 1)] = nimCopy(null, y_637538129[chckIndx(i_637538157, 0, (y_637538129).length - 1)], NTI637536162);
            res_503316594 = addInt(res_503316594, 1);
          }
      } while (false);
    } while (false);

  return result_637538130;

}

function HEX26_637538031(a_637538036, b_637538040) {

function succeedImpl_637538055(inputInHEX60gensym63_637538056, valueInHEX60gensym63_637538057, tailInHEX60gensym63_637538058) {
  var result_637538060 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637538060 = nimCopy(result_637538060, {kind: 0, value: nimCopy(null, valueInHEX60gensym63_637538057, NTI637537054), tail: nimCopy(null, tailInHEX60gensym63_637538058, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym63_637538056, NTI33554439), expected: []}, NTI637536654);

  return result_637538060;

}

function failImpl_637538062(inputInHEX60gensym63_637538063, expectedInHEX60gensym63_637538064, tailInHEX60gensym63_637538065) {
  var result_637538067 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637538067 = nimCopy(result_637538067, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym63_637538064, NTI637537060), tail: nimCopy(null, tailInHEX60gensym63_637538065, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym63_637538063, NTI33554439), value: []}, NTI637536654);

  return result_637538067;

}
      
function HEX3Aanonymous_637538070(input_637538071) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_637538073 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637538074 = succeedImpl_637538055;
          var fail_637538075 = failImpl_637538062;
          Label1: do {
            var tempHEX60gensym26_637538100 = parse_637538084(a_637538036, input_637538071);
            if ((tempHEX60gensym26_637538100.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_637538100;
            if (ConstSet33[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637538073 = nimCopy(result_637538073, {kind: 1, fromInput: nimCopy(null, input_637538071, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym26_637538100.tail, NTI33554439), value: []}, NTI637536654);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637538106 = nimCopy(null, tempHEX60gensym26_637538100, NTI637536654);
          Label3: do {
            var tempHEX60gensym28_637538119 = parse_637538084(b_637538040, result1_637538106.tail);
            if ((tempHEX60gensym28_637538119.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_637538119;
            if (ConstSet34[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637538073 = nimCopy(result_637538073, {kind: 1, fromInput: nimCopy(null, input_637538071, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym28_637538119.tail, NTI33554439), value: []}, NTI637536654);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637538125 = nimCopy(null, tempHEX60gensym28_637538119, NTI637536654);
          var Temporary5 = result1_637538106;
          if (ConstSet35[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          var Temporary6 = result2_637538125;
          if (ConstSet36[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1207959573)); }
          result_637538073 = nimCopy(result_637538073, succeed_637538074(input_637538071, HEX26_637538126(Temporary5.value, Temporary6.value), result2_637538125.tail), NTI637536654);
          break BeforeRet;
        } while (false);

        return result_637538073;

      }

  var result_637538044 = null;

    Label1: do {
    } while (false);
    result_637538044 = {body: HEX3Aanonymous_637538070};

  return result_637538044;

}

function map_637537786(a_637537789, fn_637537791) {

function succeedImpl_637537803(inputInHEX60gensym59_637537804, valueInHEX60gensym59_637537805, tailInHEX60gensym59_637537806) {
  var result_637537808 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537808 = nimCopy(result_637537808, {kind: 0, value: nimCopy(null, valueInHEX60gensym59_637537805, NTI637536763), tail: nimCopy(null, tailInHEX60gensym59_637537806, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym59_637537804, NTI33554439), expected: []}, NTI637536654);

  return result_637537808;

}

function failImpl_637537810(inputInHEX60gensym59_637537811, expectedInHEX60gensym59_637537812, tailInHEX60gensym59_637537813) {
  var result_637537815 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537815 = nimCopy(result_637537815, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym59_637537812, NTI637536814), tail: nimCopy(null, tailInHEX60gensym59_637537813, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym59_637537811, NTI33554439), value: []}, NTI637536654);

  return result_637537815;

}
      
function HEX3Aanonymous_637537818(input_637537819) {
            var Temporary2;
          var Temporary3;

        var result_637537821 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637537822 = succeedImpl_637537803;
          var fail_637537823 = failImpl_637537810;
          Label1: do {
            var tempHEX60gensym24_637537836 = parse_637537552(a_637537789, input_637537819);
            if ((tempHEX60gensym24_637537836.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637537836;
            if (ConstSet37[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637537821 = nimCopy(result_637537821, {kind: 1, fromInput: nimCopy(null, input_637537819, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637537836.tail, NTI33554439), value: []}, NTI637536654);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637537842 = nimCopy(null, tempHEX60gensym24_637537836, NTI637536168);
          var Temporary3 = result1_637537842;
          if (ConstSet38[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637537821 = nimCopy(result_637537821, succeed_637537822(input_637537819, fn_637537791(Temporary3.value), result1_637537842.tail), NTI637536654);
          break BeforeRet;
        } while (false);

        return result_637537821;

      }

  var result_637537792 = null;

    Label1: do {
    } while (false);
    result_637537792 = {body: HEX3Aanonymous_637537818};

  return result_637537792;

}

function nop_637537102() {

function succeedImpl_637537115(inputInHEX60gensym49_637537116, valueInHEX60gensym49_637537117, tailInHEX60gensym49_637537118) {
  var result_637537120 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537120 = nimCopy(result_637537120, {kind: 0, value: nimCopy(null, valueInHEX60gensym49_637537117, NTI637536222), tail: nimCopy(null, tailInHEX60gensym49_637537118, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_637537116, NTI33554439), expected: []}, NTI637536168);

  return result_637537120;

}

function failImpl_637537134(inputInHEX60gensym49_637537135, expectedInHEX60gensym49_637537136, tailInHEX60gensym49_637537137) {
  var result_637537139 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537139 = nimCopy(result_637537139, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym49_637537136, NTI637536249), tail: nimCopy(null, tailInHEX60gensym49_637537137, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_637537135, NTI33554439), value: []}, NTI637536168);

  return result_637537139;

}
      
function HEX3Aanonymous_637537142(input_637537143) {
        var result_637537145 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_637537146 = succeedImpl_637537115;
          var fail_637537147 = failImpl_637537134;
          result_637537145 = nimCopy(result_637537145, succeed_637537146(input_637537143, [], input_637537143), NTI637536168);

        return result_637537145;

      }

  var result_637537104 = null;

    Label1: do {
    } while (false);
    result_637537104 = {body: HEX3Aanonymous_637537142};

  return result_637537104;

}

function parse_637537302(p_637537304, input_637537305) {
  var result_637537306 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_637537304.body == null)) {
    result_637537306 = nimCopy(result_637537306, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_637537305, NTI33554439), fromInput: nimCopy(null, input_637537305, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
    break BeforeRet;
    }
    
    result_637537306 = nimCopy(result_637537306, p_637537304.body(input_637537305), NTI637536153);
  } while (false);

  return result_637537306;

}

function map_637537256(a_637537259, fn_637537261) {

function succeedImpl_637537273(inputInHEX60gensym51_637537274, valueInHEX60gensym51_637537275, tailInHEX60gensym51_637537276) {
  var result_637537278 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537278 = nimCopy(result_637537278, {kind: 0, value: nimCopy(null, valueInHEX60gensym51_637537275, NTI637536318), tail: nimCopy(null, tailInHEX60gensym51_637537276, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym51_637537274, NTI33554439), expected: []}, NTI637536168);

  return result_637537278;

}

function failImpl_637537280(inputInHEX60gensym51_637537281, expectedInHEX60gensym51_637537282, tailInHEX60gensym51_637537283) {
  var result_637537285 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537285 = nimCopy(result_637537285, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym51_637537282, NTI637536369), tail: nimCopy(null, tailInHEX60gensym51_637537283, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym51_637537281, NTI33554439), value: []}, NTI637536168);

  return result_637537285;

}
      
function HEX3Aanonymous_637537288(input_637537289) {
            var Temporary2;
          var Temporary3;

        var result_637537291 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637537292 = succeedImpl_637537273;
          var fail_637537293 = failImpl_637537280;
          Label1: do {
            var tempHEX60gensym24_637537330 = parse_637537302(a_637537259, input_637537289);
            if ((tempHEX60gensym24_637537330.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637537330;
            if (ConstSet39[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637537291 = nimCopy(result_637537291, {kind: 1, fromInput: nimCopy(null, input_637537289, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637537330.tail, NTI33554439), value: []}, NTI637536168);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637537336 = nimCopy(null, tempHEX60gensym24_637537330, NTI637536153);
          var Temporary3 = result1_637537336;
          if (ConstSet40[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637537291 = nimCopy(result_637537291, succeed_637537292(input_637537289, fn_637537261(Temporary3.value), result1_637537336.tail), NTI637536168);
          break BeforeRet;
        } while (false);

        return result_637537291;

      }

  var result_637537262 = null;

    Label1: do {
    } while (false);
    result_637537262 = {body: HEX3Aanonymous_637537288};

  return result_637537262;

}

function HEX2A_637537094(a_637537096, n_637537097) {
    var Temporary1;
      
function HEX3Aanonymous_637537210(x_637537239) {
        var result_637537242 = [];

          result_637537242 = nimCopy(null, [nimCopy(null, x_637537239, NTI671088644)], NTI637536318);

        return result_637537242;

      }

function succeedImpl_637537347(inputInHEX60gensym52_637537348, valueInHEX60gensym52_637537349, tailInHEX60gensym52_637537350) {
  var result_637537352 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537352 = nimCopy(result_637537352, {kind: 0, value: nimCopy(null, valueInHEX60gensym52_637537349, NTI637536428), tail: nimCopy(null, tailInHEX60gensym52_637537350, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym52_637537348, NTI33554439), expected: []}, NTI637536168);

  return result_637537352;

}

function failImpl_637537354(inputInHEX60gensym52_637537355, expectedInHEX60gensym52_637537356, tailInHEX60gensym52_637537357) {
  var result_637537359 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537359 = nimCopy(result_637537359, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym52_637537356, NTI637536434), tail: nimCopy(null, tailInHEX60gensym52_637537357, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym52_637537355, NTI33554439), value: []}, NTI637536168);

  return result_637537359;

}
        
function HEX3Aanonymous_637537362(input_637537363) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_637537365 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_637537366 = succeedImpl_637537347;
            var fail_637537367 = failImpl_637537354;
            Label1: do {
              var tempHEX60gensym38_637537380 = parse_637537302(a_637537096, input_637537363);
              if ((tempHEX60gensym38_637537380.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_637537380;
              if (ConstSet41[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
              result_637537365 = nimCopy(result_637537365, {kind: 1, fromInput: nimCopy(null, input_637537363, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym38_637537380.tail, NTI33554439), value: []}, NTI637536168);
              break BeforeRet;
              }
              
            } while (false);
            var result1_637537386 = nimCopy(null, tempHEX60gensym38_637537380, NTI637536153);
            var Temporary3 = result1_637537386;
            if (ConstSet42[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
            var outputs_637537391 = [nimCopy(null, Temporary3.value, NTI671088644)];
            var lastTail_637537392 = nimCopy(null, result1_637537386.tail, NTI33554439);
            Label4: do {
              var i_637537398 = 0;
              var res_503316602 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_503316602 <= n_637537097)) break Label6;
                    i_637537398 = res_503316602;
                    Label7: do {
                      var tempHEX60gensym40_637537411 = parse_637537302(a_637537096, result1_637537386.tail);
                      if ((tempHEX60gensym40_637537411.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_637537411;
                      if (ConstSet43[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1207959573)); }
                      result_637537365 = nimCopy(result_637537365, {kind: 1, fromInput: nimCopy(null, input_637537363, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym40_637537411.tail, NTI33554439), value: []}, NTI637536168);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_637537386 = nimCopy(result1_637537386, tempHEX60gensym40_637537411, NTI637536153);
                    if (eqStrings(result1_637537386.tail, lastTail_637537392)) {
                    break Label4;
                    }
                    
                    lastTail_637537392 = nimCopy(null, result1_637537386.tail, NTI33554439);
                    var Temporary9 = result1_637537386;
                    if (ConstSet44[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1207959573)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI671088644);
                    outputs_637537391.push(Temporary10);;
                    res_503316602 = addInt(res_503316602, 1);
                  }
              } while (false);
            } while (false);
            result_637537365 = nimCopy(result_637537365, succeed_637537366(input_637537363, outputs_637537391, result1_637537386.tail), NTI637536168);
          } while (false);

          return result_637537365;

        }

  var result_637537101 = null;

  BeforeRet: do {
    switch (n_637537097) {
    case 0:
      result_637537101 = nop_637537102();
      break BeforeRet;
      break;
    case 1:
      result_637537101 = map_637537256(a_637537096, HEX3Aanonymous_637537210);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_637537362};
      break;
    }
    result_637537101 = Temporary1;
  } while (false);

  return result_637537101;

}

function nop_637537623() {

function succeedImpl_637537636(inputInHEX60gensym57_637537637, valueInHEX60gensym57_637537638, tailInHEX60gensym57_637537639) {
  var result_637537641 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537641 = nimCopy(result_637537641, {kind: 0, value: nimCopy(null, valueInHEX60gensym57_637537638, NTI637536661), tail: nimCopy(null, tailInHEX60gensym57_637537639, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym57_637537637, NTI33554439), expected: []}, NTI637536654);

  return result_637537641;

}

function failImpl_637537664(inputInHEX60gensym57_637537665, expectedInHEX60gensym57_637537666, tailInHEX60gensym57_637537667) {
  var result_637537669 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537669 = nimCopy(result_637537669, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym57_637537666, NTI637536694), tail: nimCopy(null, tailInHEX60gensym57_637537667, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym57_637537665, NTI33554439), value: []}, NTI637536654);

  return result_637537669;

}
      
function HEX3Aanonymous_637537672(input_637537673) {
        var result_637537675 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_637537676 = succeedImpl_637537636;
          var fail_637537677 = failImpl_637537664;
          result_637537675 = nimCopy(result_637537675, succeed_637537676(input_637537673, [], input_637537673), NTI637536654);

        return result_637537675;

      }

  var result_637537625 = null;

    Label1: do {
    } while (false);
    result_637537625 = {body: HEX3Aanonymous_637537672};

  return result_637537625;

}

function HEX2A_637537610(a_637537612, n_637537613) {
    var Temporary1;
      
function HEX3Aanonymous_637537740(x_637537769) {
        var result_637537772 = [];

          result_637537772 = nimCopy(null, [nimCopy(null, x_637537769, NTI637536162)], NTI637536763);

        return result_637537772;

      }

function succeedImpl_637537853(inputInHEX60gensym60_637537854, valueInHEX60gensym60_637537855, tailInHEX60gensym60_637537856) {
  var result_637537858 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537858 = nimCopy(result_637537858, {kind: 0, value: nimCopy(null, valueInHEX60gensym60_637537855, NTI637536854), tail: nimCopy(null, tailInHEX60gensym60_637537856, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym60_637537854, NTI33554439), expected: []}, NTI637536654);

  return result_637537858;

}

function failImpl_637537860(inputInHEX60gensym60_637537861, expectedInHEX60gensym60_637537862, tailInHEX60gensym60_637537863) {
  var result_637537865 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537865 = nimCopy(result_637537865, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym60_637537862, NTI637536860), tail: nimCopy(null, tailInHEX60gensym60_637537863, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym60_637537861, NTI33554439), value: []}, NTI637536654);

  return result_637537865;

}
        
function HEX3Aanonymous_637537868(input_637537869) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_637537871 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_637537872 = succeedImpl_637537853;
            var fail_637537873 = failImpl_637537860;
            Label1: do {
              var tempHEX60gensym38_637537886 = parse_637537552(a_637537612, input_637537869);
              if ((tempHEX60gensym38_637537886.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_637537886;
              if (ConstSet45[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
              result_637537871 = nimCopy(result_637537871, {kind: 1, fromInput: nimCopy(null, input_637537869, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym38_637537886.tail, NTI33554439), value: []}, NTI637536654);
              break BeforeRet;
              }
              
            } while (false);
            var result1_637537892 = nimCopy(null, tempHEX60gensym38_637537886, NTI637536168);
            var Temporary3 = result1_637537892;
            if (ConstSet46[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
            var outputs_637537897 = [nimCopy(null, Temporary3.value, NTI637536162)];
            var lastTail_637537898 = nimCopy(null, result1_637537892.tail, NTI33554439);
            Label4: do {
              var i_637537904 = 0;
              var res_503316611 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_503316611 <= n_637537613)) break Label6;
                    i_637537904 = res_503316611;
                    Label7: do {
                      var tempHEX60gensym40_637537917 = parse_637537552(a_637537612, result1_637537892.tail);
                      if ((tempHEX60gensym40_637537917.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_637537917;
                      if (ConstSet47[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1207959573)); }
                      result_637537871 = nimCopy(result_637537871, {kind: 1, fromInput: nimCopy(null, input_637537869, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym40_637537917.tail, NTI33554439), value: []}, NTI637536654);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_637537892 = nimCopy(result1_637537892, tempHEX60gensym40_637537917, NTI637536168);
                    if (eqStrings(result1_637537892.tail, lastTail_637537898)) {
                    break Label4;
                    }
                    
                    lastTail_637537898 = nimCopy(null, result1_637537892.tail, NTI33554439);
                    var Temporary9 = result1_637537892;
                    if (ConstSet48[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1207959573)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI637536162);
                    outputs_637537897.push(Temporary10);;
                    res_503316611 = addInt(res_503316611, 1);
                  }
              } while (false);
            } while (false);
            result_637537871 = nimCopy(result_637537871, succeed_637537872(input_637537869, outputs_637537897, result1_637537892.tail), NTI637536654);
          } while (false);

          return result_637537871;

        }

  var result_637537622 = null;

  BeforeRet: do {
    switch (n_637537613) {
    case 0:
      result_637537622 = nop_637537623();
      break BeforeRet;
      break;
    case 1:
      result_637537622 = map_637537786(a_637537612, HEX3Aanonymous_637537740);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_637537868};
      break;
    }
    result_637537622 = Temporary1;
  } while (false);

  return result_637537622;

}

function HEX7C_637537508(a_637537510, b_637537511) {

function succeedImpl_637537523(inputInHEX60gensym56_637537524, valueInHEX60gensym56_637537525, tailInHEX60gensym56_637537526) {
  var result_637537528 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537528 = nimCopy(result_637537528, {kind: 0, value: nimCopy(null, valueInHEX60gensym56_637537525, NTI637536162), tail: nimCopy(null, tailInHEX60gensym56_637537526, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym56_637537524, NTI33554439), expected: []}, NTI637536168);

  return result_637537528;

}

function failImpl_637537530(inputInHEX60gensym56_637537531, expectedInHEX60gensym56_637537532, tailInHEX60gensym56_637537533) {
  var result_637537535 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637537535 = nimCopy(result_637537535, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym56_637537532, NTI637536598), tail: nimCopy(null, tailInHEX60gensym56_637537533, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym56_637537531, NTI33554439), value: []}, NTI637536168);

  return result_637537535;

}
      
function HEX3Aanonymous_637537538(input_637537539) {
          var Temporary1;
          var Temporary2;

        var result_637537541 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637537542 = succeedImpl_637537523;
          var fail_637537543 = failImpl_637537530;
          var result1_637537568 = parse_637537552(a_637537510, input_637537539);
          if ((result1_637537568.kind == 0)) {
          result_637537541 = nimCopy(result_637537541, result1_637537568, NTI637536168);
          break BeforeRet;
          }
          
          var result2_637537585 = parse_637537552(b_637537511, input_637537539);
          if ((result2_637537585.kind == 0)) {
          result_637537541 = nimCopy(result_637537541, result2_637537585, NTI637536168);
          break BeforeRet;
          }
          
          var Temporary1 = result1_637537568;
          if (ConstSet49[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1207959573)); }
          var Temporary2 = result2_637537585;
          if (ConstSet50[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
          result_637537541 = nimCopy(result_637537541, fail_637537543(input_637537539, HEX26_671088761(Temporary1.expected, Temporary2.expected), input_637537539), NTI637536168);
        } while (false);

        return result_637537541;

      }

  var result_637537512 = null;

    Label1: do {
    } while (false);
    result_637537512 = {body: HEX3Aanonymous_637537538};

  return result_637537512;

}

function newSeq_671088990(len_671088992) {
  var result_671088993 = [];

    result_671088993 = new Array(len_671088992); for (var i = 0 ; i < len_671088992 ; ++i) { result_671088993[i] = ({rows: [], baseline: 0, width: 0, flag: 0}); }
  return result_671088993;

}

function HEX26_637538220(x_637538222, y_637538223) {
  var result_637538224 = [];

    result_637538224 = new Array(chckRange(addInt((x_637538222).length, (y_637538223).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_637538222).length, (y_637538223).length), 0, 2147483647) ; ++i) { result_637538224[i] = ({rows: [], baseline: 0, width: 0, flag: 0}); }    Label1: do {
      var i_637538242 = 0;
      var colontmp__503316621 = 0;
      colontmp__503316621 = subInt((x_637538222).length, 1);
      var res_503316622 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316622 <= colontmp__503316621)) break Label3;
            i_637538242 = res_503316622;
            result_637538224[chckIndx(i_637538242, 0, (result_637538224).length - 1)] = nimCopy(result_637538224[chckIndx(i_637538242, 0, (result_637538224).length - 1)], x_637538222[chckIndx(i_637538242, 0, (x_637538222).length - 1)], NTI671088644);
            res_503316622 = addInt(res_503316622, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_637538250 = 0;
      var colontmp__503316625 = 0;
      colontmp__503316625 = subInt((y_637538223).length, 1);
      var res_503316626 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_503316626 <= colontmp__503316625)) break Label6;
            i_637538250 = res_503316626;
            result_637538224[chckIndx(addInt(i_637538250, (x_637538222).length), 0, (result_637538224).length - 1)] = nimCopy(result_637538224[chckIndx(addInt(i_637538250, (x_637538222).length), 0, (result_637538224).length - 1)], y_637538223[chckIndx(i_637538250, 0, (y_637538223).length - 1)], NTI671088644);
            res_503316626 = addInt(res_503316626, 1);
          }
      } while (false);
    } while (false);

  return result_637538224;

}

function height_671088690(rect_671088691) {
  var result_671088692 = 0;

    result_671088692 = chckRange((rect_671088691.rows).length, 0, 2147483647);

  return result_671088692;

}

function isEmpty_671088696(rect_671088697) {
  var result_671088698 = false;

    result_671088698 = (height_671088690(rect_671088697) == 0);

  return result_671088698;

}

function HEX3DHEX3D_671089070(x_671089072, y_671089073) {
  var result_671089074 = false;

  BeforeRet: do {
    var sameObject_671089081 = false;
    sameObject_671089081 = x_671089072 === y_671089073
    if (sameObject_671089081) {
    result_671089074 = true;
    break BeforeRet;
    }
    
    if (!(((x_671089072).length == (y_671089073).length))) {
    result_671089074 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_671089095 = 0;
      var colontmp__503316681 = 0;
      colontmp__503316681 = subInt((x_671089072).length, 1);
      var res_503316682 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316682 <= colontmp__503316681)) break Label3;
            i_671089095 = res_503316682;
            if (!(eqStrings(x_671089072[chckIndx(i_671089095, 0, (x_671089072).length - 1)], y_671089073[chckIndx(i_671089095, 0, (y_671089073).length - 1)]))) {
            result_671089074 = false;
            break BeforeRet;
            }
            
            res_503316682 = addInt(res_503316682, 1);
          }
      } while (false);
    } while (false);
    result_671089074 = true;
    break BeforeRet;
  } while (false);

  return result_671089074;

}

function HEX3DHEX3D_671089060(x_671089062, y_671089063) {
  var result_671089064 = false;

  BeforeRet: do {
    if (!(HEX3DHEX3D_671089070(x_671089062.rows, y_671089063.rows))) {
    result_671089064 = false;
    break BeforeRet;
    }
    
    if (!((x_671089062.baseline == y_671089063.baseline))) {
    result_671089064 = false;
    break BeforeRet;
    }
    
    if (!((x_671089062.width == y_671089063.width))) {
    result_671089064 = false;
    break BeforeRet;
    }
    
    if (!((x_671089062.flag == y_671089063.flag))) {
    result_671089064 = false;
    break BeforeRet;
    }
    
    result_671089064 = true;
    break BeforeRet;
  } while (false);

  return result_671089064;

}

function HEX3DHEX3D_671089034(x_671089036, y_671089037) {
  var result_671089038 = false;

  BeforeRet: do {
    var sameObject_671089045 = false;
    sameObject_671089045 = x_671089036 === y_671089037
    if (sameObject_671089045) {
    result_671089038 = true;
    break BeforeRet;
    }
    
    if (!(((x_671089036).length == (y_671089037).length))) {
    result_671089038 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_671089059 = 0;
      var colontmp__503316677 = 0;
      colontmp__503316677 = subInt((x_671089036).length, 1);
      var res_503316678 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316678 <= colontmp__503316677)) break Label3;
            i_671089059 = res_503316678;
            if (!(HEX3DHEX3D_671089060(x_671089036[chckIndx(i_671089059, 0, (x_671089036).length - 1)], y_671089037[chckIndx(i_671089059, 0, (y_671089037).length - 1)]))) {
            result_671089038 = false;
            break BeforeRet;
            }
            
            res_503316678 = addInt(res_503316678, 1);
          }
      } while (false);
    } while (false);
    result_671089038 = true;
    break BeforeRet;
  } while (false);

  return result_671089038;

}

function extendRight_671088852(rect_671088853) {
    Label1: do {
      var row_671088857 = null;
      var row_671088857_Idx = 0;
      var i_503316686 = 0;
      var L_503316687 = (rect_671088853.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316686 < L_503316687)) break Label3;
            row_671088857 = rect_671088853.rows; row_671088857_Idx = chckIndx(i_503316686, 0, (rect_671088853.rows).length - 1);
            row_671088857[row_671088857_Idx].push.apply(row_671088857[row_671088857_Idx], makeNimstrLit(" "));;
            i_503316686 = addInt(i_503316686, 1);
            if (!(((rect_671088853.rows).length == L_503316687))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rect_671088853.width = addInt(rect_671088853.width, 1);

  
}

function extendLeft_671088807(rect_671088808) {
    Label1: do {
      var row_671088829 = null;
      var row_671088829_Idx = 0;
      var i_503316690 = 0;
      var L_503316691 = (rect_671088808.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316690 < L_503316691)) break Label3;
            row_671088829 = rect_671088808.rows; row_671088829_Idx = chckIndx(i_503316690, 0, (rect_671088808.rows).length - 1);
            row_671088829[row_671088829_Idx] = nimCopy(null, (makeNimstrLit(" ") || []).concat(row_671088829[row_671088829_Idx] || []), NTI33554439);
            i_503316690 = addInt(i_503316690, 1);
            if (!(((rect_671088808.rows).length == L_503316691))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rect_671088808.width = addInt(rect_671088808.width, 1);

  
}

function max_671089242(x_671089244) {
  var result_671089245 = 0;

    result_671089245 = x_671089244[chckIndx(0, 0, (x_671089244).length - 1)];
    Label1: do {
      var i_671089253 = 0;
      var colontmp__503316694 = 0;
      colontmp__503316694 = (x_671089244).length - 1;
      var res_503316695 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316695 <= colontmp__503316694)) break Label3;
            i_671089253 = res_503316695;
            if ((result_671089245 < x_671089244[chckIndx(i_671089253, 0, (x_671089244).length - 1)])) {
            result_671089245 = x_671089244[chckIndx(i_671089253, 0, (x_671089244).length - 1)];
            }
            
            res_503316695 = addInt(res_503316695, 1);
          }
      } while (false);
    } while (false);

  return result_671089245;

}

function newSeq_671089216(len_671089218) {
  var result_671089219 = [];

    result_671089219 = new Array(len_671089218); for (var i = 0 ; i < len_671089218 ; ++i) { result_671089219[i] = 0; }
  return result_671089219;

}

function repeat_671088748(x_671088750, n_671088751) {
  var result_671088752 = [];

    result_671088752 = nimCopy(null, newSeq_452985301(n_671088751), NTI452985127);
    Label1: do {
      var i_671088760 = 0;
      var colontmp__503316698 = 0;
      colontmp__503316698 = n_671088751;
      var i_503316699 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316699 < colontmp__503316698)) break Label3;
            i_671088760 = i_503316699;
            result_671088752[chckIndx(i_671088760, 0, (result_671088752).length - 1)] = nimCopy(null, x_671088750, NTI33554439);
            i_503316699 = addInt(i_503316699, 1);
          }
      } while (false);
    } while (false);

  return result_671088752;

}

function nsuRepeatChar(c_687866875, count_687866876) {
  var result_687866877 = [];

    result_687866877 = nimCopy(null, mnewString(count_687866876), NTI33554439);
    Label1: do {
      var i_687866882 = 0;
      var colontmp__503316702 = 0;
      colontmp__503316702 = subInt(count_687866876, 1);
      var res_503316703 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316703 <= colontmp__503316702)) break Label3;
            i_687866882 = res_503316703;
            result_687866877[chckIndx(i_687866882, 0, (result_687866877).length - 1)] = c_687866875;
            res_503316703 = addInt(res_503316703, 1);
          }
      } while (false);
    } while (false);

  return result_687866877;

}

function extendUp_671088744(rect_671088745, num_671088746) {
  var result_671088747 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_671088747.rows = nimCopy(null, HEX26_671088761(repeat_671088748(nsuRepeatChar(32, rect_671088745.width), num_671088746), rect_671088745.rows), NTI671088712);
    result_671088747.baseline = addInt(rect_671088745.baseline, num_671088746);
    result_671088747.width = rect_671088745.width;

  return result_671088747;

}

function max_671089319(x_671089321) {
  var result_671089322 = 0;

    result_671089322 = x_671089321[chckIndx(0, 0, (x_671089321).length - 1)];
    Label1: do {
      var i_671089330 = 0;
      var colontmp__503316706 = 0;
      colontmp__503316706 = (x_671089321).length - 1;
      var res_503316707 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316707 <= colontmp__503316706)) break Label3;
            i_671089330 = res_503316707;
            if ((result_671089322 < x_671089321[chckIndx(i_671089330, 0, (x_671089321).length - 1)])) {
            result_671089322 = x_671089321[chckIndx(i_671089330, 0, (x_671089321).length - 1)];
            }
            
            res_503316707 = addInt(res_503316707, 1);
          }
      } while (false);
    } while (false);

  return result_671089322;

}

function newSeq_671089293(len_671089295) {
  var result_671089296 = [];

    result_671089296 = new Array(len_671089295); for (var i = 0 ; i < len_671089295 ; ++i) { result_671089296[i] = 0; }
  return result_671089296;

}

function extendDown_671088795(rect_671088796, num_671088797) {
  var result_671088798 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_671088798.rows = nimCopy(null, HEX26_671088761(rect_671088796.rows, repeat_671088748(nsuRepeatChar(32, rect_671088796.width), num_671088797)), NTI671088712);
    result_671088798.baseline = rect_671088796.baseline;
    result_671088798.width = rect_671088796.width;

  return result_671088798;

}

function nsuJoinSep(a_687867281, sep_687867282) {
  var result_687867283 = [];

    if ((0 < (a_687867281).length)) {
    var L_687867290 = mulInt((sep_687867282).length, subInt((a_687867281).length, 1));
    Label1: do {
      var i_687867298 = 0;
      var colontmp__503316710 = 0;
      colontmp__503316710 = (a_687867281).length - 1;
      var res_503316711 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316711 <= colontmp__503316710)) break Label3;
            i_687867298 = res_503316711;
            L_687867290 = addInt(L_687867290, (a_687867281[chckIndx(i_687867298, 0, (a_687867281).length - 1)]).length);
            res_503316711 = addInt(res_503316711, 1);
          }
      } while (false);
    } while (false);
    result_687867283 = nimCopy(null, mnewString(0), NTI33554439);
    result_687867283.push.apply(result_687867283, a_687867281[chckIndx(0, 0, (a_687867281).length - 1)]);;
    Label4: do {
      var i_687867310 = 0;
      var colontmp__503316714 = 0;
      colontmp__503316714 = (a_687867281).length - 1;
      var res_503316715 = 1;
      Label5: do {
          Label6: while (true) {
          if (!(res_503316715 <= colontmp__503316714)) break Label6;
            i_687867310 = res_503316715;
            result_687867283.push.apply(result_687867283, sep_687867282);;
            result_687867283.push.apply(result_687867283, a_687867281[chckIndx(i_687867310, 0, (a_687867281).length - 1)]);;
            res_503316715 = addInt(res_503316715, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_687867283 = nimCopy(null, [], NTI33554439);
    }
    

  return result_687867283;

}

function sum_671089459(x_671089461) {
  var result_671089462 = 0;

    Label1: do {
      var i_671089475 = 0;
      var i_503316719 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316719 < (x_671089461).length)) break Label3;
            i_671089475 = x_671089461[i_503316719];
            result_671089462 = (result_671089462 + i_671089475);
            i_503316719 += 1;
          }
      } while (false);
    } while (false);

  return result_671089462;

}

function join_671088862(rects_671088863) {
                var Temporary11;
                var Temporary12;
                var Temporary13;

  var result_671088864 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    Label1: do {
      var iHEX60gensym10_671088985 = 0;
      var resultHEX60gensym10_671088998 = newSeq_671088990(chckRange((rects_671088863).length, 0, 2147483647));
      Label2: do {
        var itHEX60gensym10_671089002 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_503316631 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_503316631 < (rects_671088863).length)) break Label4;
              itHEX60gensym10_671089002 = rects_671088863[chckIndx(i_503316631, 0, (rects_671088863).length - 1)];
              resultHEX60gensym10_671088998[chckIndx(iHEX60gensym10_671088985, 0, (resultHEX60gensym10_671088998).length - 1)] = nimCopy(resultHEX60gensym10_671088998[chckIndx(iHEX60gensym10_671088985, 0, (resultHEX60gensym10_671088998).length - 1)], itHEX60gensym10_671089002, NTI671088644);
              iHEX60gensym10_671088985 = addInt(iHEX60gensym10_671088985, 1);
              i_503316631 = addInt(i_503316631, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var rects_671089007 = [nimCopy(null, resultHEX60gensym10_671088998, NTI671088854)];
    var posHEX60gensym13_671089011 = 0;
    Label5: do {
      var iHEX60gensym13_671089020 = 0;
      var colontmp__503316634 = 0;
      colontmp__503316634 = (rects_671089007[0]).length;
      var i_503316635 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(i_503316635 < colontmp__503316634)) break Label7;
            iHEX60gensym13_671089020 = i_503316635;
            var it_671089021 = nimCopy(null, rects_671089007[0][chckIndx(iHEX60gensym13_671089020, 0, (rects_671089007[0]).length - 1)], NTI671088644);
            if (!(isEmpty_671088696(it_671089021))) {
            if (!((posHEX60gensym13_671089011 == iHEX60gensym13_671089020))) {
            rects_671089007[0][chckIndx(posHEX60gensym13_671089011, 0, (rects_671089007[0]).length - 1)] = nimCopy(rects_671089007[0][chckIndx(posHEX60gensym13_671089011, 0, (rects_671089007[0]).length - 1)], rects_671089007[0][chckIndx(iHEX60gensym13_671089020, 0, (rects_671089007[0]).length - 1)], NTI671088644);
            }
            
            posHEX60gensym13_671089011 = addInt(posHEX60gensym13_671089011, 1);
            }
            
            i_503316635 = addInt(i_503316635, 1);
          }
      } while (false);
    } while (false);
    if (rects_671089007[0].length < chckRange(posHEX60gensym13_671089011, 0, 2147483647)) { for (var i = rects_671089007[0].length ; i < chckRange(posHEX60gensym13_671089011, 0, 2147483647) ; ++i) rects_671089007[0].push(({rows: [], baseline: 0, width: 0, flag: 0})); }
               else { rects_671089007[0].length = chckRange(posHEX60gensym13_671089011, 0, 2147483647); };
    if (HEX3DHEX3D_671089034(rects_671089007[0], [])) {
    break BeforeRet;
    }
    
    if (((rects_671089007[0]).length == 1)) {
    result_671088864 = nimCopy(result_671088864, rects_671089007[0][chckIndx(0, 0, (rects_671089007[0]).length - 1)], NTI671088644);
    break BeforeRet;
    }
    
    Label8: do {
      var i_671089144 = 0;
      var rect_671089145 = null;
      var i_503316639 = 0;
      var L_503316640 = (rects_671089007[0]).length;
      Label9: do {
          Label10: while (true) {
          if (!(i_503316639 < L_503316640)) break Label10;
            i_671089144 = i_503316639;
            rect_671089145 = rects_671089007[0][chckIndx(i_503316639, 0, (rects_671089007[0]).length - 1)];
            switch (rect_671089145.flag) {
            case 8:
              if (!((i_671089144 == (rects_671089007[0]).length - 1))) {
              extendRight_671088852(rect_671089145);
              }
              
              break;
            case 2:
            case 3:
              if (!((i_671089144 == (rects_671089007[0]).length - 1))) {
              extendRight_671088852(rect_671089145);
              }
              
                if (!!((i_671089144 == 0))) Temporary11 = false; else {                  Temporary11 = !((ConstSet51[rects_671089007[0][chckIndx(subInt(i_671089144, 1), 0, (rects_671089007[0]).length - 1)].flag] != undefined));                }              if (Temporary11) {
              extendLeft_671088807(rect_671089145);
              }
              
              break;
            case 4:
                if (!!((i_671089144 == (rects_671089007[0]).length - 1))) Temporary12 = false; else {                  Temporary12 = (ConstSet52[rects_671089007[0][chckIndx(addInt(i_671089144, 1), 0, (rects_671089007[0]).length - 1)].flag] != undefined);                }              if (Temporary12) {
              extendRight_671088852(rect_671089145);
              }
              
                if (!!((i_671089144 == 0))) Temporary13 = false; else {                  Temporary13 = (ConstSet53[rects_671089007[0][chckIndx(subInt(i_671089144, 1), 0, (rects_671089007[0]).length - 1)].flag] != undefined);                }              if (Temporary13) {
              extendLeft_671088807(rect_671089145);
              }
              
              break;
            default: 
              break;
            }
            i_503316639 = addInt(i_503316639, 1);
            if (!(((rects_671089007[0]).length == L_503316640))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    Label14: do {
      var iHEX60gensym25_671089212 = 0;
      var resultHEX60gensym25_671089233 = newSeq_671089216(chckRange((rects_671089007[0]).length, 0, 2147483647));
      Label15: do {
        var it_671089237 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_503316645 = 0;
        var L_503316646 = (rects_671089007[0]).length;
        Label16: do {
            Label17: while (true) {
            if (!(i_503316645 < L_503316646)) break Label17;
              it_671089237 = rects_671089007[0][chckIndx(i_503316645, 0, (rects_671089007[0]).length - 1)];
              resultHEX60gensym25_671089233[chckIndx(iHEX60gensym25_671089212, 0, (resultHEX60gensym25_671089233).length - 1)] = it_671089237.baseline;
              iHEX60gensym25_671089212 = addInt(iHEX60gensym25_671089212, 1);
              i_503316645 = addInt(i_503316645, 1);
              if (!(((rects_671089007[0]).length == L_503316646))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var maxBaseline_671089254 = max_671089242(resultHEX60gensym25_671089233);
    Label18: do {
      var iHEX60gensym30_671089266 = 0;
      var colontmp__503316649 = 0;
      colontmp__503316649 = (rects_671089007[0]).length - 1;
      var res_503316650 = 0;
      Label19: do {
          Label20: while (true) {
          if (!(res_503316650 <= colontmp__503316649)) break Label20;
            iHEX60gensym30_671089266 = res_503316650;
            var it_671089267 = nimCopy(null, rects_671089007[0][chckIndx(iHEX60gensym30_671089266, 0, (rects_671089007[0]).length - 1)], NTI671088644);
            rects_671089007[0][chckIndx(iHEX60gensym30_671089266, 0, (rects_671089007[0]).length - 1)] = nimCopy(rects_671089007[0][chckIndx(iHEX60gensym30_671089266, 0, (rects_671089007[0]).length - 1)], extendUp_671088744(it_671089267, chckRange(subInt(maxBaseline_671089254, it_671089267.baseline), 0, 2147483647)), NTI671088644);
            res_503316650 = addInt(res_503316650, 1);
          }
      } while (false);
    } while (false);
    Label21: do {
      var iHEX60gensym31_671089289 = 0;
      var resultHEX60gensym31_671089310 = newSeq_671089293(chckRange((rects_671089007[0]).length, 0, 2147483647));
      Label22: do {
        var it_671089314 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_503316654 = 0;
        var L_503316655 = (rects_671089007[0]).length;
        Label23: do {
            Label24: while (true) {
            if (!(i_503316654 < L_503316655)) break Label24;
              it_671089314 = rects_671089007[0][chckIndx(i_503316654, 0, (rects_671089007[0]).length - 1)];
              resultHEX60gensym31_671089310[chckIndx(iHEX60gensym31_671089289, 0, (resultHEX60gensym31_671089310).length - 1)] = height_671088690(it_671089314);
              iHEX60gensym31_671089289 = addInt(iHEX60gensym31_671089289, 1);
              i_503316654 = addInt(i_503316654, 1);
              if (!(((rects_671089007[0]).length == L_503316655))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var maxHeight_671089331 = max_671089319(resultHEX60gensym31_671089310);
    Label25: do {
      var iHEX60gensym34_671089343 = 0;
      var colontmp__503316658 = 0;
      colontmp__503316658 = (rects_671089007[0]).length - 1;
      var res_503316659 = 0;
      Label26: do {
          Label27: while (true) {
          if (!(res_503316659 <= colontmp__503316658)) break Label27;
            iHEX60gensym34_671089343 = res_503316659;
            var it_671089344 = nimCopy(null, rects_671089007[0][chckIndx(iHEX60gensym34_671089343, 0, (rects_671089007[0]).length - 1)], NTI671088644);
            rects_671089007[0][chckIndx(iHEX60gensym34_671089343, 0, (rects_671089007[0]).length - 1)] = nimCopy(rects_671089007[0][chckIndx(iHEX60gensym34_671089343, 0, (rects_671089007[0]).length - 1)], extendDown_671088795(it_671089344, chckRange(subInt(maxHeight_671089331, height_671088690(it_671089344)), 0, 2147483647)), NTI671088644);
            res_503316659 = addInt(res_503316659, 1);
          }
      } while (false);
    } while (false);
    result_671088864.rows = nimCopy(null, newSeq_452985301(height_671088690(rects_671089007[0][chckIndx(0, 0, (rects_671089007[0]).length - 1)])), NTI452985127);
    Label28: do {
      var i_671089383 = 0;
      var row_671089384 = null;
      var row_671089384_Idx = 0;
      var i_503316668 = 0;
      var L_503316669 = (result_671088864.rows).length;
      Label29: do {
          Label30: while (true) {
          if (!(i_503316668 < L_503316669)) break Label30;
            i_671089383 = i_503316668;
            row_671089384 = result_671088864.rows; row_671089384_Idx = chckIndx(i_503316668, 0, (result_671088864.rows).length - 1);
            Label31: do {
              var iHEX60gensym37_671089406 = 0;
              var resultHEX60gensym37_671089413 = newSeq_452985301(chckRange((rects_671089007[0]).length, 0, 2147483647));
              Label32: do {
                var it_671089417 = ({rows: [], baseline: 0, width: 0, flag: 0});
                var i_503316664 = 0;
                var L_503316665 = (rects_671089007[0]).length;
                Label33: do {
                    Label34: while (true) {
                    if (!(i_503316664 < L_503316665)) break Label34;
                      it_671089417 = rects_671089007[0][chckIndx(i_503316664, 0, (rects_671089007[0]).length - 1)];
                      resultHEX60gensym37_671089413[chckIndx(iHEX60gensym37_671089406, 0, (resultHEX60gensym37_671089413).length - 1)] = nimCopy(null, it_671089417.rows[chckIndx(i_671089383, 0, (it_671089417.rows).length - 1)], NTI33554439);
                      iHEX60gensym37_671089406 = addInt(iHEX60gensym37_671089406, 1);
                      i_503316664 = addInt(i_503316664, 1);
                      if (!(((rects_671089007[0]).length == L_503316665))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            row_671089384[row_671089384_Idx] = nimCopy(null, nsuJoinSep(resultHEX60gensym37_671089413, []), NTI33554439);
            i_503316668 = addInt(i_503316668, 1);
            if (!(((result_671088864.rows).length == L_503316669))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_671088864.baseline = rects_671089007[0][chckIndx(0, 0, (rects_671089007[0]).length - 1)].baseline;
    Label35: do {
      var iHEX60gensym40_671089443 = 0;
      var resultHEX60gensym40_671089450 = newSeq_671089293(chckRange((rects_671089007[0]).length, 0, 2147483647));
      Label36: do {
        var it_671089454 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_503316673 = 0;
        var L_503316674 = (rects_671089007[0]).length;
        Label37: do {
            Label38: while (true) {
            if (!(i_503316673 < L_503316674)) break Label38;
              it_671089454 = rects_671089007[0][chckIndx(i_503316673, 0, (rects_671089007[0]).length - 1)];
              resultHEX60gensym40_671089450[chckIndx(iHEX60gensym40_671089443, 0, (resultHEX60gensym40_671089450).length - 1)] = it_671089454.width;
              iHEX60gensym40_671089443 = addInt(iHEX60gensym40_671089443, 1);
              i_503316673 = addInt(i_503316673, 1);
              if (!(((rects_671089007[0]).length == L_503316674))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_671088864.width = sum_671089459(resultHEX60gensym40_671089450);
  } while (false);

  return result_671088864;

}

function map_637538565(a_637538568, fn_637538570) {

function succeedImpl_637538582(inputInHEX60gensym71_637538583, valueInHEX60gensym71_637538584, tailInHEX60gensym71_637538585) {
  var result_637538587 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637538587 = nimCopy(result_637538587, {kind: 0, value: nimCopy(null, valueInHEX60gensym71_637538584, NTI671088644), tail: nimCopy(null, tailInHEX60gensym71_637538585, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym71_637538583, NTI33554439), expected: []}, NTI637536153);

  return result_637538587;

}

function failImpl_637538589(inputInHEX60gensym71_637538590, expectedInHEX60gensym71_637538591, tailInHEX60gensym71_637538592) {
  var result_637538594 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637538594 = nimCopy(result_637538594, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym71_637538591, NTI637537465), tail: nimCopy(null, tailInHEX60gensym71_637538592, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym71_637538590, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637538594;

}
      
function HEX3Aanonymous_637538597(input_637538598) {
            var Temporary2;
          var Temporary3;

        var result_637538600 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637538601 = succeedImpl_637538582;
          var fail_637538602 = failImpl_637538589;
          Label1: do {
            var tempHEX60gensym24_637538615 = parse_1207960522(a_637538568, input_637538598);
            if ((tempHEX60gensym24_637538615.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637538615;
            if (ConstSet54[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637538600 = nimCopy(result_637538600, {kind: 1, fromInput: nimCopy(null, input_637538598, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637538615.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637538621 = nimCopy(null, tempHEX60gensym24_637538615, NTI1207959782);
          var Temporary3 = result1_637538621;
          if (ConstSet55[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637538600 = nimCopy(result_637538600, succeed_637538601(input_637538598, fn_637538570(Temporary3.value), result1_637538621.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637538600;

      }

  var result_637538571 = null;

    Label1: do {
    } while (false);
    result_637538571 = {body: HEX3Aanonymous_637538597};

  return result_637538571;

}

function nucruneLen(s_989855754) {
  var result_989855755 = 0;

    result_989855755 = 0;
    var i_989855756 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_989855756 < (s_989855754).length)) break Label2;
          if ((s_989855754[chckIndx(i_989855756, 0, (s_989855754).length - 1)] <= 127)) {
          i_989855756 = addInt(i_989855756, 1);
          }
          else {
          if (((s_989855754[chckIndx(i_989855756, 0, (s_989855754).length - 1)] >>> 5) == 6)) {
          i_989855756 = addInt(i_989855756, 2);
          }
          else {
          if (((s_989855754[chckIndx(i_989855756, 0, (s_989855754).length - 1)] >>> 4) == 14)) {
          i_989855756 = addInt(i_989855756, 3);
          }
          else {
          if (((s_989855754[chckIndx(i_989855756, 0, (s_989855754).length - 1)] >>> 3) == 30)) {
          i_989855756 = addInt(i_989855756, 4);
          }
          else {
          if (((s_989855754[chckIndx(i_989855756, 0, (s_989855754).length - 1)] >>> 2) == 62)) {
          i_989855756 = addInt(i_989855756, 5);
          }
          else {
          if (((s_989855754[chckIndx(i_989855756, 0, (s_989855754).length - 1)] >>> 1) == 126)) {
          i_989855756 = addInt(i_989855756, 6);
          }
          else {
          i_989855756 = addInt(i_989855756, 1);
          }
          }}}}}
          result_989855755 = addInt(result_989855755, 1);
        }
    } while (false);

  return result_989855755;

}

function toTextRectOneLine_671088735(s_671088736, baseline_671088737, flag_671088738) {
  var result_671088739 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    if (eqStrings(s_671088736, [])) {
    result_671088739.flag = flag_671088738;
    break BeforeRet;
    }
    
    result_671088739.rows = nimCopy(null, [nimCopy(null, s_671088736, NTI33554439)], NTI671088697);
    result_671088739.width = chckRange(nucruneLen(s_671088736), 0, 2147483647);
    result_671088739.baseline = baseline_671088737;
    result_671088739.flag = flag_671088738;
  } while (false);

  return result_671088739;

}

function HEX7C_637539652(a_637539654, b_637539655) {

function succeedImpl_637539667(inputInHEX60gensym92_637539668, valueInHEX60gensym92_637539669, tailInHEX60gensym92_637539670) {
  var result_637539672 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637539672 = nimCopy(result_637539672, {kind: 0, value: nimCopy(null, valueInHEX60gensym92_637539669, NTI671088644), tail: nimCopy(null, tailInHEX60gensym92_637539670, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym92_637539668, NTI33554439), expected: []}, NTI637536153);

  return result_637539672;

}

function failImpl_637539674(inputInHEX60gensym92_637539675, expectedInHEX60gensym92_637539676, tailInHEX60gensym92_637539677) {
  var result_637539679 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637539679 = nimCopy(result_637539679, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym92_637539676, NTI637538319), tail: nimCopy(null, tailInHEX60gensym92_637539677, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym92_637539675, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637539679;

}
      
function HEX3Aanonymous_637539682(input_637539683) {
          var Temporary1;
          var Temporary2;

        var result_637539685 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637539686 = succeedImpl_637539667;
          var fail_637539687 = failImpl_637539674;
          var result1_637539700 = parse_637537302(a_637539654, input_637539683);
          if ((result1_637539700.kind == 0)) {
          result_637539685 = nimCopy(result_637539685, result1_637539700, NTI637536153);
          break BeforeRet;
          }
          
          var result2_637539717 = parse_637537302(b_637539655, input_637539683);
          if ((result2_637539717.kind == 0)) {
          result_637539685 = nimCopy(result_637539685, result2_637539717, NTI637536153);
          break BeforeRet;
          }
          
          var Temporary1 = result1_637539700;
          if (ConstSet56[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1207959573)); }
          var Temporary2 = result2_637539717;
          if (ConstSet57[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
          result_637539685 = nimCopy(result_637539685, fail_637539687(input_637539683, HEX26_671088761(Temporary1.expected, Temporary2.expected), input_637539683), NTI637536153);
        } while (false);

        return result_637539685;

      }

  var result_637539656 = null;

    Label1: do {
    } while (false);
    result_637539656 = {body: HEX3Aanonymous_637539682};

  return result_637539656;

}

function HEX3CHEX3DHEX25_33555429(x_33555430, y_33555431) {
  var result_33555432 = false;

    result_33555432 = ((x_33555430 >>> 0) <= (y_33555431 >>> 0));

  return result_33555432;

}

function nuctoUTF8(c_989856085) {
  var result_989856086 = [];

    result_989856086 = nimCopy(null, [], NTI33554439);
    var iHEX60gensym49_989856088 = c_989856085;
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_989856088, 127)) {
    (result_989856086.length = 1);
    result_989856086[chckIndx(0, 0, (result_989856086).length - 1)] = chckRange(iHEX60gensym49_989856088, 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_989856088, 2047)) {
    (result_989856086.length = 2);
    result_989856086[chckIndx(0, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 >> 6) | 192), 0, 255);
    result_989856086[chckIndx(1, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_989856088, 65535)) {
    (result_989856086.length = 3);
    result_989856086[chckIndx(0, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 >> 12) | 224), 0, 255);
    result_989856086[chckIndx(1, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 6) & 63) | 128), 0, 255);
    result_989856086[chckIndx(2, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_989856088, 2097151)) {
    (result_989856086.length = 4);
    result_989856086[chckIndx(0, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 >> 18) | 240), 0, 255);
    result_989856086[chckIndx(1, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 12) & 63) | 128), 0, 255);
    result_989856086[chckIndx(2, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 6) & 63) | 128), 0, 255);
    result_989856086[chckIndx(3, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_989856088, 67108863)) {
    (result_989856086.length = 5);
    result_989856086[chckIndx(0, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 >> 24) | 248), 0, 255);
    result_989856086[chckIndx(1, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 18) & 63) | 128), 0, 255);
    result_989856086[chckIndx(2, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 12) & 63) | 128), 0, 255);
    result_989856086[chckIndx(3, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 6) & 63) | 128), 0, 255);
    result_989856086[chckIndx(4, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_989856088, 2147483647)) {
    (result_989856086.length = 6);
    result_989856086[chckIndx(0, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 >> 30) | 252), 0, 255);
    result_989856086[chckIndx(1, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 24) & 63) | 128), 0, 255);
    result_989856086[chckIndx(2, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 18) & 63) | 128), 0, 255);
    result_989856086[chckIndx(3, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 12) & 63) | 128), 0, 255);
    result_989856086[chckIndx(4, 0, (result_989856086).length - 1)] = chckRange((((iHEX60gensym49_989856088 >> 6) & 63) | 128), 0, 255);
    result_989856086[chckIndx(5, 0, (result_989856086).length - 1)] = chckRange(((iHEX60gensym49_989856088 & 63) | 128), 0, 255);
    }
    else {
    }
    }}}}}

  return result_989856086;

}

function HEX24_989856335(rune_989856336) {
  var result_989856337 = [];

    result_989856337 = nimCopy(null, nuctoUTF8(rune_989856336), NTI33554439);

  return result_989856337;

}

function inFont_654311608(letter_654311609, font_654311610) {
    var Temporary4;

  var result_654311611 = [];

  BeforeRet: do {
    Label1: do {
      var lhs_654311633 = 0;
      var rhs_654311634 = [];
      var colontmp__503316725 = [];
      colontmp__503316725 = fontExceptions_654311562[chckIndx(font_654311610, 0, (fontExceptions_654311562).length - 1)];
      var i_503316727 = 0;
      var L_503316728 = (colontmp__503316725).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316727 < L_503316728)) break Label3;
            lhs_654311633 = colontmp__503316725[chckIndx(i_503316727, 0, (colontmp__503316725).length - 1)]["Field0"];
            rhs_654311634 = colontmp__503316725[chckIndx(i_503316727, 0, (colontmp__503316725).length - 1)]["Field1"];
            if ((letter_654311609 == lhs_654311633)) {
            result_654311611 = nimCopy(null, rhs_654311634, NTI33554439);
            break BeforeRet;
            }
            
            i_503316727 = addInt(i_503316727, 1);
            if (!(((colontmp__503316725).length == L_503316728))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (contains_654311705(HEX2EHEX2E_654311635(65, 90), letter_654311609)) {
    Temporary4 = 65;
    }
    else {
    Temporary4 = 71;
    }
    
    var shift_654311712 = Temporary4;
    result_654311611 = nimCopy(null, HEX24_989856335(((subInt(addInt(fontStarts_654311541[chckIndx(font_654311610, 0, (fontStarts_654311541).length - 1)], letter_654311609), shift_654311712)) | 0)), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_654311611;

}

function map_637539588(s_637539591, op_637539593) {
  var result_637539594 = [];

    result_637539594 = new Array(chckRange((s_637539591).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_637539591).length, 0, 2147483647) ; ++i) { result_637539594[i] = null; }    Label1: do {
      var i_637539610 = 0;
      var colontmp__503316731 = 0;
      colontmp__503316731 = (s_637539591).length;
      var i_503316732 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316732 < colontmp__503316731)) break Label3;
            i_637539610 = i_503316732;
            result_637539594[chckIndx(i_637539610, 0, (result_637539594).length - 1)] = op_637539593(s_637539591[chckIndx(i_637539610, 0, (s_637539591).length - 1)]);
            i_503316732 = addInt(i_503316732, 1);
          }
      } while (false);
    } while (false);

  return result_637539594;

}

function HEX3CHEX3C_637539060(a_637539063, b_637539064) {

function succeedImpl_637539076(inputInHEX60gensym76_637539077, valueInHEX60gensym76_637539078, tailInHEX60gensym76_637539079) {
  var result_637539081 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637539081 = nimCopy(result_637539081, {kind: 0, value: valueInHEX60gensym76_637539078, tail: nimCopy(null, tailInHEX60gensym76_637539079, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym76_637539077, NTI33554439), expected: []}, NTI1207959782);

  return result_637539081;

}

function failImpl_637539083(inputInHEX60gensym76_637539084, expectedInHEX60gensym76_637539085, tailInHEX60gensym76_637539086) {
  var result_637539088 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637539088 = nimCopy(result_637539088, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym76_637539085, NTI637537818), tail: nimCopy(null, tailInHEX60gensym76_637539086, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym76_637539084, NTI33554439), value: 0}, NTI1207959782);

  return result_637539088;

}
      
function HEX3Aanonymous_637539091(input_637539092) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637539094 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637539095 = succeedImpl_637539076;
          var fail_637539096 = failImpl_637539083;
          Label1: do {
            var tempHEX60gensym30_637539109 = parse_1207960522(a_637539063, input_637539092);
            if ((tempHEX60gensym30_637539109.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_637539109;
            if (ConstSet58[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637539094 = nimCopy(result_637539094, {kind: 1, fromInput: nimCopy(null, input_637539092, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym30_637539109.tail, NTI33554439), value: 0}, NTI1207959782);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637539115 = nimCopy(null, tempHEX60gensym30_637539109, NTI1207959782);
          Label3: do {
            var tempHEX60gensym32_637539128 = parse_1207960522(b_637539064, result1_637539115.tail);
            if ((tempHEX60gensym32_637539128.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_637539128;
            if (ConstSet59[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637539094 = nimCopy(result_637539094, {kind: 1, fromInput: nimCopy(null, input_637539092, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym32_637539128.tail, NTI33554439), value: 0}, NTI1207959782);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637539134 = nimCopy(null, tempHEX60gensym32_637539128, NTI1207959782);
          var Temporary5 = result1_637539115;
          if (ConstSet60[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637539094 = nimCopy(result_637539094, succeed_637539095(input_637539092, Temporary5.value, result2_637539134.tail), NTI1207959782);
          break BeforeRet;
        } while (false);

        return result_637539094;

      }

  var result_637539065 = null;

    Label1: do {
    } while (false);
    result_637539065 = {body: HEX3Aanonymous_637539091};

  return result_637539065;

}

function HEX3CHEX3C_637538977(a_637538980, b_637538981) {

function succeedImpl_637538993(inputInHEX60gensym75_637538994, valueInHEX60gensym75_637538995, tailInHEX60gensym75_637538996) {
  var result_637538998 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637538998 = nimCopy(result_637538998, {kind: 0, value: valueInHEX60gensym75_637538995, tail: nimCopy(null, tailInHEX60gensym75_637538996, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym75_637538994, NTI33554439), expected: []}, NTI1207959782);

  return result_637538998;

}

function failImpl_637539000(inputInHEX60gensym75_637539001, expectedInHEX60gensym75_637539002, tailInHEX60gensym75_637539003) {
  var result_637539005 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637539005 = nimCopy(result_637539005, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym75_637539002, NTI637537757), tail: nimCopy(null, tailInHEX60gensym75_637539003, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym75_637539001, NTI33554439), value: 0}, NTI1207959782);

  return result_637539005;

}
      
function HEX3Aanonymous_637539008(input_637539009) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637539011 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637539012 = succeedImpl_637538993;
          var fail_637539013 = failImpl_637539000;
          Label1: do {
            var tempHEX60gensym30_637539026 = parse_1207960522(a_637538980, input_637539009);
            if ((tempHEX60gensym30_637539026.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_637539026;
            if (ConstSet61[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637539011 = nimCopy(result_637539011, {kind: 1, fromInput: nimCopy(null, input_637539009, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym30_637539026.tail, NTI33554439), value: 0}, NTI1207959782);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637539032 = nimCopy(null, tempHEX60gensym30_637539026, NTI1207959782);
          Label3: do {
            var tempHEX60gensym32_637539045 = parse_637536259(b_637538981, result1_637539032.tail);
            if ((tempHEX60gensym32_637539045.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_637539045;
            if (ConstSet62[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637539011 = nimCopy(result_637539011, {kind: 1, fromInput: nimCopy(null, input_637539009, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym32_637539045.tail, NTI33554439), value: 0}, NTI1207959782);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637539051 = nimCopy(null, tempHEX60gensym32_637539045, NTI637535056);
          var Temporary5 = result1_637539032;
          if (ConstSet63[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637539011 = nimCopy(result_637539011, succeed_637539012(input_637539009, Temporary5.value, result2_637539051.tail), NTI1207959782);
          break BeforeRet;
        } while (false);

        return result_637539011;

      }

  var result_637538982 = null;

    Label1: do {
    } while (false);
    result_637538982 = {body: HEX3Aanonymous_637539008};

  return result_637538982;

}

function HEX3EHEX3E_637538798(a_637538801, b_637538802) {

function succeedImpl_637538814(inputInHEX60gensym73_637538815, valueInHEX60gensym73_637538816, tailInHEX60gensym73_637538817) {
  var result_637538819 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637538819 = nimCopy(result_637538819, {kind: 0, value: valueInHEX60gensym73_637538816, tail: nimCopy(null, tailInHEX60gensym73_637538817, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym73_637538815, NTI33554439), expected: []}, NTI1207959782);

  return result_637538819;

}

function failImpl_637538821(inputInHEX60gensym73_637538822, expectedInHEX60gensym73_637538823, tailInHEX60gensym73_637538824) {
  var result_637538826 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637538826 = nimCopy(result_637538826, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym73_637538823, NTI637537630), tail: nimCopy(null, tailInHEX60gensym73_637538824, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym73_637538822, NTI33554439), value: 0}, NTI1207959782);

  return result_637538826;

}
      
function HEX3Aanonymous_637538829(input_637538830) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637538832 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637538833 = succeedImpl_637538814;
          var fail_637538834 = failImpl_637538821;
          Label1: do {
            var tempHEX60gensym34_637538847 = parse_637536259(a_637538801, input_637538830);
            if ((tempHEX60gensym34_637538847.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637538847;
            if (ConstSet64[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637538832 = nimCopy(result_637538832, {kind: 1, fromInput: nimCopy(null, input_637538830, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637538847.tail, NTI33554439), value: 0}, NTI1207959782);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637538853 = nimCopy(null, tempHEX60gensym34_637538847, NTI637535056);
          Label3: do {
            var tempHEX60gensym36_637538866 = parse_1207960522(b_637538802, result1_637538853.tail);
            if ((tempHEX60gensym36_637538866.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637538866;
            if (ConstSet65[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637538832 = nimCopy(result_637538832, {kind: 1, fromInput: nimCopy(null, input_637538830, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637538866.tail, NTI33554439), value: 0}, NTI1207959782);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637538872 = nimCopy(null, tempHEX60gensym36_637538866, NTI1207959782);
          var Temporary5 = result2_637538872;
          if (ConstSet66[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637538832 = nimCopy(result_637538832, succeed_637538833(input_637538830, Temporary5.value, result2_637538872.tail), NTI1207959782);
          break BeforeRet;
        } while (false);

        return result_637538832;

      }

  var result_637538803 = null;

    Label1: do {
    } while (false);
    result_637538803 = {body: HEX3Aanonymous_637538829};

  return result_637538803;

}

function HEX3EHEX3E_637538881(a_637538884, b_637538885) {

function succeedImpl_637538897(inputInHEX60gensym74_637538898, valueInHEX60gensym74_637538899, tailInHEX60gensym74_637538900) {
  var result_637538902 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637538902 = nimCopy(result_637538902, {kind: 0, value: nimCopy(null, valueInHEX60gensym74_637538899, NTI637535050), tail: nimCopy(null, tailInHEX60gensym74_637538900, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym74_637538898, NTI33554439), expected: []}, NTI637535056);

  return result_637538902;

}

function failImpl_637538904(inputInHEX60gensym74_637538905, expectedInHEX60gensym74_637538906, tailInHEX60gensym74_637538907) {
  var result_637538909 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637538909 = nimCopy(result_637538909, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym74_637538906, NTI637537691), tail: nimCopy(null, tailInHEX60gensym74_637538907, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym74_637538905, NTI33554439), value: []}, NTI637535056);

  return result_637538909;

}
      
function HEX3Aanonymous_637538912(input_637538913) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637538915 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637538916 = succeedImpl_637538897;
          var fail_637538917 = failImpl_637538904;
          Label1: do {
            var tempHEX60gensym34_637538930 = parse_1207960522(a_637538884, input_637538913);
            if ((tempHEX60gensym34_637538930.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637538930;
            if (ConstSet67[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637538915 = nimCopy(result_637538915, {kind: 1, fromInput: nimCopy(null, input_637538913, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637538930.tail, NTI33554439), value: []}, NTI637535056);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637538936 = nimCopy(null, tempHEX60gensym34_637538930, NTI1207959782);
          Label3: do {
            var tempHEX60gensym36_637538949 = parse_637536259(b_637538885, result1_637538936.tail);
            if ((tempHEX60gensym36_637538949.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637538949;
            if (ConstSet68[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637538915 = nimCopy(result_637538915, {kind: 1, fromInput: nimCopy(null, input_637538913, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637538949.tail, NTI33554439), value: []}, NTI637535056);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637538955 = nimCopy(null, tempHEX60gensym36_637538949, NTI637535056);
          var Temporary5 = result2_637538955;
          if (ConstSet69[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637538915 = nimCopy(result_637538915, succeed_637538916(input_637538913, Temporary5.value, result2_637538955.tail), NTI637535056);
          break BeforeRet;
        } while (false);

        return result_637538915;

      }

  var result_637538886 = null;

    Label1: do {
    } while (false);
    result_637538886 = {body: HEX3Aanonymous_637538912};

  return result_637538886;

}

function HEX3EHEX3E_637538715(a_637538718, b_637538719) {

function succeedImpl_637538731(inputInHEX60gensym72_637538732, valueInHEX60gensym72_637538733, tailInHEX60gensym72_637538734) {
  var result_637538736 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637538736 = nimCopy(result_637538736, {kind: 0, value: nimCopy(null, valueInHEX60gensym72_637538733, NTI637535050), tail: nimCopy(null, tailInHEX60gensym72_637538734, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym72_637538732, NTI33554439), expected: []}, NTI637535056);

  return result_637538736;

}

function failImpl_637538738(inputInHEX60gensym72_637538739, expectedInHEX60gensym72_637538740, tailInHEX60gensym72_637538741) {
  var result_637538743 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637538743 = nimCopy(result_637538743, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym72_637538740, NTI637537569), tail: nimCopy(null, tailInHEX60gensym72_637538741, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym72_637538739, NTI33554439), value: []}, NTI637535056);

  return result_637538743;

}
      
function HEX3Aanonymous_637538746(input_637538747) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637538749 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637538750 = succeedImpl_637538731;
          var fail_637538751 = failImpl_637538738;
          Label1: do {
            var tempHEX60gensym34_637538764 = parse_637536021(a_637538718, input_637538747);
            if ((tempHEX60gensym34_637538764.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637538764;
            if (ConstSet70[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637538749 = nimCopy(result_637538749, {kind: 1, fromInput: nimCopy(null, input_637538747, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637538764.tail, NTI33554439), value: []}, NTI637535056);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637538770 = nimCopy(null, tempHEX60gensym34_637538764, NTI1207959684);
          Label3: do {
            var tempHEX60gensym36_637538783 = parse_637536259(b_637538719, result1_637538770.tail);
            if ((tempHEX60gensym36_637538783.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637538783;
            if (ConstSet71[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637538749 = nimCopy(result_637538749, {kind: 1, fromInput: nimCopy(null, input_637538747, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637538783.tail, NTI33554439), value: []}, NTI637535056);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637538789 = nimCopy(null, tempHEX60gensym36_637538783, NTI637535056);
          var Temporary5 = result2_637538789;
          if (ConstSet72[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637538749 = nimCopy(result_637538749, succeed_637538750(input_637538747, Temporary5.value, result2_637538789.tail), NTI637535056);
          break BeforeRet;
        } while (false);

        return result_637538749;

      }

  var result_637538720 = null;

    Label1: do {
    } while (false);
    result_637538720 = {body: HEX3Aanonymous_637538746};

  return result_637538720;

}

function nsuStartsWith(s_687867169, prefix_687867170) {
            var Temporary3;

  var result_687867171 = false;

  BeforeRet: do {
    var prefixLenHEX60gensym141_687867176 = (prefix_687867170).length;
    var sLenHEX60gensym141_687867177 = (s_687867169).length;
    var iHEX60gensym141_687867178 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym141_687867176 <= iHEX60gensym141_687867178)) {
          result_687867171 = true;
          break BeforeRet;
          }
          
            if ((sLenHEX60gensym141_687867177 <= iHEX60gensym141_687867178)) Temporary3 = true; else {              Temporary3 = !((s_687867169[chckIndx(iHEX60gensym141_687867178, 0, (s_687867169).length - 1)] == prefix_687867170[chckIndx(iHEX60gensym141_687867178, 0, (prefix_687867170).length - 1)]));            }          if (Temporary3) {
          result_687867171 = false;
          break BeforeRet;
          }
          
          iHEX60gensym141_687867178 = addInt(iHEX60gensym141_687867178, 1);
        }
    } while (false);
  } while (false);

  return result_687867171;

}

function s_1207959663(expect_1207959664) {

function succeedImpl_1207959685(inputInHEX60gensym2_1207959686, valueInHEX60gensym2_1207959687, tailInHEX60gensym2_1207959688) {
  var result_1207959690 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1207959690 = nimCopy(result_1207959690, {kind: 0, value: nimCopy(null, valueInHEX60gensym2_1207959687, NTI33554439), tail: nimCopy(null, tailInHEX60gensym2_1207959688, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym2_1207959686, NTI33554439), expected: []}, NTI1207959684);

  return result_1207959690;

}

function failImpl_1207959713(inputInHEX60gensym2_1207959714, expectedInHEX60gensym2_1207959715, tailInHEX60gensym2_1207959716) {
  var result_1207959718 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1207959718 = nimCopy(result_1207959718, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym2_1207959715, NTI1207959718), tail: nimCopy(null, tailInHEX60gensym2_1207959716, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym2_1207959714, NTI33554439), value: []}, NTI1207959684);

  return result_1207959718;

}
      expect_1207959664 = nimCopy(null, expect_1207959664, NTI33554439);
      
function HEX3Aanonymous_1207959721(input_1207959722) {
        var result_1207959724 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1207959725 = succeedImpl_1207959685;
          var fail_1207959726 = failImpl_1207959713;
          if (nsuStartsWith(input_1207959722, expect_1207959664)) {
          result_1207959724 = nimCopy(result_1207959724, succeed_1207959725(input_1207959722, expect_1207959664, HEX5BHEX5D_989858970(input_1207959722, HEX2EHEX2E_922746960((expect_1207959664).length, 1))), NTI1207959684);
          break BeforeRet;
          }
          
          result_1207959724 = nimCopy(result_1207959724, fail_1207959726(input_1207959722, [nsuFormatSingleElem(makeNimstrLit("\'$1\'"), expect_1207959664)], input_1207959722), NTI1207959684);
        } while (false);

        return result_1207959724;

      }

  var result_1207959674 = null;

    Label1: do {
    } while (false);
    result_1207959674 = {body: HEX3Aanonymous_1207959721};

  return result_1207959674;

}

function c_1207959785(expect_1207959786) {

function succeedImpl_1207959807(inputInHEX60gensym5_1207959808, valueInHEX60gensym5_1207959809, tailInHEX60gensym5_1207959810) {
  var result_1207959812 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1207959812 = nimCopy(result_1207959812, {kind: 0, value: valueInHEX60gensym5_1207959809, tail: nimCopy(null, tailInHEX60gensym5_1207959810, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym5_1207959808, NTI33554439), expected: []}, NTI1207959782);

  return result_1207959812;

}

function failImpl_1207959826(inputInHEX60gensym5_1207959827, expectedInHEX60gensym5_1207959828, tailInHEX60gensym5_1207959829) {
  var result_1207959831 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1207959831 = nimCopy(result_1207959831, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym5_1207959828, NTI1207959810), tail: nimCopy(null, tailInHEX60gensym5_1207959829, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym5_1207959827, NTI33554439), value: 0}, NTI1207959782);

  return result_1207959831;

}
      
function HEX3Aanonymous_1207959834(input_1207959835) {
            var Temporary1;

        var result_1207959837 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1207959838 = succeedImpl_1207959807;
          var fail_1207959839 = failImpl_1207959826;
            if (!(0 < (input_1207959835).length)) Temporary1 = false; else {              Temporary1 = (input_1207959835[chckIndx(0, 0, (input_1207959835).length - 1)] == expect_1207959786);            }          if (Temporary1) {
          result_1207959837 = nimCopy(result_1207959837, succeed_1207959838(input_1207959835, expect_1207959786, HEX5BHEX5D_989858970(input_1207959835, HEX2EHEX2E_922746960(1, 1))), NTI1207959782);
          break BeforeRet;
          }
          
          result_1207959837 = nimCopy(result_1207959837, fail_1207959839(input_1207959835, [nsuFormatSingleElem(makeNimstrLit("\'$1\'"), nimCharToStr(expect_1207959786))], input_1207959835), NTI1207959782);
        } while (false);

        return result_1207959837;

      }

  var result_1207959796 = null;

    Label1: do {
    } while (false);
    result_1207959796 = {body: HEX3Aanonymous_1207959834};

  return result_1207959796;

}

function map_637540039(s_637540042, op_637540044) {
  var result_637540045 = [];

    result_637540045 = new Array(chckRange((s_637540042).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_637540042).length, 0, 2147483647) ; ++i) { result_637540045[i] = null; }    Label1: do {
      var i_637540060 = 0;
      var colontmp__503316757 = 0;
      colontmp__503316757 = (s_637540042).length;
      var i_503316758 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316758 < colontmp__503316757)) break Label3;
            i_637540060 = i_503316758;
            result_637540045[chckIndx(i_637540060, 0, (result_637540045).length - 1)] = op_637540044(s_637540042[chckIndx(i_637540060, 0, (s_637540042).length - 1)]);
            i_503316758 = addInt(i_503316758, 1);
          }
      } while (false);
    } while (false);

  return result_637540045;

}

function map_637539927(a_637539930, fn_637539932) {

function succeedImpl_637539944(inputInHEX60gensym96_637539945, valueInHEX60gensym96_637539946, tailInHEX60gensym96_637539947) {
  var result_637539949 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637539949 = nimCopy(result_637539949, {kind: 0, value: nimCopy(null, valueInHEX60gensym96_637539946, NTI671088644), tail: nimCopy(null, tailInHEX60gensym96_637539947, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym96_637539945, NTI33554439), expected: []}, NTI637536153);

  return result_637539949;

}

function failImpl_637539951(inputInHEX60gensym96_637539952, expectedInHEX60gensym96_637539953, tailInHEX60gensym96_637539954) {
  var result_637539956 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637539956 = nimCopy(result_637539956, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym96_637539953, NTI637538514), tail: nimCopy(null, tailInHEX60gensym96_637539954, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym96_637539952, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637539956;

}
      
function HEX3Aanonymous_637539959(input_637539960) {
            var Temporary2;
          var Temporary3;

        var result_637539962 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637539963 = succeedImpl_637539944;
          var fail_637539964 = failImpl_637539951;
          Label1: do {
            var tempHEX60gensym24_637539977 = parse_637536021(a_637539930, input_637539960);
            if ((tempHEX60gensym24_637539977.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637539977;
            if (ConstSet73[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637539962 = nimCopy(result_637539962, {kind: 1, fromInput: nimCopy(null, input_637539960, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637539977.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637539983 = nimCopy(null, tempHEX60gensym24_637539977, NTI1207959684);
          var Temporary3 = result1_637539983;
          if (ConstSet74[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637539962 = nimCopy(result_637539962, succeed_637539963(input_637539960, fn_637539932(Temporary3.value), result1_637539983.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637539962;

      }

  var result_637539933 = null;

    Label1: do {
    } while (false);
    result_637539933 = {body: HEX3Aanonymous_637539959};

  return result_637539933;

}

function HEX3CHEX3C_637539813(a_637539816, b_637539817) {

function succeedImpl_637539829(inputInHEX60gensym94_637539830, valueInHEX60gensym94_637539831, tailInHEX60gensym94_637539832) {
  var result_637539834 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637539834 = nimCopy(result_637539834, {kind: 0, value: nimCopy(null, valueInHEX60gensym94_637539831, NTI33554439), tail: nimCopy(null, tailInHEX60gensym94_637539832, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym94_637539830, NTI33554439), expected: []}, NTI1207959684);

  return result_637539834;

}

function failImpl_637539836(inputInHEX60gensym94_637539837, expectedInHEX60gensym94_637539838, tailInHEX60gensym94_637539839) {
  var result_637539841 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637539841 = nimCopy(result_637539841, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym94_637539838, NTI637538428), tail: nimCopy(null, tailInHEX60gensym94_637539839, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym94_637539837, NTI33554439), value: []}, NTI1207959684);

  return result_637539841;

}
      
function HEX3Aanonymous_637539844(input_637539845) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637539847 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637539848 = succeedImpl_637539829;
          var fail_637539849 = failImpl_637539836;
          Label1: do {
            var tempHEX60gensym30_637539862 = parse_637536021(a_637539816, input_637539845);
            if ((tempHEX60gensym30_637539862.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_637539862;
            if (ConstSet75[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637539847 = nimCopy(result_637539847, {kind: 1, fromInput: nimCopy(null, input_637539845, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym30_637539862.tail, NTI33554439), value: []}, NTI1207959684);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637539868 = nimCopy(null, tempHEX60gensym30_637539862, NTI1207959684);
          Label3: do {
            var tempHEX60gensym32_637539881 = parse_1207960522(b_637539817, result1_637539868.tail);
            if ((tempHEX60gensym32_637539881.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_637539881;
            if (ConstSet76[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637539847 = nimCopy(result_637539847, {kind: 1, fromInput: nimCopy(null, input_637539845, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym32_637539881.tail, NTI33554439), value: []}, NTI1207959684);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637539887 = nimCopy(null, tempHEX60gensym32_637539881, NTI1207959782);
          var Temporary5 = result1_637539868;
          if (ConstSet77[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637539847 = nimCopy(result_637539847, succeed_637539848(input_637539845, Temporary5.value, result2_637539887.tail), NTI1207959684);
          break BeforeRet;
        } while (false);

        return result_637539847;

      }

  var result_637539818 = null;

    Label1: do {
    } while (false);
    result_637539818 = {body: HEX3Aanonymous_637539844};

  return result_637539818;

}

function HEX21_637539756(a_637539758) {

function succeedImpl_637539770(inputInHEX60gensym93_637539771, valueInHEX60gensym93_637539772, tailInHEX60gensym93_637539773) {
  var result_637539775 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637539775 = nimCopy(result_637539775, {kind: 0, value: valueInHEX60gensym93_637539772, tail: nimCopy(null, tailInHEX60gensym93_637539773, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym93_637539771, NTI33554439), expected: []}, NTI1207959782);

  return result_637539775;

}

function failImpl_637539777(inputInHEX60gensym93_637539778, expectedInHEX60gensym93_637539779, tailInHEX60gensym93_637539780) {
  var result_637539782 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637539782 = nimCopy(result_637539782, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym93_637539779, NTI637538383), tail: nimCopy(null, tailInHEX60gensym93_637539780, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym93_637539778, NTI33554439), value: 0}, NTI1207959782);

  return result_637539782;

}
      
function HEX3Aanonymous_637539785(input_637539786) {
        var result_637539788 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637539789 = succeedImpl_637539770;
          var fail_637539790 = failImpl_637539777;
          var result1_637539803 = parse_1207960522(a_637539758, input_637539786);
          switch (result1_637539803.kind) {
          case 0:
            result_637539788 = nimCopy(result_637539788, fail_637539790(input_637539786, [makeNimstrLit("successful negative lookahead")], input_637539786), NTI1207959782);
            break BeforeRet;
            break;
          case 1:
            result_637539788 = nimCopy(result_637539788, succeed_637539789(input_637539786, 0, input_637539786), NTI1207959782);
            break BeforeRet;
            break;
          }
        } while (false);

        return result_637539788;

      }

  var result_637539759 = null;

    Label1: do {
    } while (false);
    result_637539759 = {body: HEX3Aanonymous_637539785};

  return result_637539759;

}

function validate_637541689(p_637541691, fn_637541693, expected_637541694) {

function succeedImpl_637541706(inputInHEX60gensym129_637541707, valueInHEX60gensym129_637541708, tailInHEX60gensym129_637541709) {
  var result_637541711 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541711 = nimCopy(result_637541711, {kind: 0, value: nimCopy(null, valueInHEX60gensym129_637541708, NTI33554439), tail: nimCopy(null, tailInHEX60gensym129_637541709, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym129_637541707, NTI33554439), expected: []}, NTI1207959684);

  return result_637541711;

}

function failImpl_637541713(inputInHEX60gensym129_637541714, expectedInHEX60gensym129_637541715, tailInHEX60gensym129_637541716) {
  var result_637541718 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541718 = nimCopy(result_637541718, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym129_637541715, NTI637539941), tail: nimCopy(null, tailInHEX60gensym129_637541716, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym129_637541714, NTI33554439), value: []}, NTI1207959684);

  return result_637541718;

}
      expected_637541694 = nimCopy(null, expected_637541694, NTI33554439);
      
function HEX3Aanonymous_637541721(input_637541722) {
              var Temporary1;

        var result_637541724 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637541725 = succeedImpl_637541706;
          var fail_637541726 = failImpl_637541713;
          var result1_637541739 = parse_637536021(p_637541691, input_637541722);
          switch (result1_637541739.kind) {
          case 1:
            result_637541724 = nimCopy(result_637541724, result1_637541739, NTI1207959684);
            break BeforeRet;
            break;
          case 0:
              var Temporary1 = result1_637541739;
              if (ConstSet78[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1207959573)); }
            if (fn_637541693(Temporary1.value)) {
            result_637541724 = nimCopy(result_637541724, result1_637541739, NTI1207959684);
            break BeforeRet;
            }
            
            result_637541724 = nimCopy(result_637541724, fail_637541726(input_637541722, [nimCopy(null, expected_637541694, NTI33554439)], input_637541722), NTI1207959684);
            break BeforeRet;
            break;
          }
        } while (false);

        return result_637541724;

      }

  var result_637541695 = null;

    Label1: do {
    } while (false);
    result_637541695 = {body: HEX3Aanonymous_637541721};

  return result_637541695;

}

function parse_637540596(p_637540598, input_637540599) {
  var result_637540600 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_637540598.body == null)) {
    result_637540600 = nimCopy(result_637540600, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_637540599, NTI33554439), fromInput: nimCopy(null, input_637540599, NTI33554439), value: []}, NTI637538616);
    break BeforeRet;
    }
    
    result_637540600 = nimCopy(result_637540600, p_637540598.body(input_637540599), NTI637538616);
  } while (false);

  return result_637540600;

}

function map_637541555(a_637541558, fn_637541560) {

function succeedImpl_637541572(inputInHEX60gensym127_637541573, valueInHEX60gensym127_637541574, tailInHEX60gensym127_637541575) {
  var result_637541577 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541577 = nimCopy(result_637541577, {kind: 0, value: nimCopy(null, valueInHEX60gensym127_637541574, NTI33554439), tail: nimCopy(null, tailInHEX60gensym127_637541575, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym127_637541573, NTI33554439), expected: []}, NTI1207959684);

  return result_637541577;

}

function failImpl_637541579(inputInHEX60gensym127_637541580, expectedInHEX60gensym127_637541581, tailInHEX60gensym127_637541582) {
  var result_637541584 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541584 = nimCopy(result_637541584, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym127_637541581, NTI637539860), tail: nimCopy(null, tailInHEX60gensym127_637541582, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym127_637541580, NTI33554439), value: []}, NTI1207959684);

  return result_637541584;

}
      
function HEX3Aanonymous_637541587(input_637541588) {
            var Temporary2;
          var Temporary3;

        var result_637541590 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637541591 = succeedImpl_637541572;
          var fail_637541592 = failImpl_637541579;
          Label1: do {
            var tempHEX60gensym24_637541605 = parse_637540596(a_637541558, input_637541588);
            if ((tempHEX60gensym24_637541605.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637541605;
            if (ConstSet79[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637541590 = nimCopy(result_637541590, {kind: 1, fromInput: nimCopy(null, input_637541588, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637541605.tail, NTI33554439), value: []}, NTI1207959684);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637541611 = nimCopy(null, tempHEX60gensym24_637541605, NTI637538616);
          var Temporary3 = result1_637541611;
          if (ConstSet80[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637541590 = nimCopy(result_637541590, succeed_637541591(input_637541588, fn_637541560(Temporary3.value), result1_637541611.tail), NTI1207959684);
          break BeforeRet;
        } while (false);

        return result_637541590;

      }

  var result_637541561 = null;

    Label1: do {
    } while (false);
    result_637541561 = {body: HEX3Aanonymous_637541587};

  return result_637541561;

}

function HEX3EHEX3E_637541419(a_637541422, b_637541423) {

function succeedImpl_637541435(inputInHEX60gensym126_637541436, valueInHEX60gensym126_637541437, tailInHEX60gensym126_637541438) {
  var result_637541440 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541440 = nimCopy(result_637541440, {kind: 0, value: nimCopy(null, valueInHEX60gensym126_637541437, NTI637538610), tail: nimCopy(null, tailInHEX60gensym126_637541438, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym126_637541436, NTI33554439), expected: []}, NTI637538616);

  return result_637541440;

}

function failImpl_637541442(inputInHEX60gensym126_637541443, expectedInHEX60gensym126_637541444, tailInHEX60gensym126_637541445) {
  var result_637541447 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541447 = nimCopy(result_637541447, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym126_637541444, NTI637539761), tail: nimCopy(null, tailInHEX60gensym126_637541445, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym126_637541443, NTI33554439), value: []}, NTI637538616);

  return result_637541447;

}
      
function HEX3Aanonymous_637541450(input_637541451) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637541453 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637541454 = succeedImpl_637541435;
          var fail_637541455 = failImpl_637541442;
          Label1: do {
            var tempHEX60gensym34_637541468 = parse_1207960522(a_637541422, input_637541451);
            if ((tempHEX60gensym34_637541468.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637541468;
            if (ConstSet81[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637541453 = nimCopy(result_637541453, {kind: 1, fromInput: nimCopy(null, input_637541451, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637541468.tail, NTI33554439), value: []}, NTI637538616);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637541474 = nimCopy(null, tempHEX60gensym34_637541468, NTI1207959782);
          Label3: do {
            var tempHEX60gensym36_637541487 = parse_637540596(b_637541423, result1_637541474.tail);
            if ((tempHEX60gensym36_637541487.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637541487;
            if (ConstSet82[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637541453 = nimCopy(result_637541453, {kind: 1, fromInput: nimCopy(null, input_637541451, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637541487.tail, NTI33554439), value: []}, NTI637538616);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637541493 = nimCopy(null, tempHEX60gensym36_637541487, NTI637538616);
          var Temporary5 = result2_637541493;
          if (ConstSet83[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637541453 = nimCopy(result_637541453, succeed_637541454(input_637541451, Temporary5.value, result2_637541493.tail), NTI637538616);
          break BeforeRet;
        } while (false);

        return result_637541453;

      }

  var result_637541424 = null;

    Label1: do {
    } while (false);
    result_637541424 = {body: HEX3Aanonymous_637541450};

  return result_637541424;

}

function parse_637541128(p_637541130, input_637541131) {
  var result_637541132 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_637541130.body == null)) {
    result_637541132 = nimCopy(result_637541132, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_637541131, NTI33554439), fromInput: nimCopy(null, input_637541131, NTI33554439), value: []}, NTI637539094);
    break BeforeRet;
    }
    
    result_637541132 = nimCopy(result_637541132, p_637541130.body(input_637541131), NTI637539094);
  } while (false);

  return result_637541132;

}

function map_637541354(a_637541357, fn_637541359) {

function succeedImpl_637541371(inputInHEX60gensym125_637541372, valueInHEX60gensym125_637541373, tailInHEX60gensym125_637541374) {
  var result_637541376 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541376 = nimCopy(result_637541376, {kind: 0, value: nimCopy(null, valueInHEX60gensym125_637541373, NTI637539612), tail: nimCopy(null, tailInHEX60gensym125_637541374, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym125_637541372, NTI33554439), expected: []}, NTI637538616);

  return result_637541376;

}

function failImpl_637541378(inputInHEX60gensym125_637541379, expectedInHEX60gensym125_637541380, tailInHEX60gensym125_637541381) {
  var result_637541383 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541383 = nimCopy(result_637541383, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym125_637541380, NTI637539714), tail: nimCopy(null, tailInHEX60gensym125_637541381, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym125_637541379, NTI33554439), value: []}, NTI637538616);

  return result_637541383;

}
      
function HEX3Aanonymous_637541386(input_637541387) {
            var Temporary2;
          var Temporary3;

        var result_637541389 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637541390 = succeedImpl_637541371;
          var fail_637541391 = failImpl_637541378;
          Label1: do {
            var tempHEX60gensym24_637541404 = parse_637541128(a_637541357, input_637541387);
            if ((tempHEX60gensym24_637541404.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637541404;
            if (ConstSet84[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637541389 = nimCopy(result_637541389, {kind: 1, fromInput: nimCopy(null, input_637541387, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637541404.tail, NTI33554439), value: []}, NTI637538616);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637541410 = nimCopy(null, tempHEX60gensym24_637541404, NTI637539094);
          var Temporary3 = result1_637541410;
          if (ConstSet85[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637541389 = nimCopy(result_637541389, succeed_637541390(input_637541387, fn_637541359(Temporary3.value), result1_637541410.tail), NTI637538616);
          break BeforeRet;
        } while (false);

        return result_637541389;

      }

  var result_637541360 = null;

    Label1: do {
    } while (false);
    result_637541360 = {body: HEX3Aanonymous_637541386};

  return result_637541360;

}

function HEX26_637541170(x_637541172, y_637541173) {
  var result_637541174 = [];

    result_637541174 = new Array(chckRange(addInt((x_637541172).length, (y_637541173).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_637541172).length, (y_637541173).length), 0, 2147483647) ; ++i) { result_637541174[i] = []; }    Label1: do {
      var i_637541193 = 0;
      var colontmp__503316778 = 0;
      colontmp__503316778 = subInt((x_637541172).length, 1);
      var res_503316779 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316779 <= colontmp__503316778)) break Label3;
            i_637541193 = res_503316779;
            result_637541174[chckIndx(i_637541193, 0, (result_637541174).length - 1)] = nimCopy(null, x_637541172[chckIndx(i_637541193, 0, (x_637541172).length - 1)], NTI637538610);
            res_503316779 = addInt(res_503316779, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_637541201 = 0;
      var colontmp__503316782 = 0;
      colontmp__503316782 = subInt((y_637541173).length, 1);
      var res_503316783 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_503316783 <= colontmp__503316782)) break Label6;
            i_637541201 = res_503316783;
            result_637541174[chckIndx(addInt(i_637541201, (x_637541172).length), 0, (result_637541174).length - 1)] = nimCopy(null, y_637541173[chckIndx(i_637541201, 0, (y_637541173).length - 1)], NTI637538610);
            res_503316783 = addInt(res_503316783, 1);
          }
      } while (false);
    } while (false);

  return result_637541174;

}

function HEX26_637541075(a_637541080, b_637541084) {

function succeedImpl_637541099(inputInHEX60gensym119_637541100, valueInHEX60gensym119_637541101, tailInHEX60gensym119_637541102) {
  var result_637541104 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541104 = nimCopy(result_637541104, {kind: 0, value: nimCopy(null, valueInHEX60gensym119_637541101, NTI637539494), tail: nimCopy(null, tailInHEX60gensym119_637541102, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym119_637541100, NTI33554439), expected: []}, NTI637539094);

  return result_637541104;

}

function failImpl_637541106(inputInHEX60gensym119_637541107, expectedInHEX60gensym119_637541108, tailInHEX60gensym119_637541109) {
  var result_637541111 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637541111 = nimCopy(result_637541111, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym119_637541108, NTI637539500), tail: nimCopy(null, tailInHEX60gensym119_637541109, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym119_637541107, NTI33554439), value: []}, NTI637539094);

  return result_637541111;

}
      
function HEX3Aanonymous_637541114(input_637541115) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_637541117 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637541118 = succeedImpl_637541099;
          var fail_637541119 = failImpl_637541106;
          Label1: do {
            var tempHEX60gensym26_637541144 = parse_637541128(a_637541080, input_637541115);
            if ((tempHEX60gensym26_637541144.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_637541144;
            if (ConstSet86[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637541117 = nimCopy(result_637541117, {kind: 1, fromInput: nimCopy(null, input_637541115, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym26_637541144.tail, NTI33554439), value: []}, NTI637539094);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637541150 = nimCopy(null, tempHEX60gensym26_637541144, NTI637539094);
          Label3: do {
            var tempHEX60gensym28_637541163 = parse_637541128(b_637541084, result1_637541150.tail);
            if ((tempHEX60gensym28_637541163.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_637541163;
            if (ConstSet87[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637541117 = nimCopy(result_637541117, {kind: 1, fromInput: nimCopy(null, input_637541115, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym28_637541163.tail, NTI33554439), value: []}, NTI637539094);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637541169 = nimCopy(null, tempHEX60gensym28_637541163, NTI637539094);
          var Temporary5 = result1_637541150;
          if (ConstSet88[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          var Temporary6 = result2_637541169;
          if (ConstSet89[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1207959573)); }
          result_637541117 = nimCopy(result_637541117, succeed_637541118(input_637541115, HEX26_637541170(Temporary5.value, Temporary6.value), result2_637541169.tail), NTI637539094);
          break BeforeRet;
        } while (false);

        return result_637541117;

      }

  var result_637541088 = null;

    Label1: do {
    } while (false);
    result_637541088 = {body: HEX3Aanonymous_637541114};

  return result_637541088;

}

function map_637540830(a_637540833, fn_637540835) {

function succeedImpl_637540847(inputInHEX60gensym115_637540848, valueInHEX60gensym115_637540849, tailInHEX60gensym115_637540850) {
  var result_637540852 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540852 = nimCopy(result_637540852, {kind: 0, value: nimCopy(null, valueInHEX60gensym115_637540849, NTI637539203), tail: nimCopy(null, tailInHEX60gensym115_637540850, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym115_637540848, NTI33554439), expected: []}, NTI637539094);

  return result_637540852;

}

function failImpl_637540854(inputInHEX60gensym115_637540855, expectedInHEX60gensym115_637540856, tailInHEX60gensym115_637540857) {
  var result_637540859 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540859 = nimCopy(result_637540859, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym115_637540856, NTI637539254), tail: nimCopy(null, tailInHEX60gensym115_637540857, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym115_637540855, NTI33554439), value: []}, NTI637539094);

  return result_637540859;

}
      
function HEX3Aanonymous_637540862(input_637540863) {
            var Temporary2;
          var Temporary3;

        var result_637540865 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637540866 = succeedImpl_637540847;
          var fail_637540867 = failImpl_637540854;
          Label1: do {
            var tempHEX60gensym24_637540880 = parse_637540596(a_637540833, input_637540863);
            if ((tempHEX60gensym24_637540880.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637540880;
            if (ConstSet90[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637540865 = nimCopy(result_637540865, {kind: 1, fromInput: nimCopy(null, input_637540863, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637540880.tail, NTI33554439), value: []}, NTI637539094);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637540886 = nimCopy(null, tempHEX60gensym24_637540880, NTI637538616);
          var Temporary3 = result1_637540886;
          if (ConstSet91[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637540865 = nimCopy(result_637540865, succeed_637540866(input_637540863, fn_637540835(Temporary3.value), result1_637540886.tail), NTI637539094);
          break BeforeRet;
        } while (false);

        return result_637540865;

      }

  var result_637540836 = null;

    Label1: do {
    } while (false);
    result_637540836 = {body: HEX3Aanonymous_637540862};

  return result_637540836;

}

function nop_637540145() {

function succeedImpl_637540158(inputInHEX60gensym105_637540159, valueInHEX60gensym105_637540160, tailInHEX60gensym105_637540161) {
  var result_637540163 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540163 = nimCopy(result_637540163, {kind: 0, value: nimCopy(null, valueInHEX60gensym105_637540160, NTI637538659), tail: nimCopy(null, tailInHEX60gensym105_637540161, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym105_637540159, NTI33554439), expected: []}, NTI637538616);

  return result_637540163;

}

function failImpl_637540186(inputInHEX60gensym105_637540187, expectedInHEX60gensym105_637540188, tailInHEX60gensym105_637540189) {
  var result_637540191 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540191 = nimCopy(result_637540191, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym105_637540188, NTI637538692), tail: nimCopy(null, tailInHEX60gensym105_637540189, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym105_637540187, NTI33554439), value: []}, NTI637538616);

  return result_637540191;

}
      
function HEX3Aanonymous_637540194(input_637540195) {
        var result_637540197 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_637540198 = succeedImpl_637540158;
          var fail_637540199 = failImpl_637540186;
          result_637540197 = nimCopy(result_637540197, succeed_637540198(input_637540195, [], input_637540195), NTI637538616);

        return result_637540197;

      }

  var result_637540147 = null;

    Label1: do {
    } while (false);
    result_637540147 = {body: HEX3Aanonymous_637540194};

  return result_637540147;

}

function map_637540316(a_637540319, fn_637540321) {

function succeedImpl_637540333(inputInHEX60gensym107_637540334, valueInHEX60gensym107_637540335, tailInHEX60gensym107_637540336) {
  var result_637540338 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540338 = nimCopy(result_637540338, {kind: 0, value: nimCopy(null, valueInHEX60gensym107_637540335, NTI637538761), tail: nimCopy(null, tailInHEX60gensym107_637540336, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym107_637540334, NTI33554439), expected: []}, NTI637538616);

  return result_637540338;

}

function failImpl_637540340(inputInHEX60gensym107_637540341, expectedInHEX60gensym107_637540342, tailInHEX60gensym107_637540343) {
  var result_637540345 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540345 = nimCopy(result_637540345, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym107_637540342, NTI637538820), tail: nimCopy(null, tailInHEX60gensym107_637540343, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym107_637540341, NTI33554439), value: []}, NTI637538616);

  return result_637540345;

}
      
function HEX3Aanonymous_637540348(input_637540349) {
            var Temporary2;
          var Temporary3;

        var result_637540351 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637540352 = succeedImpl_637540333;
          var fail_637540353 = failImpl_637540340;
          Label1: do {
            var tempHEX60gensym24_637540366 = parse_1207960522(a_637540319, input_637540349);
            if ((tempHEX60gensym24_637540366.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637540366;
            if (ConstSet92[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637540351 = nimCopy(result_637540351, {kind: 1, fromInput: nimCopy(null, input_637540349, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637540366.tail, NTI33554439), value: []}, NTI637538616);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637540372 = nimCopy(null, tempHEX60gensym24_637540366, NTI1207959782);
          var Temporary3 = result1_637540372;
          if (ConstSet93[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637540351 = nimCopy(result_637540351, succeed_637540352(input_637540349, fn_637540321(Temporary3.value), result1_637540372.tail), NTI637538616);
          break BeforeRet;
        } while (false);

        return result_637540351;

      }

  var result_637540322 = null;

    Label1: do {
    } while (false);
    result_637540322 = {body: HEX3Aanonymous_637540348};

  return result_637540322;

}

function HEX2A_637540137(a_637540139, n_637540140) {
    var Temporary1;
      
function HEX3Aanonymous_637540262(x_637540291) {
        var result_637540294 = [];

          result_637540294 = nimCopy(null, [x_637540291], NTI637538761);

        return result_637540294;

      }

function succeedImpl_637540383(inputInHEX60gensym108_637540384, valueInHEX60gensym108_637540385, tailInHEX60gensym108_637540386) {
  var result_637540388 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540388 = nimCopy(result_637540388, {kind: 0, value: nimCopy(null, valueInHEX60gensym108_637540385, NTI637538860), tail: nimCopy(null, tailInHEX60gensym108_637540386, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym108_637540384, NTI33554439), expected: []}, NTI637538616);

  return result_637540388;

}

function failImpl_637540390(inputInHEX60gensym108_637540391, expectedInHEX60gensym108_637540392, tailInHEX60gensym108_637540393) {
  var result_637540395 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540395 = nimCopy(result_637540395, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym108_637540392, NTI637538866), tail: nimCopy(null, tailInHEX60gensym108_637540393, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym108_637540391, NTI33554439), value: []}, NTI637538616);

  return result_637540395;

}
        
function HEX3Aanonymous_637540398(input_637540399) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_637540401 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_637540402 = succeedImpl_637540383;
            var fail_637540403 = failImpl_637540390;
            Label1: do {
              var tempHEX60gensym38_637540416 = parse_1207960522(a_637540139, input_637540399);
              if ((tempHEX60gensym38_637540416.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_637540416;
              if (ConstSet94[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
              result_637540401 = nimCopy(result_637540401, {kind: 1, fromInput: nimCopy(null, input_637540399, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym38_637540416.tail, NTI33554439), value: []}, NTI637538616);
              break BeforeRet;
              }
              
            } while (false);
            var result1_637540422 = nimCopy(null, tempHEX60gensym38_637540416, NTI1207959782);
            var Temporary3 = result1_637540422;
            if (ConstSet95[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
            var outputs_637540427 = [Temporary3.value];
            var lastTail_637540428 = nimCopy(null, result1_637540422.tail, NTI33554439);
            Label4: do {
              var i_637540434 = 0;
              var res_503316791 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_503316791 <= n_637540140)) break Label6;
                    i_637540434 = res_503316791;
                    Label7: do {
                      var tempHEX60gensym40_637540447 = parse_1207960522(a_637540139, result1_637540422.tail);
                      if ((tempHEX60gensym40_637540447.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_637540447;
                      if (ConstSet96[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1207959573)); }
                      result_637540401 = nimCopy(result_637540401, {kind: 1, fromInput: nimCopy(null, input_637540399, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym40_637540447.tail, NTI33554439), value: []}, NTI637538616);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_637540422 = nimCopy(result1_637540422, tempHEX60gensym40_637540447, NTI1207959782);
                    if (eqStrings(result1_637540422.tail, lastTail_637540428)) {
                    break Label4;
                    }
                    
                    lastTail_637540428 = nimCopy(null, result1_637540422.tail, NTI33554439);
                    var Temporary9 = result1_637540422;
                    if (ConstSet97[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1207959573)); }
                    outputs_637540427.push(Temporary9.value);;
                    res_503316791 = addInt(res_503316791, 1);
                  }
              } while (false);
            } while (false);
            result_637540401 = nimCopy(result_637540401, succeed_637540402(input_637540399, outputs_637540427, result1_637540422.tail), NTI637538616);
          } while (false);

          return result_637540401;

        }

  var result_637540144 = null;

  BeforeRet: do {
    switch (n_637540140) {
    case 0:
      result_637540144 = nop_637540145();
      break BeforeRet;
      break;
    case 1:
      result_637540144 = map_637540316(a_637540139, HEX3Aanonymous_637540262);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_637540398};
      break;
    }
    result_637540144 = Temporary1;
  } while (false);

  return result_637540144;

}

function nop_637540667() {

function succeedImpl_637540680(inputInHEX60gensym113_637540681, valueInHEX60gensym113_637540682, tailInHEX60gensym113_637540683) {
  var result_637540685 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540685 = nimCopy(result_637540685, {kind: 0, value: nimCopy(null, valueInHEX60gensym113_637540682, NTI637539101), tail: nimCopy(null, tailInHEX60gensym113_637540683, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym113_637540681, NTI33554439), expected: []}, NTI637539094);

  return result_637540685;

}

function failImpl_637540708(inputInHEX60gensym113_637540709, expectedInHEX60gensym113_637540710, tailInHEX60gensym113_637540711) {
  var result_637540713 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540713 = nimCopy(result_637540713, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym113_637540710, NTI637539134), tail: nimCopy(null, tailInHEX60gensym113_637540711, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym113_637540709, NTI33554439), value: []}, NTI637539094);

  return result_637540713;

}
      
function HEX3Aanonymous_637540716(input_637540717) {
        var result_637540719 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_637540720 = succeedImpl_637540680;
          var fail_637540721 = failImpl_637540708;
          result_637540719 = nimCopy(result_637540719, succeed_637540720(input_637540717, [], input_637540717), NTI637539094);

        return result_637540719;

      }

  var result_637540669 = null;

    Label1: do {
    } while (false);
    result_637540669 = {body: HEX3Aanonymous_637540716};

  return result_637540669;

}

function HEX2A_637540654(a_637540656, n_637540657) {
    var Temporary1;
      
function HEX3Aanonymous_637540784(x_637540813) {
        var result_637540816 = [];

          result_637540816 = nimCopy(null, [nimCopy(null, x_637540813, NTI637538610)], NTI637539203);

        return result_637540816;

      }

function succeedImpl_637540897(inputInHEX60gensym116_637540898, valueInHEX60gensym116_637540899, tailInHEX60gensym116_637540900) {
  var result_637540902 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540902 = nimCopy(result_637540902, {kind: 0, value: nimCopy(null, valueInHEX60gensym116_637540899, NTI637539294), tail: nimCopy(null, tailInHEX60gensym116_637540900, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym116_637540898, NTI33554439), expected: []}, NTI637539094);

  return result_637540902;

}

function failImpl_637540904(inputInHEX60gensym116_637540905, expectedInHEX60gensym116_637540906, tailInHEX60gensym116_637540907) {
  var result_637540909 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540909 = nimCopy(result_637540909, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym116_637540906, NTI637539300), tail: nimCopy(null, tailInHEX60gensym116_637540907, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym116_637540905, NTI33554439), value: []}, NTI637539094);

  return result_637540909;

}
        
function HEX3Aanonymous_637540912(input_637540913) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_637540915 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_637540916 = succeedImpl_637540897;
            var fail_637540917 = failImpl_637540904;
            Label1: do {
              var tempHEX60gensym38_637540930 = parse_637540596(a_637540656, input_637540913);
              if ((tempHEX60gensym38_637540930.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_637540930;
              if (ConstSet98[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
              result_637540915 = nimCopy(result_637540915, {kind: 1, fromInput: nimCopy(null, input_637540913, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym38_637540930.tail, NTI33554439), value: []}, NTI637539094);
              break BeforeRet;
              }
              
            } while (false);
            var result1_637540936 = nimCopy(null, tempHEX60gensym38_637540930, NTI637538616);
            var Temporary3 = result1_637540936;
            if (ConstSet99[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
            var outputs_637540941 = [nimCopy(null, Temporary3.value, NTI637538610)];
            var lastTail_637540942 = nimCopy(null, result1_637540936.tail, NTI33554439);
            Label4: do {
              var i_637540948 = 0;
              var res_503316800 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_503316800 <= n_637540657)) break Label6;
                    i_637540948 = res_503316800;
                    Label7: do {
                      var tempHEX60gensym40_637540961 = parse_637540596(a_637540656, result1_637540936.tail);
                      if ((tempHEX60gensym40_637540961.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_637540961;
                      if (ConstSet100[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1207959573)); }
                      result_637540915 = nimCopy(result_637540915, {kind: 1, fromInput: nimCopy(null, input_637540913, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym40_637540961.tail, NTI33554439), value: []}, NTI637539094);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_637540936 = nimCopy(result1_637540936, tempHEX60gensym40_637540961, NTI637538616);
                    if (eqStrings(result1_637540936.tail, lastTail_637540942)) {
                    break Label4;
                    }
                    
                    lastTail_637540942 = nimCopy(null, result1_637540936.tail, NTI33554439);
                    var Temporary9 = result1_637540936;
                    if (ConstSet101[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1207959573)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI637538610);
                    outputs_637540941.push(Temporary10);;
                    res_503316800 = addInt(res_503316800, 1);
                  }
              } while (false);
            } while (false);
            result_637540915 = nimCopy(result_637540915, succeed_637540916(input_637540913, outputs_637540941, result1_637540936.tail), NTI637539094);
          } while (false);

          return result_637540915;

        }

  var result_637540666 = null;

  BeforeRet: do {
    switch (n_637540657) {
    case 0:
      result_637540666 = nop_637540667();
      break BeforeRet;
      break;
    case 1:
      result_637540666 = map_637540830(a_637540656, HEX3Aanonymous_637540784);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_637540912};
      break;
    }
    result_637540666 = Temporary1;
  } while (false);

  return result_637540666;

}

function HEX7C_637540552(a_637540554, b_637540555) {

function succeedImpl_637540567(inputInHEX60gensym112_637540568, valueInHEX60gensym112_637540569, tailInHEX60gensym112_637540570) {
  var result_637540572 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540572 = nimCopy(result_637540572, {kind: 0, value: nimCopy(null, valueInHEX60gensym112_637540569, NTI637538610), tail: nimCopy(null, tailInHEX60gensym112_637540570, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym112_637540568, NTI33554439), expected: []}, NTI637538616);

  return result_637540572;

}

function failImpl_637540574(inputInHEX60gensym112_637540575, expectedInHEX60gensym112_637540576, tailInHEX60gensym112_637540577) {
  var result_637540579 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637540579 = nimCopy(result_637540579, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym112_637540576, NTI637539038), tail: nimCopy(null, tailInHEX60gensym112_637540577, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym112_637540575, NTI33554439), value: []}, NTI637538616);

  return result_637540579;

}
      
function HEX3Aanonymous_637540582(input_637540583) {
          var Temporary1;
          var Temporary2;

        var result_637540585 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637540586 = succeedImpl_637540567;
          var fail_637540587 = failImpl_637540574;
          var result1_637540612 = parse_637540596(a_637540554, input_637540583);
          if ((result1_637540612.kind == 0)) {
          result_637540585 = nimCopy(result_637540585, result1_637540612, NTI637538616);
          break BeforeRet;
          }
          
          var result2_637540629 = parse_637540596(b_637540555, input_637540583);
          if ((result2_637540629.kind == 0)) {
          result_637540585 = nimCopy(result_637540585, result2_637540629, NTI637538616);
          break BeforeRet;
          }
          
          var Temporary1 = result1_637540612;
          if (ConstSet102[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1207959573)); }
          var Temporary2 = result2_637540629;
          if (ConstSet103[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
          result_637540585 = nimCopy(result_637540585, fail_637540587(input_637540583, HEX26_671088761(Temporary1.expected, Temporary2.expected), input_637540583), NTI637538616);
        } while (false);

        return result_637540585;

      }

  var result_637540556 = null;

    Label1: do {
    } while (false);
    result_637540556 = {body: HEX3Aanonymous_637540582};

  return result_637540556;

}

function newSeq_637541234(len_637541236) {
  var result_637541237 = [];

    result_637541237 = new Array(len_637541236); for (var i = 0 ; i < len_637541236 ; ++i) { result_637541237[i] = 0; }
  return result_637541237;

}

function HEX26_637541269(x_637541271, y_637541272) {
  var result_637541273 = [];

    result_637541273 = new Array(chckRange(addInt((x_637541271).length, (y_637541272).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_637541271).length, (y_637541272).length), 0, 2147483647) ; ++i) { result_637541273[i] = 0; }    Label1: do {
      var i_637541292 = 0;
      var colontmp__503316810 = 0;
      colontmp__503316810 = subInt((x_637541271).length, 1);
      var res_503316811 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316811 <= colontmp__503316810)) break Label3;
            i_637541292 = res_503316811;
            result_637541273[chckIndx(i_637541292, 0, (result_637541273).length - 1)] = x_637541271[chckIndx(i_637541292, 0, (x_637541271).length - 1)];
            res_503316811 = addInt(res_503316811, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_637541300 = 0;
      var colontmp__503316814 = 0;
      colontmp__503316814 = subInt((y_637541272).length, 1);
      var res_503316815 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_503316815 <= colontmp__503316814)) break Label6;
            i_637541300 = res_503316815;
            result_637541273[chckIndx(addInt(i_637541300, (x_637541271).length), 0, (result_637541273).length - 1)] = y_637541272[chckIndx(i_637541300, 0, (y_637541272).length - 1)];
            res_503316815 = addInt(res_503316815, 1);
          }
      } while (false);
    } while (false);

  return result_637541273;

}

function join_637541509(a_637541511, sep_637541512) {
  var result_637541513 = [];

    result_637541513 = nimCopy(null, [], NTI33554439);
    Label1: do {
      var i_637541527 = 0;
      var x_637541528 = 0;
      var i_503316819 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316819 < (a_637541511).length)) break Label3;
            i_637541527 = i_503316819;
            x_637541528 = a_637541511[chckIndx(i_503316819, 0, (a_637541511).length - 1)];
            if ((0 < i_637541527)) {
            result_637541513.push.apply(result_637541513, sep_637541512);;
            }
            
            result_637541513.push.apply(result_637541513, nimCharToStr(x_637541528));;
            i_503316819 = addInt(i_503316819, 1);
          }
      } while (false);
    } while (false);

  return result_637541513;

}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function imul_1124073762(a_1124073763, b_1124073764) {
  var result_1124073765 = 0;

    var mask_1124073766 = 65535;
    var aHi_1124073771 = ((a_1124073763 >>> 16) & mask_1124073766);
    var aLo_1124073772 = (a_1124073763 & mask_1124073766);
    var bHi_1124073777 = ((b_1124073764 >>> 16) & mask_1124073766);
    var bLo_1124073778 = (b_1124073764 & mask_1124073766);
    result_1124073765 = ((((aLo_1124073772 * bLo_1124073778) >>> 0) + (((((aHi_1124073771 * bLo_1124073778) >>> 0) + ((aLo_1124073772 * bHi_1124073777) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_1124073765;

}

function rotl32_1124073783(x_1124073784, r_1124073785) {
  var result_1124073786 = 0;

    result_1124073786 = ((x_1124073784 << r_1124073785) | (x_1124073784 >>> subInt(32, r_1124073785)));

  return result_1124073786;

}

function murmurHash_1124073795(x_1124073796) {
  var result_1124073797 = 0;

  BeforeRet: do {
    var size_1124073806 = (x_1124073796).length;
    var stepSize_1124073807 = 4;
    var n_1124073808 = divInt(size_1124073806, stepSize_1124073807);
    var h1_1124073809 = 0;
    var i_1124073810 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_1124073810 < mulInt(n_1124073808, stepSize_1124073807))) break Label2;
          var k1_1124073811 = 0;
          var j_1124073812 = stepSize_1124073807;
          Label3: do {
              Label4: while (true) {
              if (!(0 < j_1124073812)) break Label4;
                j_1124073812 = subInt(j_1124073812, 1);
                k1_1124073811 = ((k1_1124073811 << 8) | x_1124073796[chckIndx(addInt(i_1124073810, j_1124073812), 0, (x_1124073796).length - 1)]);
              }
          } while (false);
          i_1124073810 = addInt(i_1124073810, stepSize_1124073807);
          k1_1124073811 = imul_1124073762(k1_1124073811, 3432918353);
          k1_1124073811 = rotl32_1124073783(k1_1124073811, 15);
          k1_1124073811 = imul_1124073762(k1_1124073811, 461845907);
          h1_1124073809 = (h1_1124073809 ^ k1_1124073811);
          h1_1124073809 = rotl32_1124073783(h1_1124073809, 13);
          h1_1124073809 = ((((h1_1124073809 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while (false);
    var k1_1124073829 = 0;
    var rem_1124073830 = modInt(size_1124073806, stepSize_1124073807);
    Label5: do {
        Label6: while (true) {
        if (!(0 < rem_1124073830)) break Label6;
          rem_1124073830 = subInt(rem_1124073830, 1);
          k1_1124073829 = ((k1_1124073829 << 8) | x_1124073796[chckIndx(addInt(i_1124073810, rem_1124073830), 0, (x_1124073796).length - 1)]);
        }
    } while (false);
    k1_1124073829 = imul_1124073762(k1_1124073829, 3432918353);
    k1_1124073829 = rotl32_1124073783(k1_1124073829, 15);
    k1_1124073829 = imul_1124073762(k1_1124073829, 461845907);
    h1_1124073809 = (h1_1124073809 ^ k1_1124073829);
    h1_1124073809 = (h1_1124073809 ^ size_1124073806);
    h1_1124073809 = (h1_1124073809 ^ (h1_1124073809 >>> 16));
    h1_1124073809 = imul_1124073762(h1_1124073809, 2246822507);
    h1_1124073809 = (h1_1124073809 ^ (h1_1124073809 >>> 13));
    h1_1124073809 = imul_1124073762(h1_1124073809, 3266489909);
    h1_1124073809 = (h1_1124073809 ^ (h1_1124073809 >>> 16));
    result_1124073797 = (h1_1124073809 | 0);
    break BeforeRet;
  } while (false);

  return result_1124073797;

}

function hash_1124073894(x_1124073895) {
  var result_1124073896 = 0;

    result_1124073896 = murmurHash_1124073795((x_1124073895.slice(0, (x_1124073895).length - 1 + 1)));

  return result_1124073896;

}

function isFilled_1107296287(hcode_1107296288) {
  var result_1107296289 = false;

    result_1107296289 = !((hcode_1107296288 == 0));

  return result_1107296289;

}

function nextTry_1107296290(h_1107296291, maxHash_1107296292) {
  var result_1107296293 = 0;

    result_1107296293 = (addInt(h_1107296291, 1) & maxHash_1107296292);

  return result_1107296293;

}

function rawGet_654313437(t_654313440, key_654313441, hc_654313442, hc_654313442_Idx) {
            var Temporary3;

  var result_654313443 = 0;

  BeforeRet: do {
    hc_654313442[hc_654313442_Idx] = hash_1124073894(key_654313441);
    if ((hc_654313442[hc_654313442_Idx] == 0)) {
    hc_654313442[hc_654313442_Idx] = 314159265;
    }
    
    if (((t_654313440.data).length == 0)) {
    result_654313443 = -1;
    break BeforeRet;
    }
    
    var h_654313494 = (hc_654313442[hc_654313442_Idx] & (t_654313440.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1107296287(t_654313440.data[chckIndx(h_654313494, 0, (t_654313440.data).length - 1)].Field0)) break Label2;
            if (!(t_654313440.data[chckIndx(h_654313494, 0, (t_654313440.data).length - 1)].Field0 == hc_654313442[hc_654313442_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_654313440.data[chckIndx(h_654313494, 0, (t_654313440.data).length - 1)].Field1, key_654313441);            }          if (Temporary3) {
          result_654313443 = h_654313494;
          break BeforeRet;
          }
          
          h_654313494 = nextTry_1107296290(h_654313494, (t_654313440.data).length - 1);
        }
    } while (false);
    result_654313443 = subInt(-1, h_654313494);
  } while (false);

  return result_654313443;

}

function hasKey_637541675(t_637541678, key_637541679) {
  var result_637541680 = false;

    var hc_637541681 = [0];
    result_637541680 = (0 <= rawGet_654313437(t_637541678, key_637541679, hc_637541681, 0));

  return result_637541680;

}

function contains_637541669(t_637541672, key_637541673) {
  var result_637541674 = false;

  BeforeRet: do {
    result_637541674 = hasKey_637541675(t_637541672, key_637541673);
    break BeforeRet;
  } while (false);

  return result_637541674;

}

function raiseKeyError_1224738535(key_1224738537) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_1224738537 || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_637541812(t_637541815, key_637541816) {
  var result_637541817 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var hcHEX60gensym20_637541818 = [0];
    var indexHEX60gensym20_637541825 = rawGet_654313437(t_637541815, key_637541816, hcHEX60gensym20_637541818, 0);
    if ((0 <= indexHEX60gensym20_637541825)) {
    result_637541817 = nimCopy(result_637541817, t_637541815.data[chckIndx(indexHEX60gensym20_637541825, 0, (t_637541815.data).length - 1)].Field2, NTI671088644);
    }
    else {
    raiseKeyError_1224738535(key_637541816);
    }
    

  return result_637541817;

}

function map_637542403(s_637542406, op_637542408) {
  var result_637542409 = [];

    result_637542409 = new Array(chckRange((s_637542406).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_637542406).length, 0, 2147483647) ; ++i) { result_637542409[i] = null; }    Label1: do {
      var i_637542425 = 0;
      var colontmp__503316825 = 0;
      colontmp__503316825 = (s_637542406).length;
      var i_503316826 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316826 < colontmp__503316825)) break Label3;
            i_637542425 = i_503316826;
            result_637542409[chckIndx(i_637542425, 0, (result_637542409).length - 1)] = op_637542408(s_637542406[chckIndx(i_637542425, 0, (s_637542406).length - 1)]);
            i_503316826 = addInt(i_503316826, 1);
          }
      } while (false);
    } while (false);

  return result_637542409;

}

function map_637542337(a_637542340, fn_637542342) {

function succeedImpl_637542354(inputInHEX60gensym139_637542355, valueInHEX60gensym139_637542356, tailInHEX60gensym139_637542357) {
  var result_637542359 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637542359 = nimCopy(result_637542359, {kind: 0, value: nimCopy(null, valueInHEX60gensym139_637542356, NTI671088644), tail: nimCopy(null, tailInHEX60gensym139_637542357, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym139_637542355, NTI33554439), expected: []}, NTI637536153);

  return result_637542359;

}

function failImpl_637542361(inputInHEX60gensym139_637542362, expectedInHEX60gensym139_637542363, tailInHEX60gensym139_637542364) {
  var result_637542366 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637542366 = nimCopy(result_637542366, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym139_637542363, NTI637540352), tail: nimCopy(null, tailInHEX60gensym139_637542364, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym139_637542362, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637542366;

}
      
function HEX3Aanonymous_637542369(input_637542370) {
            var Temporary2;
          var Temporary3;

        var result_637542372 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637542373 = succeedImpl_637542354;
          var fail_637542374 = failImpl_637542361;
          Label1: do {
            var tempHEX60gensym24_637542387 = parse_637537302(a_637542340, input_637542370);
            if ((tempHEX60gensym24_637542387.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637542387;
            if (ConstSet104[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637542372 = nimCopy(result_637542372, {kind: 1, fromInput: nimCopy(null, input_637542370, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637542387.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637542393 = nimCopy(null, tempHEX60gensym24_637542387, NTI637536153);
          var Temporary3 = result1_637542393;
          if (ConstSet105[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637542372 = nimCopy(result_637542372, succeed_637542373(input_637542370, fn_637542342(Temporary3.value), result1_637542393.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637542372;

      }

  var result_637542343 = null;

    Label1: do {
    } while (false);
    result_637542343 = {body: HEX3Aanonymous_637542369};

  return result_637542343;

}

function HEX3EHEX3E_637542206(a_637542209, b_637542210) {

function succeedImpl_637542222(inputInHEX60gensym136_637542223, valueInHEX60gensym136_637542224, tailInHEX60gensym136_637542225) {
  var result_637542227 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637542227 = nimCopy(result_637542227, {kind: 0, value: nimCopy(null, valueInHEX60gensym136_637542224, NTI671088644), tail: nimCopy(null, tailInHEX60gensym136_637542225, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym136_637542223, NTI33554439), expected: []}, NTI637536153);

  return result_637542227;

}

function failImpl_637542229(inputInHEX60gensym136_637542230, expectedInHEX60gensym136_637542231, tailInHEX60gensym136_637542232) {
  var result_637542234 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637542234 = nimCopy(result_637542234, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym136_637542231, NTI637540247), tail: nimCopy(null, tailInHEX60gensym136_637542232, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym136_637542230, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637542234;

}
      
function HEX3Aanonymous_637542237(input_637542238) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637542240 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637542241 = succeedImpl_637542222;
          var fail_637542242 = failImpl_637542229;
          Label1: do {
            var tempHEX60gensym34_637542255 = parse_637536259(a_637542209, input_637542238);
            if ((tempHEX60gensym34_637542255.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637542255;
            if (ConstSet106[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637542240 = nimCopy(result_637542240, {kind: 1, fromInput: nimCopy(null, input_637542238, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637542255.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637542261 = nimCopy(null, tempHEX60gensym34_637542255, NTI637535056);
          Label3: do {
            var tempHEX60gensym36_637542274 = parse_637537302(b_637542210, result1_637542261.tail);
            if ((tempHEX60gensym36_637542274.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637542274;
            if (ConstSet107[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637542240 = nimCopy(result_637542240, {kind: 1, fromInput: nimCopy(null, input_637542238, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637542274.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637542280 = nimCopy(null, tempHEX60gensym36_637542274, NTI637536153);
          var Temporary5 = result2_637542280;
          if (ConstSet108[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637542240 = nimCopy(result_637542240, succeed_637542241(input_637542238, Temporary5.value, result2_637542280.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637542240;

      }

  var result_637542211 = null;

    Label1: do {
    } while (false);
    result_637542211 = {body: HEX3Aanonymous_637542237};

  return result_637542211;

}

function HEX3EHEX3E_637542110(a_637542113, b_637542114) {

function succeedImpl_637542126(inputInHEX60gensym135_637542127, valueInHEX60gensym135_637542128, tailInHEX60gensym135_637542129) {
  var result_637542131 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637542131 = nimCopy(result_637542131, {kind: 0, value: valueInHEX60gensym135_637542128, tail: nimCopy(null, tailInHEX60gensym135_637542129, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym135_637542127, NTI33554439), expected: []}, NTI1207959782);

  return result_637542131;

}

function failImpl_637542133(inputInHEX60gensym135_637542134, expectedInHEX60gensym135_637542135, tailInHEX60gensym135_637542136) {
  var result_637542138 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_637542138 = nimCopy(result_637542138, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym135_637542135, NTI637540181), tail: nimCopy(null, tailInHEX60gensym135_637542136, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym135_637542134, NTI33554439), value: 0}, NTI1207959782);

  return result_637542138;

}
      
function HEX3Aanonymous_637542141(input_637542142) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637542144 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637542145 = succeedImpl_637542126;
          var fail_637542146 = failImpl_637542133;
          Label1: do {
            var tempHEX60gensym34_637542159 = parse_637536021(a_637542113, input_637542142);
            if ((tempHEX60gensym34_637542159.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637542159;
            if (ConstSet109[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637542144 = nimCopy(result_637542144, {kind: 1, fromInput: nimCopy(null, input_637542142, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637542159.tail, NTI33554439), value: 0}, NTI1207959782);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637542165 = nimCopy(null, tempHEX60gensym34_637542159, NTI1207959684);
          Label3: do {
            var tempHEX60gensym36_637542178 = parse_1207960522(b_637542114, result1_637542165.tail);
            if ((tempHEX60gensym36_637542178.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637542178;
            if (ConstSet110[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637542144 = nimCopy(result_637542144, {kind: 1, fromInput: nimCopy(null, input_637542142, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637542178.tail, NTI33554439), value: 0}, NTI1207959782);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637542184 = nimCopy(null, tempHEX60gensym36_637542178, NTI1207959782);
          var Temporary5 = result2_637542184;
          if (ConstSet111[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637542144 = nimCopy(result_637542144, succeed_637542145(input_637542142, Temporary5.value, result2_637542184.tail), NTI1207959782);
          break BeforeRet;
        } while (false);

        return result_637542144;

      }

  var result_637542115 = null;

    Label1: do {
    } while (false);
    result_637542115 = {body: HEX3Aanonymous_637542141};

  return result_637542115;

}

function parseSaturatedNatural_704643406(s_704643407, b_704643408, b_704643408_Idx, start_704643409) {
      var Temporary1;
          var Temporary4;

  var result_704643410 = 0;

    var i_704643411 = start_704643409;
    if (((i_704643411 < (s_704643407).length) && (s_704643407[chckIndx(i_704643411, 0, (s_704643407).length - 1)] == 43))) {
    i_704643411 = addInt(i_704643411, 1);
    }
    
      if (!(i_704643411 < (s_704643407).length)) Temporary1 = false; else {        Temporary1 = (ConstSet116[s_704643407[chckIndx(i_704643411, 0, (s_704643407).length - 1)]] != undefined);      }    if (Temporary1) {
    b_704643408[b_704643408_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_704643411 < (s_704643407).length)) Temporary4 = false; else {            Temporary4 = (ConstSet117[s_704643407[chckIndx(i_704643411, 0, (s_704643407).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          var c_704643430 = subInt(s_704643407[chckIndx(i_704643411, 0, (s_704643407).length - 1)], 48);
          if ((b_704643408[b_704643408_Idx] <= divInt(subInt(2147483647, c_704643430), 10))) {
          b_704643408[b_704643408_Idx] = addInt(mulInt(b_704643408[b_704643408_Idx], 10), c_704643430);
          }
          else {
            b_704643408[b_704643408_Idx] = 2147483647;
          }
          
          i_704643411 = addInt(i_704643411, 1);
          Label5: do {
              Label6: while (true) {
              if (!((i_704643411 < (s_704643407).length) && (s_704643407[chckIndx(i_704643411, 0, (s_704643407).length - 1)] == 95))) break Label6;
                i_704643411 = addInt(i_704643411, 1);
              }
          } while (false);
        }
    } while (false);
    result_704643410 = subInt(i_704643411, start_704643409);
    }
    

  return result_704643410;

}

function parseStandardFormatSpecifier_1275068474(s_1275068475, start_1275068476, ignoreUnknownSuffix_1275068477) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_1275068478 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_1275068478.fill = 32;
    result_1275068478.align = 0;
    result_1275068478.sign = 45;
    var i_1275068480 = start_1275068476;
    if (((addInt(i_1275068480, 1) < (s_1275068475).length) && (ConstSet112[s_1275068475[chckIndx(addInt(i_1275068480, 1), 0, (s_1275068475).length - 1)]] != undefined))) {
    result_1275068478.fill = s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)];
    result_1275068478.align = s_1275068475[chckIndx(addInt(i_1275068480, 1), 0, (s_1275068475).length - 1)];
    i_1275068480 = addInt(i_1275068480, 2);
    }
    else {
    if (((i_1275068480 < (s_1275068475).length) && (ConstSet113[s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)]] != undefined))) {
    result_1275068478.align = s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)];
    i_1275068480 = addInt(i_1275068480, 1);
    }
    }
    if (((i_1275068480 < (s_1275068475).length) && (ConstSet114[s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)]] != undefined))) {
    result_1275068478.sign = s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)];
    i_1275068480 = addInt(i_1275068480, 1);
    }
    
    if (((i_1275068480 < (s_1275068475).length) && (s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)] == 35))) {
    result_1275068478.alternateForm = true;
    i_1275068480 = addInt(i_1275068480, 1);
    }
    
      if (!((addInt(i_1275068480, 1) < (s_1275068475).length) && (s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet115[s_1275068475[chckIndx(addInt(i_1275068480, 1), 0, (s_1275068475).length - 1)]] != undefined);      }    if (Temporary1) {
    result_1275068478.padWithZero = true;
    i_1275068480 = addInt(i_1275068480, 1);
    }
    
    var parsedLength_1275068517 = parseSaturatedNatural_704643406(s_1275068475, result_1275068478, "minimumWidth", i_1275068480);
    i_1275068480 = addInt(i_1275068480, parsedLength_1275068517);
    if (((i_1275068480 < (s_1275068475).length) && (s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)] == 46))) {
    i_1275068480 = addInt(i_1275068480, 1);
    var parsedLengthB_1275068526 = parseSaturatedNatural_704643406(s_1275068475, result_1275068478, "precision", i_1275068480);
    i_1275068480 = addInt(i_1275068480, parsedLengthB_1275068526);
    }
    else {
      result_1275068478.precision = -1;
    }
    
      if (!(i_1275068480 < (s_1275068475).length)) Temporary2 = false; else {        Temporary2 = (ConstSet118[s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)]] != undefined);      }    if (Temporary2) {
    result_1275068478.typ = s_1275068475[chckIndx(i_1275068480, 0, (s_1275068475).length - 1)];
    i_1275068480 = addInt(i_1275068480, 1);
    }
    
    result_1275068478.endPosition = i_1275068480;
      if (!!((i_1275068480 == (s_1275068475).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_1275068477);      }    if (Temporary3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_989858970(s_1275068475, HEX2EHEX2E_922746960(i_1275068480, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_1275068478;

}

function runeLenAt_989855809(s_989855810, i_989855811) {
  var result_989855812 = 0;

    if ((s_989855810[chckIndx(i_989855811, 0, (s_989855810).length - 1)] <= 127)) {
    result_989855812 = 1;
    }
    else {
    if (((s_989855810[chckIndx(i_989855811, 0, (s_989855810).length - 1)] >>> 5) == 6)) {
    result_989855812 = 2;
    }
    else {
    if (((s_989855810[chckIndx(i_989855811, 0, (s_989855810).length - 1)] >>> 4) == 14)) {
    result_989855812 = 3;
    }
    else {
    if (((s_989855810[chckIndx(i_989855811, 0, (s_989855810).length - 1)] >>> 3) == 30)) {
    result_989855812 = 4;
    }
    else {
    if (((s_989855810[chckIndx(i_989855811, 0, (s_989855810).length - 1)] >>> 2) == 62)) {
    result_989855812 = 5;
    }
    else {
    if (((s_989855810[chckIndx(i_989855811, 0, (s_989855810).length - 1)] >>> 1) == 126)) {
    result_989855812 = 6;
    }
    else {
      result_989855812 = 1;
    }
    }}}}}

  return result_989855812;

}

function runeOffset_989856381(s_989856382, pos_989856383, start_989856384) {
  var result_989856385 = 0;

  BeforeRet: do {
    var i_989856386 = 0;
    var o_989856387 = start_989856384;
    Label1: do {
        Label2: while (true) {
        if (!(i_989856386 < pos_989856383)) break Label2;
          o_989856387 = addInt(o_989856387, chckRange(runeLenAt_989855809(s_989856382, o_989856387), 0, 2147483647));
          if (((s_989856382).length <= o_989856387)) {
          result_989856385 = -1;
          break BeforeRet;
          }
          
          i_989856386 = addInt(i_989856386, 1);
        }
    } while (false);
    result_989856385 = o_989856387;
    break BeforeRet;
  } while (false);

  return result_989856385;

}

function validateUtf8_989856021(s_989856022) {
            var Temporary3;
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;

  var result_989856023 = 0;

  BeforeRet: do {
    var i_989856024 = 0;
    var L_989856025 = (s_989856022).length;
    Label1: do {
        Label2: while (true) {
        if (!(i_989856024 < L_989856025)) break Label2;
          if ((s_989856022[chckIndx(i_989856024, 0, (s_989856022).length - 1)] <= 127)) {
          i_989856024 = addInt(i_989856024, 1);
          }
          else {
          if (((s_989856022[chckIndx(i_989856024, 0, (s_989856022).length - 1)] >>> 5) == 6)) {
          if ((s_989856022[chckIndx(i_989856024, 0, (s_989856022).length - 1)] < 194)) {
          result_989856023 = i_989856024;
          break BeforeRet;
          }
          
            if (!(addInt(i_989856024, 1) < L_989856025)) Temporary3 = false; else {              Temporary3 = ((s_989856022[chckIndx(addInt(i_989856024, 1), 0, (s_989856022).length - 1)] >>> 6) == 2);            }          if (Temporary3) {
          i_989856024 = addInt(i_989856024, 2);
          }
          else {
            result_989856023 = i_989856024;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_989856022[chckIndx(i_989856024, 0, (s_989856022).length - 1)] >>> 4) == 14)) {
            if (!(addInt(i_989856024, 2) < L_989856025)) Temporary5 = false; else {              Temporary5 = ((s_989856022[chckIndx(addInt(i_989856024, 1), 0, (s_989856022).length - 1)] >>> 6) == 2);            }            if (!Temporary5) Temporary4 = false; else {              Temporary4 = ((s_989856022[chckIndx(addInt(i_989856024, 2), 0, (s_989856022).length - 1)] >>> 6) == 2);            }          if (Temporary4) {
          i_989856024 = addInt(i_989856024, 3);
          }
          else {
            result_989856023 = i_989856024;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_989856022[chckIndx(i_989856024, 0, (s_989856022).length - 1)] >>> 3) == 30)) {
            if (!(addInt(i_989856024, 3) < L_989856025)) Temporary8 = false; else {              Temporary8 = ((s_989856022[chckIndx(addInt(i_989856024, 1), 0, (s_989856022).length - 1)] >>> 6) == 2);            }            if (!Temporary8) Temporary7 = false; else {              Temporary7 = ((s_989856022[chckIndx(addInt(i_989856024, 2), 0, (s_989856022).length - 1)] >>> 6) == 2);            }            if (!Temporary7) Temporary6 = false; else {              Temporary6 = ((s_989856022[chckIndx(addInt(i_989856024, 3), 0, (s_989856022).length - 1)] >>> 6) == 2);            }          if (Temporary6) {
          i_989856024 = addInt(i_989856024, 4);
          }
          else {
            result_989856023 = i_989856024;
            break BeforeRet;
          }
          
          }
          else {
            result_989856023 = i_989856024;
            break BeforeRet;
          }
          }}}
        }
    } while (false);
    result_989856023 = -1;
    break BeforeRet;
  } while (false);

  return result_989856023;

}

function alignString_1275068436(s_1275068437, minimumWidth_1275068438, align_1275068439, fill_1275068440) {
      var Temporary1;

  var result_1275068441 = [];

    if ((minimumWidth_1275068438 == 0)) {
    result_1275068441 = nimCopy(null, s_1275068437, NTI33554439);
    }
    else {
      if ((validateUtf8_989856021(s_1275068437) == -1)) {
      Temporary1 = nucruneLen(s_1275068437);
      }
      else {
      Temporary1 = (s_1275068437).length;
      }
      
      var sRuneLen_1275068442 = Temporary1;
      var toFill_1275068443 = subInt(minimumWidth_1275068438, sRuneLen_1275068442);
      if ((toFill_1275068443 <= 0)) {
      result_1275068441 = nimCopy(null, s_1275068437, NTI33554439);
      }
      else {
      if (((align_1275068439 == 60) || (align_1275068439 == 0))) {
      result_1275068441 = nimCopy(null, (s_1275068437 || []).concat(nsuRepeatChar(fill_1275068440, chckRange(toFill_1275068443, 0, 2147483647)) || []), NTI33554439);
      }
      else {
      if ((align_1275068439 == 94)) {
      var half_1275068444 = divInt(toFill_1275068443, 2);
      result_1275068441 = nimCopy(null, (nsuRepeatChar(fill_1275068440, chckRange(half_1275068444, 0, 2147483647)) || []).concat(s_1275068437 || [],nsuRepeatChar(fill_1275068440, chckRange(subInt(toFill_1275068443, half_1275068444), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        result_1275068441 = nimCopy(null, (nsuRepeatChar(fill_1275068440, chckRange(toFill_1275068443, 0, 2147483647)) || []).concat(s_1275068437 || []), NTI33554439);
      }
      }}
    }
    

  return result_1275068441;

}

function formatValue_1275068578(result_1275068579, result_1275068579_Idx, value_1275068580, specifier_1275068581) {
    var spec_1275068582 = parseStandardFormatSpecifier_1275068474(specifier_1275068581, 0, false);
    var value_1275068583 = nimCopy(null, value_1275068580, NTI33554439);
    switch (spec_1275068582.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_1275068582.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_1275068582.precision == -1))) {
    if ((spec_1275068582.precision < nucruneLen(value_1275068583))) {
    (value_1275068583.length = chckRange(runeOffset_989856381(value_1275068583, chckRange(spec_1275068582.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    result_1275068579[result_1275068579_Idx].push.apply(result_1275068579[result_1275068579_Idx], alignString_1275068436(value_1275068583, spec_1275068582.minimumWidth, spec_1275068582.align, spec_1275068582.fill));;

  
}

function row_671088684(rect_671088685) {
  var result_671088686 = [];

    result_671088686 = nimCopy(null, rect_671088685.rows[chckIndx(0, 0, (rect_671088685.rows).length - 1)], NTI33554439);

  return result_671088686;

}

function nucRepeatRune(c_989862102, count_989862103) {
  var result_989862104 = [];

    var s_989862105 = HEX24_989856335(c_989862102);
    result_989862104 = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_989862110 = 0;
      var colontmp__503316852 = 0;
      colontmp__503316852 = count_989862103;
      var i_503316853 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316853 < colontmp__503316852)) break Label3;
            i_989862110 = i_503316853;
            result_989862104.push.apply(result_989862104, s_989862105);;
            i_503316853 = addInt(i_503316853, 1);
          }
      } while (false);
    } while (false);

  return result_989862104;

}

function center_671089525(s_671089526, width_671089527, padding_671089528) {
    var Temporary1;

  var result_671089529 = [];

    var sLen_671089530 = nucruneLen(s_671089526);
    if ((width_671089527 <= sLen_671089530)) {
    Temporary1 = s_671089526;
    }
    else {
      var diff_671089531 = subInt(width_671089527, sLen_671089530);
      var left_671089532 = divInt(diff_671089531, 2);
      var right_671089533 = subInt(diff_671089531, left_671089532);
    Temporary1 = (nucRepeatRune(padding_671089528, chckRange(left_671089532, 0, 2147483647)) || []).concat(s_671089526 || [],nucRepeatRune(padding_671089528, chckRange(right_671089533, 0, 2147483647)) || []);
    }
    
    result_671089529 = nimCopy(null, Temporary1, NTI33554439);

  return result_671089529;

}

function HEX3Aanonymous_671089552(s_671089553, width_671089554) {
  var result_671089555 = [];

    result_671089555 = nimCopy(null, center_671089525(s_671089553, chckRange(width_671089554, 0, 2147483647), 32), NTI33554439);

  return result_671089555;

}

function alignLeft_989862124(s_989862125, count_989862126, padding_989862127) {
  var result_989862128 = [];

    var sLen_989862129 = nucruneLen(s_989862125);
    if ((sLen_989862129 < count_989862126)) {
    var padStr_989862130 = HEX24_989856335(padding_989862127);
    result_989862128 = nimCopy(null, mnewString(0), NTI33554439);
    result_989862128.push.apply(result_989862128, s_989862125);;
    Label1: do {
      var i_989862135 = 0;
      var colontmp__503316856 = 0;
      colontmp__503316856 = count_989862126;
      var i_503316857 = sLen_989862129;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316857 < colontmp__503316856)) break Label3;
            i_989862135 = i_503316857;
            result_989862128.push.apply(result_989862128, padStr_989862130);;
            i_503316857 = addInt(i_503316857, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_989862128 = nimCopy(null, s_989862125, NTI33554439);
    }
    

  return result_989862128;

}

function HEX3Aanonymous_671089556(s_671089557, width_671089558) {
  var result_671089559 = [];

    result_671089559 = nimCopy(null, alignLeft_989862124(s_671089557, chckRange(width_671089558, 0, 2147483647), 32), NTI33554439);

  return result_671089559;

}

function nucAlignString(s_989862112, count_989862113, padding_989862114) {
  var result_989862115 = [];

    var sLen_989862116 = nucruneLen(s_989862112);
    if ((sLen_989862116 < count_989862113)) {
    var padStr_989862117 = HEX24_989856335(padding_989862114);
    result_989862115 = nimCopy(null, mnewString(0), NTI33554439);
    var spaces_989862118 = subInt(count_989862113, sLen_989862116);
    Label1: do {
      var i_989862123 = 0;
      var i_503316860 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316860 < spaces_989862118)) break Label3;
            i_989862123 = i_503316860;
            result_989862115.push.apply(result_989862115, padStr_989862117);;
            i_503316860 = addInt(i_503316860, 1);
          }
      } while (false);
    } while (false);
    result_989862115.push.apply(result_989862115, s_989862112);;
    }
    else {
      result_989862115 = nimCopy(null, s_989862112, NTI33554439);
    }
    

  return result_989862115;

}

function HEX3Aanonymous_671089560(s_671089561, width_671089562) {
  var result_671089563 = [];

    result_671089563 = nimCopy(null, nucAlignString(s_671089561, chckRange(width_671089562, 0, 2147483647), 32), NTI33554439);

  return result_671089563;

}

function stack_671089574(rects_671089575, baseline_671089576, alignment_671089577) {
  var result_671089578 = ({rows: [], baseline: 0, width: 0, flag: 0});

    Label1: do {
      var iHEX60gensym44_671089600 = 0;
      var resultHEX60gensym44_671089607 = newSeq_671089293(chckRange((rects_671089575).length, 0, 2147483647));
      Label2: do {
        var it_671089611 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_503316842 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_503316842 < (rects_671089575).length)) break Label4;
              it_671089611 = rects_671089575[chckIndx(i_503316842, 0, (rects_671089575).length - 1)];
              resultHEX60gensym44_671089607[chckIndx(iHEX60gensym44_671089600, 0, (resultHEX60gensym44_671089607).length - 1)] = it_671089611.width;
              iHEX60gensym44_671089600 = addInt(iHEX60gensym44_671089600, 1);
              i_503316842 = addInt(i_503316842, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var width_671089619 = max_671089319(resultHEX60gensym44_671089607);
    var alignFunc_671089620 = alignFuncs_671089564[chckIndx(alignment_671089577, 0, (alignFuncs_671089564).length - 1)];
    Label5: do {
      var rect_671089624 = ({rows: [], baseline: 0, width: 0, flag: 0});
      var i_503316849 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(i_503316849 < (rects_671089575).length)) break Label7;
            rect_671089624 = rects_671089575[chckIndx(i_503316849, 0, (rects_671089575).length - 1)];
            Label8: do {
              var row_671089628 = [];
              var i_503316846 = 0;
              var L_503316847 = (rect_671089624.rows).length;
              Label9: do {
                  Label10: while (true) {
                  if (!(i_503316846 < L_503316847)) break Label10;
                    row_671089628 = rect_671089624.rows[chckIndx(i_503316846, 0, (rect_671089624.rows).length - 1)];
                    result_671089578.rows.push(alignFunc_671089620(row_671089628, width_671089619));;
                    i_503316846 = addInt(i_503316846, 1);
                    if (!(((rect_671089624.rows).length == L_503316847))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            i_503316849 = addInt(i_503316849, 1);
          }
      } while (false);
    } while (false);
    result_671089578.baseline = baseline_671089576;
    result_671089578.width = width_671089619;

  return result_671089578;

}

function HEX3EHEX3E_637542902(a_637542905, b_637542906) {

function succeedImpl_637542918(inputInHEX60gensym151_637542919, valueInHEX60gensym151_637542920, tailInHEX60gensym151_637542921) {
  var result_637542923 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637542923 = nimCopy(result_637542923, {kind: 0, value: nimCopy(null, valueInHEX60gensym151_637542920, NTI671088644), tail: nimCopy(null, tailInHEX60gensym151_637542921, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym151_637542919, NTI33554439), expected: []}, NTI637536153);

  return result_637542923;

}

function failImpl_637542925(inputInHEX60gensym151_637542926, expectedInHEX60gensym151_637542927, tailInHEX60gensym151_637542928) {
  var result_637542930 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637542930 = nimCopy(result_637542930, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym151_637542927, NTI637540791), tail: nimCopy(null, tailInHEX60gensym151_637542928, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym151_637542926, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637542930;

}
      
function HEX3Aanonymous_637542933(input_637542934) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637542936 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637542937 = succeedImpl_637542918;
          var fail_637542938 = failImpl_637542925;
          Label1: do {
            var tempHEX60gensym34_637542951 = parse_637536021(a_637542905, input_637542934);
            if ((tempHEX60gensym34_637542951.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637542951;
            if (ConstSet119[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637542936 = nimCopy(result_637542936, {kind: 1, fromInput: nimCopy(null, input_637542934, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637542951.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637542957 = nimCopy(null, tempHEX60gensym34_637542951, NTI1207959684);
          Label3: do {
            var tempHEX60gensym36_637542970 = parse_637537302(b_637542906, result1_637542957.tail);
            if ((tempHEX60gensym36_637542970.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637542970;
            if (ConstSet120[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637542936 = nimCopy(result_637542936, {kind: 1, fromInput: nimCopy(null, input_637542934, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637542970.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637542976 = nimCopy(null, tempHEX60gensym36_637542970, NTI637536153);
          var Temporary5 = result2_637542976;
          if (ConstSet121[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637542936 = nimCopy(result_637542936, succeed_637542937(input_637542934, Temporary5.value, result2_637542976.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637542936;

      }

  var result_637542907 = null;

    Label1: do {
    } while (false);
    result_637542907 = {body: HEX3Aanonymous_637542933};

  return result_637542907;

}

function HEX7C_637542470(a_637542472, b_637542473) {

function succeedImpl_637542485(inputInHEX60gensym144_637542486, valueInHEX60gensym144_637542487, tailInHEX60gensym144_637542488) {
  var result_637542490 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637542490 = nimCopy(result_637542490, {kind: 0, value: nimCopy(null, valueInHEX60gensym144_637542487, NTI33554439), tail: nimCopy(null, tailInHEX60gensym144_637542488, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym144_637542486, NTI33554439), expected: []}, NTI1207959684);

  return result_637542490;

}

function failImpl_637542492(inputInHEX60gensym144_637542493, expectedInHEX60gensym144_637542494, tailInHEX60gensym144_637542495) {
  var result_637542497 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637542497 = nimCopy(result_637542497, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym144_637542494, NTI637540438), tail: nimCopy(null, tailInHEX60gensym144_637542495, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym144_637542493, NTI33554439), value: []}, NTI1207959684);

  return result_637542497;

}
      
function HEX3Aanonymous_637542500(input_637542501) {
          var Temporary1;
          var Temporary2;

        var result_637542503 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637542504 = succeedImpl_637542485;
          var fail_637542505 = failImpl_637542492;
          var result1_637542518 = parse_637536021(a_637542472, input_637542501);
          if ((result1_637542518.kind == 0)) {
          result_637542503 = nimCopy(result_637542503, result1_637542518, NTI1207959684);
          break BeforeRet;
          }
          
          var result2_637542535 = parse_637536021(b_637542473, input_637542501);
          if ((result2_637542535.kind == 0)) {
          result_637542503 = nimCopy(result_637542503, result2_637542535, NTI1207959684);
          break BeforeRet;
          }
          
          var Temporary1 = result1_637542518;
          if (ConstSet122[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1207959573)); }
          var Temporary2 = result2_637542535;
          if (ConstSet123[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
          result_637542503 = nimCopy(result_637542503, fail_637542505(input_637542501, HEX26_671088761(Temporary1.expected, Temporary2.expected), input_637542501), NTI1207959684);
        } while (false);

        return result_637542503;

      }

  var result_637542474 = null;

    Label1: do {
    } while (false);
    result_637542474 = {body: HEX3Aanonymous_637542500};

  return result_637542474;

}

function HEX26_637542712(a_637542717, b_637542721) {

function succeedImpl_637542736(inputInHEX60gensym148_637542737, valueInHEX60gensym148_637542738, tailInHEX60gensym148_637542739) {
  var result_637542741 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637542741 = nimCopy(result_637542741, {kind: 0, value: nimCopy(null, valueInHEX60gensym148_637542738, NTI637540654), tail: nimCopy(null, tailInHEX60gensym148_637542739, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym148_637542737, NTI33554439), expected: []}, NTI637536168);

  return result_637542741;

}

function failImpl_637542743(inputInHEX60gensym148_637542744, expectedInHEX60gensym148_637542745, tailInHEX60gensym148_637542746) {
  var result_637542748 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637542748 = nimCopy(result_637542748, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym148_637542745, NTI637540660), tail: nimCopy(null, tailInHEX60gensym148_637542746, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym148_637542744, NTI33554439), value: []}, NTI637536168);

  return result_637542748;

}
      
function HEX3Aanonymous_637542751(input_637542752) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_637542754 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637542755 = succeedImpl_637542736;
          var fail_637542756 = failImpl_637542743;
          Label1: do {
            var tempHEX60gensym26_637542769 = parse_637537552(a_637542717, input_637542752);
            if ((tempHEX60gensym26_637542769.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_637542769;
            if (ConstSet124[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637542754 = nimCopy(result_637542754, {kind: 1, fromInput: nimCopy(null, input_637542752, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym26_637542769.tail, NTI33554439), value: []}, NTI637536168);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637542775 = nimCopy(null, tempHEX60gensym26_637542769, NTI637536168);
          Label3: do {
            var tempHEX60gensym28_637542788 = parse_637537552(b_637542721, result1_637542775.tail);
            if ((tempHEX60gensym28_637542788.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_637542788;
            if (ConstSet125[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637542754 = nimCopy(result_637542754, {kind: 1, fromInput: nimCopy(null, input_637542752, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym28_637542788.tail, NTI33554439), value: []}, NTI637536168);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637542794 = nimCopy(null, tempHEX60gensym28_637542788, NTI637536168);
          var Temporary5 = result1_637542775;
          if (ConstSet126[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          var Temporary6 = result2_637542794;
          if (ConstSet127[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1207959573)); }
          result_637542754 = nimCopy(result_637542754, succeed_637542755(input_637542752, HEX26_637538220(Temporary5.value, Temporary6.value), result2_637542794.tail), NTI637536168);
          break BeforeRet;
        } while (false);

        return result_637542754;

      }

  var result_637542725 = null;

    Label1: do {
    } while (false);
    result_637542725 = {body: HEX3Aanonymous_637542751};

  return result_637542725;

}

function rowAsAtom_671088687(rect_671088688) {
    var Temporary1;

  var result_671088689 = [];

    if ((nucruneLen(rect_671088688.rows[chckIndx(0, 0, (rect_671088688.rows).length - 1)]) == 1)) {
    Temporary1 = rect_671088688.rows[chckIndx(0, 0, (rect_671088688.rows).length - 1)];
    }
    else {
    Temporary1 = (makeNimstrLit("(") || []).concat(rect_671088688.rows[chckIndx(0, 0, (rect_671088688.rows).length - 1)] || [],makeNimstrLit(")") || []);
    }
    
    result_671088689 = nimCopy(null, Temporary1, NTI33554439);

  return result_671088689;

}

function max_637542821(x_637542823, y_637542824) {
    var Temporary1;

  var result_637542825 = 0;

    if ((y_637542824 <= x_637542823)) {
    Temporary1 = x_637542823;
    }
    else {
    Temporary1 = y_637542824;
    }
    
    result_637542825 = Temporary1;

  return result_637542825;

}

function nsuRepeatStr(s_687866884, n_687866885) {
  var result_687866886 = [];

    result_687866886 = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_687866891 = 0;
      var colontmp__503316870 = 0;
      colontmp__503316870 = n_687866885;
      var res_503316871 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_503316871 <= colontmp__503316870)) break Label3;
            i_687866891 = res_503316871;
            result_687866886.push.apply(result_687866886, s_687866884);;
            res_503316871 = addInt(res_503316871, 1);
          }
      } while (false);
    } while (false);

  return result_687866886;

}

function withFlag_671089660(rect_671089661, flag_671089662) {
  var result_671089663 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_671089663 = nimCopy(result_671089663, rect_671089661, NTI671088644);
    result_671089663.flag = flag_671089662;

  return result_671089663;

}

function HEX5BHEX5DHEX3D_637535621(s_637535623, i_637535624, x_637535625) {
    s_637535623[chckIndx(subInt((s_637535623).length, i_637535624), 0, (s_637535623).length - 1)] = nimCopy(null, x_637535625, NTI33554439);

  
}

function rawGet_637534376(t_637534379, key_637534380, hc_637534381, hc_637534381_Idx) {
            var Temporary3;

  var result_637534382 = 0;

  BeforeRet: do {
    hc_637534381[hc_637534381_Idx] = hash_1124073894(key_637534380);
    if ((hc_637534381[hc_637534381_Idx] == 0)) {
    hc_637534381[hc_637534381_Idx] = 314159265;
    }
    
    if (((t_637534379.data).length == 0)) {
    result_637534382 = -1;
    break BeforeRet;
    }
    
    var h_637534433 = (hc_637534381[hc_637534381_Idx] & (t_637534379.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1107296287(t_637534379.data[chckIndx(h_637534433, 0, (t_637534379.data).length - 1)].Field0)) break Label2;
            if (!(t_637534379.data[chckIndx(h_637534433, 0, (t_637534379.data).length - 1)].Field0 == hc_637534381[hc_637534381_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_637534379.data[chckIndx(h_637534433, 0, (t_637534379.data).length - 1)].Field1, key_637534380);            }          if (Temporary3) {
          result_637534382 = h_637534433;
          break BeforeRet;
          }
          
          h_637534433 = nextTry_1107296290(h_637534433, (t_637534379.data).length - 1);
        }
    } while (false);
    result_637534382 = subInt(-1, h_637534433);
  } while (false);

  return result_637534382;

}

function HEX5BHEX5D_637535704(t_637535707, key_637535708) {
  var result_637535709 = {Field0: [], Field1: [], Field2: []};

    var hcHEX60gensym20_637535710 = [0];
    var indexHEX60gensym20_637535717 = rawGet_637534376(t_637535707, key_637535708, hcHEX60gensym20_637535710, 0);
    if ((0 <= indexHEX60gensym20_637535717)) {
    result_637535709 = nimCopy(result_637535709, t_637535707.data[chckIndx(indexHEX60gensym20_637535717, 0, (t_637535707.data).length - 1)].Field2, NTI637534215);
    }
    else {
    raiseKeyError_1224738535(key_637535708);
    }
    

  return result_637535709;

}

function substrEq_687866085(s_687866086, pos_687866087, substr_687866088) {
  var result_687866089 = false;

  BeforeRet: do {
    var i_687866090 = 0;
    var length_687866091 = (substr_687866088).length;
    Label1: do {
        Label2: while (true) {
        if (!(((i_687866090 < length_687866091) && (addInt(pos_687866087, i_687866090) < (s_687866086).length)) && (s_687866086[chckIndx(addInt(pos_687866087, i_687866090), 0, (s_687866086).length - 1)] == substr_687866088[chckIndx(i_687866090, 0, (substr_687866088).length - 1)]))) break Label2;
          i_687866090 = addInt(i_687866090, 1);
        }
    } while (false);
    result_687866089 = (i_687866090 == length_687866091);
    break BeforeRet;
  } while (false);

  return result_687866089;

}

function nsuSplitString(s_687866377, sep_687866378, maxsplit_687866379) {
  var result_687866380 = [];

    if (!((0 < (sep_687866378).length))) {
    failedAssertImpl_218103864(makeNimstrLit("strutils.nim(739, 11) `sep.len > 0` "));
    }
    
    result_687866380 = nimCopy(null, [], NTI687866230);
    Label1: do {
      var xHEX60gensym72_687866391 = [];
      var lastHEX60gensym41_654311526 = 0;
      var splitsHEX60gensym41_654311527 = maxsplit_687866379;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym41_654311526 <= (s_687866377).length)) break Label3;
            var firstHEX60gensym41_654311529 = lastHEX60gensym41_654311526;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym41_654311526 < (s_687866377).length) && !(substrEq_687866085(s_687866377, lastHEX60gensym41_654311526, sep_687866378)))) break Label5;
                  lastHEX60gensym41_654311526 = addInt(lastHEX60gensym41_654311526, 1);
                }
            } while (false);
            if ((splitsHEX60gensym41_654311527 == 0)) {
            lastHEX60gensym41_654311526 = (s_687866377).length;
            }
            
            xHEX60gensym72_687866391 = substr_33557921(s_687866377, firstHEX60gensym41_654311529, subInt(lastHEX60gensym41_654311526, 1));
            var Temporary6 = nimCopy(null, xHEX60gensym72_687866391, NTI33554439);
            result_687866380.push(Temporary6);;
            if ((splitsHEX60gensym41_654311527 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym41_654311527 = subInt(splitsHEX60gensym41_654311527, 1);
            lastHEX60gensym41_654311526 = addInt(lastHEX60gensym41_654311526, (sep_687866378).length);
          }
      } while (false);
    } while (false);

  return result_687866380;

}

function toTextRect_671088699(s_671088700, baseline_671088701, flag_671088702) {
  var result_671088703 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    if (eqStrings(s_671088700, [])) {
    result_671088703.flag = flag_671088702;
    break BeforeRet;
    }
    
    result_671088703.rows = nimCopy(null, nsuSplitString(s_671088700, makeNimstrLit("\x0A"), -1), NTI687866218);
    result_671088703.width = chckRange(nucruneLen(result_671088703.rows[chckIndx(0, 0, (result_671088703.rows).length - 1)]), 0, 2147483647);
    Label1: do {
      var row_671088724 = [];
      var i_654311520 = 0;
      var L_654311521 = (result_671088703.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_654311520 < L_654311521)) break Label3;
            row_671088724 = result_671088703.rows[chckIndx(i_654311520, 0, (result_671088703.rows).length - 1)];
            if (!((nucruneLen(row_671088724) == result_671088703.width))) {
            raiseException({message: makeNimstrLit("All rows of a TextRect must be the same width"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            i_654311520 = addInt(i_654311520, 1);
            if (!(((result_671088703.rows).length == L_654311521))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_671088703.baseline = baseline_671088701;
    result_671088703.flag = flag_671088702;
  } while (false);

  return result_671088703;

}

function HEX3EHEX3E_637544017(a_637544020, b_637544021) {

function succeedImpl_637544033(inputInHEX60gensym188_637544034, valueInHEX60gensym188_637544035, tailInHEX60gensym188_637544036) {
  var result_637544038 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637544038 = nimCopy(result_637544038, {kind: 0, value: nimCopy(null, valueInHEX60gensym188_637544035, NTI637540630), tail: nimCopy(null, tailInHEX60gensym188_637544036, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym188_637544034, NTI33554439), expected: []}, NTI637536168);

  return result_637544038;

}

function failImpl_637544040(inputInHEX60gensym188_637544041, expectedInHEX60gensym188_637544042, tailInHEX60gensym188_637544043) {
  var result_637544045 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_637544045 = nimCopy(result_637544045, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym188_637544042, NTI637541769), tail: nimCopy(null, tailInHEX60gensym188_637544043, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym188_637544041, NTI33554439), value: []}, NTI637536168);

  return result_637544045;

}
      
function HEX3Aanonymous_637544048(input_637544049) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637544051 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637544052 = succeedImpl_637544033;
          var fail_637544053 = failImpl_637544040;
          Label1: do {
            var tempHEX60gensym34_637544066 = parse_637536259(a_637544020, input_637544049);
            if ((tempHEX60gensym34_637544066.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637544066;
            if (ConstSet128[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637544051 = nimCopy(result_637544051, {kind: 1, fromInput: nimCopy(null, input_637544049, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637544066.tail, NTI33554439), value: []}, NTI637536168);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637544072 = nimCopy(null, tempHEX60gensym34_637544066, NTI637535056);
          Label3: do {
            var tempHEX60gensym36_637544085 = parse_637537552(b_637544021, result1_637544072.tail);
            if ((tempHEX60gensym36_637544085.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637544085;
            if (ConstSet129[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637544051 = nimCopy(result_637544051, {kind: 1, fromInput: nimCopy(null, input_637544049, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637544085.tail, NTI33554439), value: []}, NTI637536168);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637544091 = nimCopy(null, tempHEX60gensym36_637544085, NTI637536168);
          var Temporary5 = result2_637544091;
          if (ConstSet130[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637544051 = nimCopy(result_637544051, succeed_637544052(input_637544049, Temporary5.value, result2_637544091.tail), NTI637536168);
          break BeforeRet;
        } while (false);

        return result_637544051;

      }

  var result_637544022 = null;

    Label1: do {
    } while (false);
    result_637544022 = {body: HEX3Aanonymous_637544048};

  return result_637544022;

}

function HEX3CHEX3C_637544233(a_637544236, b_637544237) {

function succeedImpl_637544249(inputInHEX60gensym192_637544250, valueInHEX60gensym192_637544251, tailInHEX60gensym192_637544252) {
  var result_637544254 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637544254 = nimCopy(result_637544254, {kind: 0, value: nimCopy(null, valueInHEX60gensym192_637544251, NTI671088644), tail: nimCopy(null, tailInHEX60gensym192_637544252, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym192_637544250, NTI33554439), expected: []}, NTI637536153);

  return result_637544254;

}

function failImpl_637544256(inputInHEX60gensym192_637544257, expectedInHEX60gensym192_637544258, tailInHEX60gensym192_637544259) {
  var result_637544261 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637544261 = nimCopy(result_637544261, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym192_637544258, NTI637541924), tail: nimCopy(null, tailInHEX60gensym192_637544259, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym192_637544257, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637544261;

}
      
function HEX3Aanonymous_637544264(input_637544265) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637544267 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637544268 = succeedImpl_637544249;
          var fail_637544269 = failImpl_637544256;
          Label1: do {
            var tempHEX60gensym30_637544282 = parse_637537302(a_637544236, input_637544265);
            if ((tempHEX60gensym30_637544282.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_637544282;
            if (ConstSet131[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637544267 = nimCopy(result_637544267, {kind: 1, fromInput: nimCopy(null, input_637544265, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym30_637544282.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637544288 = nimCopy(null, tempHEX60gensym30_637544282, NTI637536153);
          Label3: do {
            var tempHEX60gensym32_637544301 = parse_1207960522(b_637544237, result1_637544288.tail);
            if ((tempHEX60gensym32_637544301.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_637544301;
            if (ConstSet132[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637544267 = nimCopy(result_637544267, {kind: 1, fromInput: nimCopy(null, input_637544265, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym32_637544301.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637544307 = nimCopy(null, tempHEX60gensym32_637544301, NTI1207959782);
          var Temporary5 = result1_637544288;
          if (ConstSet133[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637544267 = nimCopy(result_637544267, succeed_637544268(input_637544265, Temporary5.value, result2_637544307.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637544267;

      }

  var result_637544238 = null;

    Label1: do {
    } while (false);
    result_637544238 = {body: HEX3Aanonymous_637544264};

  return result_637544238;

}

function HEX3EHEX3E_637544150(a_637544153, b_637544154) {

function succeedImpl_637544166(inputInHEX60gensym191_637544167, valueInHEX60gensym191_637544168, tailInHEX60gensym191_637544169) {
  var result_637544171 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637544171 = nimCopy(result_637544171, {kind: 0, value: nimCopy(null, valueInHEX60gensym191_637544168, NTI671088644), tail: nimCopy(null, tailInHEX60gensym191_637544169, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym191_637544167, NTI33554439), expected: []}, NTI637536153);

  return result_637544171;

}

function failImpl_637544173(inputInHEX60gensym191_637544174, expectedInHEX60gensym191_637544175, tailInHEX60gensym191_637544176) {
  var result_637544178 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637544178 = nimCopy(result_637544178, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym191_637544175, NTI637541863), tail: nimCopy(null, tailInHEX60gensym191_637544176, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym191_637544174, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637544178;

}
      
function HEX3Aanonymous_637544181(input_637544182) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637544184 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637544185 = succeedImpl_637544166;
          var fail_637544186 = failImpl_637544173;
          Label1: do {
            var tempHEX60gensym34_637544199 = parse_1207960522(a_637544153, input_637544182);
            if ((tempHEX60gensym34_637544199.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_637544199;
            if (ConstSet134[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637544184 = nimCopy(result_637544184, {kind: 1, fromInput: nimCopy(null, input_637544182, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym34_637544199.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637544205 = nimCopy(null, tempHEX60gensym34_637544199, NTI1207959782);
          Label3: do {
            var tempHEX60gensym36_637544218 = parse_637537302(b_637544154, result1_637544205.tail);
            if ((tempHEX60gensym36_637544218.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_637544218;
            if (ConstSet135[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637544184 = nimCopy(result_637544184, {kind: 1, fromInput: nimCopy(null, input_637544182, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym36_637544218.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637544224 = nimCopy(null, tempHEX60gensym36_637544218, NTI637536153);
          var Temporary5 = result2_637544224;
          if (ConstSet136[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637544184 = nimCopy(result_637544184, succeed_637544185(input_637544182, Temporary5.value, result2_637544224.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637544184;

      }

  var result_637544155 = null;

    Label1: do {
    } while (false);
    result_637544155 = {body: HEX3Aanonymous_637544181};

  return result_637544155;

}

function HEX3CHEX3C_637544437(a_637544440, b_637544441) {

function succeedImpl_637544453(inputInHEX60gensym193_637544454, valueInHEX60gensym193_637544455, tailInHEX60gensym193_637544456) {
  var result_637544458 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637544458 = nimCopy(result_637544458, {kind: 0, value: nimCopy(null, valueInHEX60gensym193_637544455, NTI671088644), tail: nimCopy(null, tailInHEX60gensym193_637544456, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym193_637544454, NTI33554439), expected: []}, NTI637536153);

  return result_637544458;

}

function failImpl_637544460(inputInHEX60gensym193_637544461, expectedInHEX60gensym193_637544462, tailInHEX60gensym193_637544463) {
  var result_637544465 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637544465 = nimCopy(result_637544465, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym193_637544462, NTI637542045), tail: nimCopy(null, tailInHEX60gensym193_637544463, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym193_637544461, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637544465;

}
      
function HEX3Aanonymous_637544468(input_637544469) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637544471 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637544472 = succeedImpl_637544453;
          var fail_637544473 = failImpl_637544460;
          Label1: do {
            var tempHEX60gensym30_637544486 = parse_637537302(a_637544440, input_637544469);
            if ((tempHEX60gensym30_637544486.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_637544486;
            if (ConstSet137[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637544471 = nimCopy(result_637544471, {kind: 1, fromInput: nimCopy(null, input_637544469, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym30_637544486.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637544492 = nimCopy(null, tempHEX60gensym30_637544486, NTI637536153);
          Label3: do {
            var tempHEX60gensym32_637544505 = parse_637536259(b_637544441, result1_637544492.tail);
            if ((tempHEX60gensym32_637544505.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_637544505;
            if (ConstSet138[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637544471 = nimCopy(result_637544471, {kind: 1, fromInput: nimCopy(null, input_637544469, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym32_637544505.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637544511 = nimCopy(null, tempHEX60gensym32_637544505, NTI637535056);
          var Temporary5 = result1_637544492;
          if (ConstSet139[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637544471 = nimCopy(result_637544471, succeed_637544472(input_637544469, Temporary5.value, result2_637544511.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637544471;

      }

  var result_637544442 = null;

    Label1: do {
    } while (false);
    result_637544442 = {body: HEX3Aanonymous_637544468};

  return result_637544442;

}

function map_637545303(a_637545306, fn_637545308) {

function succeedImpl_637545320(inputInHEX60gensym212_637545321, valueInHEX60gensym212_637545322, tailInHEX60gensym212_637545323) {
  var result_637545325 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637545325 = nimCopy(result_637545325, {kind: 0, value: nimCopy(null, valueInHEX60gensym212_637545322, NTI671088644), tail: nimCopy(null, tailInHEX60gensym212_637545323, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym212_637545321, NTI33554439), expected: []}, NTI637536153);

  return result_637545325;

}

function failImpl_637545327(inputInHEX60gensym212_637545328, expectedInHEX60gensym212_637545329, tailInHEX60gensym212_637545330) {
  var result_637545332 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637545332 = nimCopy(result_637545332, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym212_637545329, NTI637542695), tail: nimCopy(null, tailInHEX60gensym212_637545330, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym212_637545328, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637545332;

}
      
function HEX3Aanonymous_637545335(input_637545336) {
            var Temporary2;
          var Temporary3;

        var result_637545338 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637545339 = succeedImpl_637545320;
          var fail_637545340 = failImpl_637545327;
          Label1: do {
            var tempHEX60gensym24_637545353 = parse_637540596(a_637545306, input_637545336);
            if ((tempHEX60gensym24_637545353.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_637545353;
            if (ConstSet140[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637545338 = nimCopy(result_637545338, {kind: 1, fromInput: nimCopy(null, input_637545336, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym24_637545353.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637545359 = nimCopy(null, tempHEX60gensym24_637545353, NTI637538616);
          var Temporary3 = result1_637545359;
          if (ConstSet141[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1207959573)); }
          result_637545338 = nimCopy(result_637545338, succeed_637545339(input_637545336, fn_637545308(Temporary3.value), result1_637545359.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637545338;

      }

  var result_637545309 = null;

    Label1: do {
    } while (false);
    result_637545309 = {body: HEX3Aanonymous_637545335};

  return result_637545309;

}

function nop_637545431() {

function succeedImpl_637545444(inputInHEX60gensym214_637545445, valueInHEX60gensym214_637545446, tailInHEX60gensym214_637545447) {
  var result_637545449 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637545449 = nimCopy(result_637545449, {kind: 0, value: nimCopy(null, valueInHEX60gensym214_637545446, NTI671088644), tail: nimCopy(null, tailInHEX60gensym214_637545447, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym214_637545445, NTI33554439), expected: []}, NTI637536153);

  return result_637545449;

}

function failImpl_637545451(inputInHEX60gensym214_637545452, expectedInHEX60gensym214_637545453, tailInHEX60gensym214_637545454) {
  var result_637545456 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637545456 = nimCopy(result_637545456, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym214_637545453, NTI637542781), tail: nimCopy(null, tailInHEX60gensym214_637545454, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym214_637545452, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637545456;

}
      
function HEX3Aanonymous_637545459(input_637545460) {
        var result_637545462 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

          var succeed_637545463 = succeedImpl_637545444;
          var fail_637545464 = failImpl_637545451;
          result_637545462 = nimCopy(result_637545462, succeed_637545463(input_637545460, ({rows: [], baseline: 0, width: 0, flag: 0}), input_637545460), NTI637536153);

        return result_637545462;

      }

  var result_637545433 = null;

    Label1: do {
    } while (false);
    result_637545433 = {body: HEX3Aanonymous_637545459};

  return result_637545433;

}

function isSome_637545989(self_637545991) {
  var result_637545992 = false;

    result_637545992 = self_637545991.has;

  return result_637545992;

}

function get_637545980(self_637545982, otherwise_637545983) {
    var Temporary1;

  var result_637545984 = [];

    if (isSome_637545989(self_637545982)) {
    Temporary1 = self_637545982.val;
    }
    else {
    Temporary1 = otherwise_637545983;
    }
    
    result_637545984 = nimCopy(null, Temporary1, NTI33554439);

  return result_637545984;

}

function hasJsBigInt_855638059() {
  var result_855638060 = false;

    result_855638060 = typeof BigInt != 'undefined'

  return result_855638060;

}

function hiXorLoJs_1124073557(a_1124073558, b_1124073559) {
  var result_1124073560 = 0n;

    var prod_1124073561 = (a_1124073558 * b_1124073559);
    var mask_1124073562 = BigInt("0xffffffffffffffff");
    result_1124073560 = ((prod_1124073561 >> BigInt("64")) ^ (prod_1124073561 & mask_1124073562));

  return result_1124073560;

}

function hashWangYi1_1124073650(x_1124073652) {
  var result_1124073653 = 0;

    if (hasJsBigInt_855638059()) {
    var P0HEX60gensym6_1124073672 = BigInt("0xa0761d6478bd642f");
    var P1HEX60gensym6_1124073673 = BigInt("0xe7037ed1a0b428db");
    var P58HEX60gensym6_1124073674 = BigInt("0xeb44accab455d16d");
    var resHEX60gensym6_1124073675 = hiXorLoJs_1124073557(hiXorLoJs_1124073557(P0HEX60gensym6_1124073672, (BigInt(x_1124073652) ^ P1HEX60gensym6_1124073673)), P58HEX60gensym6_1124073674);
    result_1124073653 = Number((() => { const i = resHEX60gensym6_1124073675, b = 32; return BigInt.asIntN(b, i) })());
    }
    else {
      result_1124073653 = (x_1124073652 & 4294967295);
    }
    

  return result_1124073653;

}

function hash_654311923(x_654311925) {
  var result_654311926 = 0;

    result_654311926 = hashWangYi1_1124073650(x_654311925);

  return result_654311926;

}

function HEX3DHEX3D_989856663(a_989856664, b_989856665) {
  var result_989856666 = false;

  BeforeRet: do {
    result_989856666 = (((a_989856664) | 0) == ((b_989856665) | 0));
    break BeforeRet;
  } while (false);

  return result_989856666;

}

function rawGet_654311916(t_654311919, key_654311920, hc_654311921, hc_654311921_Idx) {
            var Temporary3;

  var result_654311922 = 0;

  BeforeRet: do {
    hc_654311921[hc_654311921_Idx] = hash_654311923(key_654311920);
    if ((hc_654311921[hc_654311921_Idx] == 0)) {
    hc_654311921[hc_654311921_Idx] = 314159265;
    }
    
    if (((t_654311919.data).length == 0)) {
    result_654311922 = -1;
    break BeforeRet;
    }
    
    var h_654311984 = (hc_654311921[hc_654311921_Idx] & (t_654311919.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1107296287(t_654311919.data[chckIndx(h_654311984, 0, (t_654311919.data).length - 1)].Field0)) break Label2;
            if (!(t_654311919.data[chckIndx(h_654311984, 0, (t_654311919.data).length - 1)].Field0 == hc_654311921[hc_654311921_Idx])) Temporary3 = false; else {              Temporary3 = HEX3DHEX3D_989856663(t_654311919.data[chckIndx(h_654311984, 0, (t_654311919.data).length - 1)].Field1, key_654311920);            }          if (Temporary3) {
          result_654311922 = h_654311984;
          break BeforeRet;
          }
          
          h_654311984 = nextTry_1107296290(h_654311984, (t_654311919.data).length - 1);
        }
    } while (false);
    result_654311922 = subInt(-1, h_654311984);
  } while (false);

  return result_654311922;

}

function hasKey_637544594(t_637544597, key_637544598) {
  var result_637544599 = false;

    var hc_637544600 = [0];
    result_637544599 = (0 <= rawGet_654311916(t_637544597, key_637544598, hc_637544600, 0));

  return result_637544599;

}

function contains_637544588(t_637544591, key_637544592) {
  var result_637544593 = false;

  BeforeRet: do {
    result_637544593 = hasKey_637544594(t_637544591, key_637544592);
    break BeforeRet;
  } while (false);

  return result_637544593;

}

function some_637544826(val_637544828) {
  var result_637544829 = ({val: [], has: false});

    result_637544829.has = true;
    result_637544829.val = nimCopy(null, val_637544828, NTI33554439);

  return result_637544829;

}

function raiseKeyError_637544740(key_637544742) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(HEX24_989856335(key_637544742) || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_637544673(t_637544676, key_637544677) {
  var result_637544678 = [];

    var hcHEX60gensym20_637544679 = [0];
    var indexHEX60gensym20_637544686 = rawGet_654311916(t_637544676, key_637544677, hcHEX60gensym20_637544679, 0);
    if ((0 <= indexHEX60gensym20_637544686)) {
    result_637544678 = nimCopy(null, t_637544676.data[chckIndx(indexHEX60gensym20_637544686, 0, (t_637544676.data).length - 1)].Field2, NTI33554439);
    }
    else {
    raiseKeyError_637544740(key_637544677);
    }
    

  return result_637544678;

}

function HEX26_671089512(left_671089513, right_671089514) {
  var result_671089515 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_671089515 = nimCopy(result_671089515, join_671088862([nimCopy(null, left_671089513, NTI671088644), nimCopy(null, right_671089514, NTI671088644)]), NTI671088644);

  return result_671089515;

}

function HEX3CHEX3C_637546114(a_637546117, b_637546118) {

function succeedImpl_637546130(inputInHEX60gensym228_637546131, valueInHEX60gensym228_637546132, tailInHEX60gensym228_637546133) {
  var result_637546135 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637546135 = nimCopy(result_637546135, {kind: 0, value: nimCopy(null, valueInHEX60gensym228_637546132, NTI671088644), tail: nimCopy(null, tailInHEX60gensym228_637546133, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym228_637546131, NTI33554439), expected: []}, NTI637536153);

  return result_637546135;

}

function failImpl_637546137(inputInHEX60gensym228_637546138, expectedInHEX60gensym228_637546139, tailInHEX60gensym228_637546140) {
  var result_637546142 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_637546142 = nimCopy(result_637546142, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym228_637546139, NTI637543408), tail: nimCopy(null, tailInHEX60gensym228_637546140, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym228_637546138, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);

  return result_637546142;

}
      
function HEX3Aanonymous_637546145(input_637546146) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_637546148 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_637546149 = succeedImpl_637546130;
          var fail_637546150 = failImpl_637546137;
          Label1: do {
            var tempHEX60gensym30_637546163 = parse_637537302(a_637546117, input_637546146);
            if ((tempHEX60gensym30_637546163.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_637546163;
            if (ConstSet143[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1207959573)); }
            result_637546148 = nimCopy(result_637546148, {kind: 1, fromInput: nimCopy(null, input_637546146, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym30_637546163.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result1_637546169 = nimCopy(null, tempHEX60gensym30_637546163, NTI637536153);
          Label3: do {
            var tempHEX60gensym32_637546182 = parse_637536021(b_637546118, result1_637546169.tail);
            if ((tempHEX60gensym32_637546182.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_637546182;
            if (ConstSet144[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1207959573)); }
            result_637546148 = nimCopy(result_637546148, {kind: 1, fromInput: nimCopy(null, input_637546146, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1207959587), tail: nimCopy(null, tempHEX60gensym32_637546182.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI637536153);
            break BeforeRet;
            }
            
          } while (false);
          var result2_637546188 = nimCopy(null, tempHEX60gensym32_637546182, NTI1207959684);
          var Temporary5 = result1_637546169;
          if (ConstSet145[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1207959573)); }
          result_637546148 = nimCopy(result_637546148, succeed_637546149(input_637546146, Temporary5.value, result2_637546188.tail), NTI637536153);
          break BeforeRet;
        } while (false);

        return result_637546148;

      }

  var result_637546119 = null;

    Label1: do {
    } while (false);
    result_637546119 = {body: HEX3Aanonymous_637546145};

  return result_637546119;

}

function HEX24_671088672(rect_671088673) {
  var result_671088674 = [];

    result_671088674 = nimCopy(null, nsuJoinSep(rect_671088673.rows, makeNimstrLit("\x0A")), NTI33554439);

  return result_671088674;

}

function nsuCountLines(s_687867524) {
  var result_687867525 = 0;

    result_687867525 = 1;
    var i_687867526 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_687867526 < (s_687867524).length)) break Label2;
          switch (s_687867524[chckIndx(i_687867526, 0, (s_687867524).length - 1)]) {
          case 13:
            if (((addInt(i_687867526, 1) < (s_687867524).length) && (s_687867524[chckIndx(addInt(i_687867526, 1), 0, (s_687867524).length - 1)] == 10))) {
            i_687867526 = addInt(i_687867526, 1);
            }
            
            result_687867525 = addInt(result_687867525, 1);
            break;
          case 10:
            result_687867525 = addInt(result_687867525, 1);
            break;
          default: 
            break;
          }
          i_687867526 = addInt(i_687867526, 1);
        }
    } while (false);

  return result_687867525;

}

function nsuSplitLines(s_687866482, keepEol_687866483) {
            var Temporary6;

  var result_687866484 = [];

    result_687866484 = nimCopy(null, [], NTI687866336);
    Label1: do {
      var xHEX60gensym76_687866490 = [];
      var first_503316937 = 0;
      var last_503316938 = 0;
      var eolpos_503316939 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((last_503316938 < (s_687866482).length) && !((ConstSet147[s_687866482[chckIndx(last_503316938, 0, (s_687866482).length - 1)]] != undefined)))) break Label5;
                  last_503316938 = addInt(last_503316938, 1);
                }
            } while (false);
            eolpos_503316939 = last_503316938;
            if ((last_503316938 < (s_687866482).length)) {
            if ((s_687866482[chckIndx(last_503316938, 0, (s_687866482).length - 1)] == 10)) {
            last_503316938 = addInt(last_503316938, 1);
            }
            else {
            if ((s_687866482[chckIndx(last_503316938, 0, (s_687866482).length - 1)] == 13)) {
            last_503316938 = addInt(last_503316938, 1);
            if (((last_503316938 < (s_687866482).length) && (s_687866482[chckIndx(last_503316938, 0, (s_687866482).length - 1)] == 10))) {
            last_503316938 = addInt(last_503316938, 1);
            }
            
            }
            }
            }
            
            if (keepEol_687866483) {
            Temporary6 = subInt(last_503316938, 1);
            }
            else {
            Temporary6 = subInt(eolpos_503316939, 1);
            }
            
            xHEX60gensym76_687866490 = substr_33557921(s_687866482, first_503316937, Temporary6);
            var Temporary7 = nimCopy(null, xHEX60gensym76_687866490, NTI33554439);
            result_687866484.push(Temporary7);;
            if ((eolpos_503316939 == last_503316938)) {
            break Label2;
            }
            
            first_503316937 = last_503316938;
          }
      } while (false);
    } while (false);

  return result_687866484;

}

function lineInfo_637546207(result1_637546209) {
  var result_637546210 = {Field0: 0, Field1: 0};

    var prior_637546229 = HEX5BHEX5D_989858970(result1_637546209.fromInput, HEX2EHEX2E_922746960(0, addInt((result1_637546209.tail).length, 1)));
    var lineNum_637546230 = nsuCountLines(prior_637546229);
    var lines_637546231 = nsuSplitLines(prior_637546229, false);
    var colmNum_637546235 = addInt((lines_637546231[chckIndx(subInt((lines_637546231).length, 1), 0, (lines_637546231).length - 1)]).length, 1);
    result_637546210 = nimCopy(result_637546210, {Field0: lineNum_637546230, Field1: colmNum_637546235}, NTI1207959605);

  return result_637546210;

}

function mkDigit_1275068421(v_1275068422, typ_1275068423) {
      var Temporary1;

  var result_1275068424 = [];

    if (!((v_1275068422 < 26))) {
    failedAssertImpl_218103864(makeNimstrLit("strformat.nim(320, 9) `v < 26` "));
    }
    
    if ((v_1275068422 < 10)) {
    result_1275068424 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_1275068422), 0, 255)), NTI33554439);
    }
    else {
      if ((typ_1275068423 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_1275068424 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Temporary1, v_1275068422), 10), 0, 255)), NTI33554439);
    }
    

  return result_1275068424;

}

function formatInt_637546248(n_637546250, radix_637546251, spec_637546252) {
    var Temporary1;
    var Temporary8;

  var result_637546253 = [];

    var n_637546256 = n_637546250;
    var negative_637546257 = (n_637546256 < 0);
    if (negative_637546257) {
    Temporary1 = ((~(n_637546256) + 1) );
    }
    else {
    Temporary1 = n_637546256;
    }
    
    var v_637546258 = Temporary1;
    var xx_637546259 = [];
    if (spec_637546252.alternateForm) {
    switch (spec_637546252.typ) {
    case 88:
      xx_637546259 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 120:
      xx_637546259 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 98:
      xx_637546259 = nimCopy(null, makeNimstrLit("0b"), NTI33554439);
      break;
    case 111:
      xx_637546259 = nimCopy(null, makeNimstrLit("0o"), NTI33554439);
      break;
    default: 
      break;
    }
    }
    
    if ((v_637546258 == 0)) {
    result_637546253 = nimCopy(null, makeNimstrLit("0"), NTI33554439);
    }
    else {
      result_637546253 = nimCopy(null, [], NTI33554439);
      Label2: do {
          Label3: while (true) {
          if (!(0 < v_637546258)) break Label3;
            var d_637546260 = (v_637546258 % radix_637546251);
            v_637546258 = Math.trunc(((v_637546258 / radix_637546251) ));
            result_637546253.push.apply(result_637546253, mkDigit_1275068421(chckRange(d_637546260, -2147483648, 2147483647), spec_637546252.typ));;
          }
      } while (false);
      Label4: do {
        var idx_637546265 = 0;
        var colontmp__503316944 = 0;
        colontmp__503316944 = divInt((result_637546253).length, 2);
        var i_503316945 = 0;
        Label5: do {
            Label6: while (true) {
            if (!(i_503316945 < colontmp__503316944)) break Label6;
              idx_637546265 = i_503316945;
              var Temporary7 = result_637546253[chckIndx(idx_637546265, 0, (result_637546253).length - 1)]; result_637546253[chckIndx(idx_637546265, 0, (result_637546253).length - 1)] = result_637546253[chckIndx(subInt(subInt((result_637546253).length, idx_637546265), 1), 0, (result_637546253).length - 1)]; result_637546253[chckIndx(subInt(subInt((result_637546253).length, idx_637546265), 1), 0, (result_637546253).length - 1)] = Temporary7;              i_503316945 = addInt(i_503316945, 1);
            }
        } while (false);
      } while (false);
    }
    
    if (spec_637546252.padWithZero) {
    if (negative_637546257) Temporary8 = true; else {      Temporary8 = !((spec_637546252.sign == 45));    }    var sign_637546270 = Temporary8;
    var toFill_637546274 = subInt(subInt(subInt(spec_637546252.minimumWidth, (result_637546253).length), (xx_637546259).length), (sign_637546270 ? 1 : 0));
    if ((0 < toFill_637546274)) {
    result_637546253 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_637546274, 0, 2147483647)) || []).concat(result_637546253 || []), NTI33554439);
    }
    
    }
    
    if (negative_637546257) {
    result_637546253 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_637546259 || [],result_637546253 || []), NTI33554439);
    }
    else {
    if (!((spec_637546252.sign == 45))) {
    result_637546253 = nimCopy(null, [spec_637546252.sign].concat(xx_637546259 || [],result_637546253 || []), NTI33554439);
    }
    else {
      result_637546253 = nimCopy(null, (xx_637546259 || []).concat(result_637546253 || []), NTI33554439);
    }
    }
    if ((spec_637546252.align == 60)) {
    Label9: do {
      var i_637546279 = 0;
      var colontmp__503316948 = 0;
      colontmp__503316948 = (result_637546253).length;
      var i_503316949 = colontmp__503316948;
      Label10: do {
          Label11: while (true) {
          if (!(i_503316949 < spec_637546252.minimumWidth)) break Label11;
            i_637546279 = i_503316949;
            addChar(result_637546253, spec_637546252.fill);;
            i_503316949 = addInt(i_503316949, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      var toFill_637546280 = subInt(spec_637546252.minimumWidth, (result_637546253).length);
      if ((spec_637546252.align == 94)) {
      var half_637546281 = divInt(toFill_637546280, 2);
      result_637546253 = nimCopy(null, (nsuRepeatChar(spec_637546252.fill, chckRange(half_637546281, 0, 2147483647)) || []).concat(result_637546253 || [],nsuRepeatChar(spec_637546252.fill, chckRange(subInt(toFill_637546280, half_637546281), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        if ((0 < toFill_637546280)) {
        result_637546253 = nimCopy(null, (nsuRepeatChar(spec_637546252.fill, chckRange(toFill_637546280, 0, 2147483647)) || []).concat(result_637546253 || []), NTI33554439);
        }
        
      }
      
    }
    

  return result_637546253;

}

function formatValue_637546240(result_637546242, result_637546242_Idx, value_637546243, specifier_637546244) {
  BeforeRet: do {
    if (((specifier_637546244).length == 0)) {
    result_637546242[result_637546242_Idx].push.apply(result_637546242[result_637546242_Idx], HEX24_335544323(value_637546243));;
    break BeforeRet;
    }
    
    var spec_637546245 = parseStandardFormatSpecifier_1275068474(specifier_637546244, 0, false);
    var radix_637546246 = 10;
    switch (spec_637546245.typ) {
    case 120:
    case 88:
      radix_637546246 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_637546246 = 2;
      break;
    case 111:
      radix_637546246 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_637546245.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_637546242[result_637546242_Idx].push.apply(result_637546242[result_637546242_Idx], formatInt_637546248(value_637546243, radix_637546246, spec_637546245));;
  } while (false);

  
}

function render_637534219(latex_637534220, oneLine_637534221) {
    
function HEX3Aanonymous_637536673(x_637536693) {
      var result_637536696 = [];

        result_637536696 = nimCopy(null, [nimCopy(null, x_637536693, NTI637535099)], NTI637535632);

      return result_637536696;

    }
    
function HEX3Aanonymous_637536161(x_637536181) {
      var result_637536184 = [];

        result_637536184 = nimCopy(null, [nimCopy(null, x_637536181, NTI33554439)], NTI671088697);

      return result_637536184;

    }
    
function HEX3Aanonymous_637536888(x_637536949) {
      var result_637536952 = [];

        var resultHEX60gensym42_637536961 = newSeq_452985301(0);
        Label1: do {
          var xHEX60gensym42_637536965 = [];
          var i_503316578 = 0;
          var L_503316579 = (x_637536949).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_503316578 < L_503316579)) break Label3;
                xHEX60gensym42_637536965 = x_637536949[chckIndx(i_503316578, 0, (x_637536949).length - 1)];
                var a_637536966 = nimCopy(null, resultHEX60gensym42_637536961, NTI452985127);
                var b_637536967 = nimCopy(null, xHEX60gensym42_637536965, NTI637535050);
                resultHEX60gensym42_637536961 = nimCopy(null, HEX26_671088761(a_637536966, b_637536967), NTI671088712);
                i_503316578 = addInt(i_503316578, 1);
                if (!(((x_637536949).length == L_503316579))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_637536952 = nimCopy(null, resultHEX60gensym42_637536961, NTI452985127);

      return result_637536952;

    }
    
function HEX3Aanonymous_637537966(x_637537986) {
      var result_637537989 = [];

        result_637537989 = nimCopy(null, [nimCopy(null, x_637537986, NTI637536211)], NTI637536763);

      return result_637537989;

    }
    
function HEX3Aanonymous_637537454(x_637537474) {
      var result_637537477 = [];

        result_637537477 = nimCopy(null, [nimCopy(null, x_637537474, NTI671088644)], NTI637536318);

      return result_637537477;

    }
    
function HEX3Aanonymous_637538181(x_637538272) {
      var result_637538275 = [];

        var resultHEX60gensym68_637538284 = newSeq_671088990(0);
        Label1: do {
          var xHEX60gensym68_637538288 = [];
          var i_503316617 = 0;
          var L_503316618 = (x_637538272).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_503316617 < L_503316618)) break Label3;
                xHEX60gensym68_637538288 = x_637538272[chckIndx(i_503316617, 0, (x_637538272).length - 1)];
                var a_637538289 = nimCopy(null, resultHEX60gensym68_637538284, NTI671088854);
                var b_637538290 = nimCopy(null, xHEX60gensym68_637538288, NTI637536162);
                resultHEX60gensym68_637538284 = nimCopy(null, HEX26_637538220(a_637538289, b_637538290), NTI637537192);
                i_503316617 = addInt(i_503316617, 1);
                if (!(((x_637538272).length == L_503316618))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_637538275 = nimCopy(null, resultHEX60gensym68_637538284, NTI671088854);

      return result_637538275;

    }
    
function HEX3Aanonymous_637538369(atoms_637538385) {
      var result_637538388 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_637538388 = nimCopy(result_637538388, join_671088862(atoms_637538385), NTI671088644);

      return result_637538388;

    }
    
function HEX3Aanonymous_637538528(ch_637538544) {
      var result_637538547 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_637538547 = nimCopy(result_637538547, toTextRectOneLine_671088735(nimCharToStr(ch_637538544), 0, 1), NTI671088644);

      return result_637538547;

    }
    
function HEX3Aanonymous_637538631(letter_637538647) {
      var result_637538650 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_637538650 = nimCopy(result_637538650, toTextRectOneLine_671088735(inFont_654311608(letter_637538647, 0), 0, 1), NTI671088644);

      return result_637538650;

    }
    
function HEX3Aanonymous_637538698(pair_637538701) {
        
function HEX3Aanonymous_637539320(x_637539340) {
          var result_637539343 = [];

            result_637539343 = nimCopy(null, [nimCopy(null, x_637539340, NTI637535099)], NTI637535632);

          return result_637539343;

        }
        
function HEX3Aanonymous_637539209(x_637539229) {
          var result_637539232 = [];

            result_637539232 = nimCopy(null, [nimCopy(null, x_637539229, NTI33554439)], NTI671088697);

          return result_637539232;

        }
        
function HEX3Aanonymous_637539418(x_637539453) {
          var result_637539456 = [];

            var resultHEX60gensym87_637539465 = newSeq_452985301(0);
            Label1: do {
              var xHEX60gensym87_637539469 = [];
              var i_503316753 = 0;
              var L_503316754 = (x_637539453).length;
              Label2: do {
                  Label3: while (true) {
                  if (!(i_503316753 < L_503316754)) break Label3;
                    xHEX60gensym87_637539469 = x_637539453[chckIndx(i_503316753, 0, (x_637539453).length - 1)];
                    var a_637539470 = nimCopy(null, resultHEX60gensym87_637539465, NTI452985127);
                    var b_637539471 = nimCopy(null, xHEX60gensym87_637539469, NTI637535050);
                    resultHEX60gensym87_637539465 = nimCopy(null, HEX26_671088761(a_637539470, b_637539471), NTI671088712);
                    i_503316753 = addInt(i_503316753, 1);
                    if (!(((x_637539453).length == L_503316754))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            result_637539456 = nimCopy(null, resultHEX60gensym87_637539465, NTI452985127);

          return result_637539456;

        }
        
function HEX3Aanonymous_637539529(letter_637539544) {
          var result_637539547 = ({rows: [], baseline: 0, width: 0, flag: 0});

            result_637539547 = nimCopy(result_637539547, toTextRectOneLine_671088735(inFont_654311608(letter_637539544, font_637538706), 0, 1), NTI671088644);

          return result_637539547;

        }

      var result_637538704 = null;

        var name_637538705 = nimCopy(null, pair_637538701["Field0"], NTI33554439);
        var font_637538706 = pair_637538701["Field1"];
        result_637538704 = map_637538565(HEX7C_1207960666(HEX3CHEX3C_637539060(HEX3CHEX3C_637538977(HEX3EHEX3E_637538798(HEX3EHEX3E_637538881(HEX3EHEX3E_637538798(HEX3EHEX3E_637538715(s_1207959663(name_637538705), ws_637537038), c_1207959785(123)), ws_637537038), alpha_637538514), ws_637537038), c_1207959785(125)), HEX3EHEX3E_637538798(HEX3EHEX3E_637538715(s_1207959663(name_637538705), map_637536981(HEX26_637536738(map_637536493(HEX2A_637535831(whitespace_1207960647, HEX2EHEX2E_989856595(1, 2147483647).a), HEX3Aanonymous_637539320), HEX2A_637536317(HEX7C_637536215(map_637535975(whitespace_1207960647, HEX3Aanonymous_637539209), nop_637535839()), subInt(HEX2EHEX2E_989856595(1, 2147483647).b, HEX2EHEX2E_989856595(1, 2147483647).a))), HEX3Aanonymous_637539418)), alpha_637538514)), HEX3Aanonymous_637539529);

      return result_637538704;

    }
    
function HEX3Aanonymous_637539731(entry_637539734) {
        var Temporary1;
        
function HEX3Aanonymous_637539898(x_637539914) {
          var result_637539917 = ({rows: [], baseline: 0, width: 0, flag: 0});

            result_637539917 = nimCopy(result_637539917, val_637539739, NTI671088644);

          return result_637539917;

        }
          
function HEX3Aanonymous_637539994(x_637540010) {
            var result_637540013 = ({rows: [], baseline: 0, width: 0, flag: 0});

              result_637540013 = nimCopy(result_637540013, val_637539739, NTI671088644);

            return result_637540013;

          }

      var result_637539737 = null;

        var key_637539738 = nimCopy(null, entry_637539734["Field0"], NTI33554439);
        var val_637539739 = nimCopy(null, entry_637539734["Field1"], NTI671088644);
        if ((key_637539738[chckIndx(0, 0, (key_637539738).length - 1)] == 92)) {
        Temporary1 = map_637539927(HEX3CHEX3C_637539813(s_1207959663(key_637539738), HEX21_637539756(letter_1207960740)), HEX3Aanonymous_637539898);
        }
        else {
        Temporary1 = map_637539927(s_1207959663(key_637539738), HEX3Aanonymous_637539994);
        }
        
        result_637539737 = Temporary1;

      return result_637539737;

    }
    
function HEX3Aanonymous_637541010(x_637541030) {
      var result_637541033 = [];

        result_637541033 = nimCopy(null, [nimCopy(null, x_637541030, NTI637538648)], NTI637539203);

      return result_637541033;

    }
    
function HEX3Aanonymous_637540490(x_637540510) {
      var result_637540513 = [];

        result_637540513 = nimCopy(null, [x_637540510], NTI637538761);

      return result_637540513;

    }
    
function HEX3Aanonymous_637541225(x_637541322) {
      var result_637541325 = [];

        var resultHEX60gensym124_637541334 = newSeq_637541234(0);
        Label1: do {
          var xHEX60gensym124_637541338 = [];
          var i_503316806 = 0;
          var L_503316807 = (x_637541322).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_503316806 < L_503316807)) break Label3;
                xHEX60gensym124_637541338 = x_637541322[chckIndx(i_503316806, 0, (x_637541322).length - 1)];
                var a_637541339 = nimCopy(null, resultHEX60gensym124_637541334, NTI637539612);
                var b_637541340 = nimCopy(null, xHEX60gensym124_637541338, NTI637538610);
                resultHEX60gensym124_637541334 = nimCopy(null, HEX26_637541269(a_637541339, b_637541340), NTI637539635);
                i_503316806 = addInt(i_503316806, 1);
                if (!(((x_637541322).length == L_503316807))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_637541325 = nimCopy(null, resultHEX60gensym124_637541334, NTI637539612);

      return result_637541325;

    }
    
function HEX3Aanonymous_637541502(chars_637541538) {
      var result_637541541 = [];

        result_637541541 = nimCopy(null, join_637541509(chars_637541538, []), NTI33554439);

      return result_637541541;

    }
    
function HEX3Aanonymous_637541620(name_637541623) {
      var result_637541626 = false;

        result_637541626 = contains_637541669(commands_654314654, name_637541623);

      return result_637541626;

    }
    
function HEX3Aanonymous_637541752(name_637541891) {
      var result_637541894 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_637541894 = nimCopy(result_637541894, HEX5BHEX5D_637541812(commands_654314654, name_637541891), NTI671088644);

      return result_637541894;

    }
    
function HEX3Aanonymous_637541969(entry_637541972) {
        
function HEX3Aanonymous_637541988(x_637542004) {
          var result_637542007 = ({rows: [], baseline: 0, width: 0, flag: 0});

            result_637542007 = nimCopy(result_637542007, val_637541977, NTI671088644);

          return result_637542007;

        }

      var result_637541975 = null;

        var key_637541976 = nimCopy(null, entry_637541972["Field0"], NTI33554439);
        var val_637541977 = nimCopy(null, entry_637541972["Field1"], NTI671088644);
        result_637541975 = map_637539927(s_1207959663(key_637541976), HEX3Aanonymous_637541988);

      return result_637541975;

    }
    
function HEX3Aanonymous_637542082(entry_637542085) {
        
function HEX3Aanonymous_637542289(rect_637542319) {
            var Temporary1;
              var Temporary2;

          var result_637542322 = ({rows: [], baseline: 0, width: 0, flag: 0});

            var rect_637542323 = nimCopy(null, rect_637542319, NTI671088644);
              if (!(rect_637542323.width == 1)) Temporary2 = false; else {                Temporary2 = (height_671088690(rect_637542323) == 1);              }            if (Temporary2) {
            rect_637542323.rows[chckIndx(0, 0, (rect_637542323.rows).length - 1)].push.apply(rect_637542323.rows[chckIndx(0, 0, (rect_637542323.rows).length - 1)], val_637542090.Field0);;
            Temporary1 = rect_637542323;
            }
            else {
            if (oneLine_637534221) {
            var fmtRes_637542328 = [mnewString(0)];
            formatValue_1275068578(fmtRes_637542328, 0, val_637542090.Field0, []);
            fmtRes_637542328[0].push.apply(fmtRes_637542328[0], makeNimstrLit(" ("));;
            formatValue_1275068578(fmtRes_637542328, 0, row_671088684(rect_637542323), []);
            fmtRes_637542328[0].push.apply(fmtRes_637542328[0], makeNimstrLit(")"));;
            Temporary1 = toTextRectOneLine_671088735(fmtRes_637542328[0], 0, 0);
            }
            else {
            Temporary1 = stack_671089574([toTextRectOneLine_671088735(val_637542090.Field1, 0, 0), nimCopy(null, rect_637542323, NTI671088644)], addInt(1, rect_637542323.baseline), 0);
            }
            }
            result_637542322 = nimCopy(result_637542322, Temporary1, NTI671088644);

          return result_637542322;

        }

      var result_637542088 = null;

        var key_637542089 = nimCopy(null, entry_637542085["Field0"], NTI33554439);
        var val_637542090 = nimCopy(null, entry_637542085["Field1"], NTI654312248);
        result_637542088 = map_637542337(HEX3EHEX3E_637542206(HEX3EHEX3E_637538881(HEX3EHEX3E_637542110(s_1207959663(key_637542089), HEX21_637539756(letter_1207960740)), ws_637537038), atom_637537049), HEX3Aanonymous_637542289);

      return result_637542088;

    }
    
function HEX3Aanonymous_637542592(x_637542612) {
      var result_637542615 = [];

        result_637542615 = nimCopy(null, [nimCopy(null, x_637542612, NTI671088644)], NTI637536318);

      return result_637542615;

    }
    
function HEX3Aanonymous_637542655(x_637542675) {
      var result_637542678 = [];

        result_637542678 = nimCopy(null, [nimCopy(null, x_637542675, NTI671088644)], NTI637536318);

      return result_637542678;

    }
    
function HEX3Aanonymous_637542807(fraction_637542854) {
        var Temporary1;
            var Temporary2;
            var Temporary3;
              var Temporary4;

      var result_637542857 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var numerator_637542858 = nimCopy(null, fraction_637542854[chckIndx(0, 0, (fraction_637542854).length - 1)], NTI671088644);
        var denominator_637542859 = nimCopy(null, fraction_637542854[chckIndx(1, 0, (fraction_637542854).length - 1)], NTI671088644);
        if (oneLine_637534221) {
        var fmtRes_637542864 = [mnewString(0)];
        formatValue_1275068578(fmtRes_637542864, 0, rowAsAtom_671088687(numerator_637542858), []);
        fmtRes_637542864[0].push.apply(fmtRes_637542864[0], makeNimstrLit(" / "));;
        formatValue_1275068578(fmtRes_637542864, 0, rowAsAtom_671088687(denominator_637542859), []);
        Temporary1 = toTextRectOneLine_671088735(fmtRes_637542864[0], 0, 0);
        }
        else {
          var width_637542869 = max_637542821(numerator_637542858.width, denominator_637542859.width);
          var fractionLine_637542870 = nsuRepeatStr(makeNimstrLit("\xE2\x94\x80"), width_637542869);
          var flag_637542871 = 5;
            if (!(numerator_637542858.flag == 5)) Temporary3 = false; else {              Temporary3 = (numerator_637542858.width == width_637542869);            }            if (Temporary3) Temporary2 = true; else {              if (!(denominator_637542859.flag == 5)) Temporary4 = false; else {                Temporary4 = (denominator_637542859.width == width_637542869);              }              Temporary2 = Temporary4;            }          if (Temporary2) {
          fractionLine_637542870 = nimCopy(null, (makeNimstrLit("\xE2\x95\xB6") || []).concat(fractionLine_637542870 || [],makeNimstrLit("\xE2\x95\xB4") || []), NTI33554439);
          flag_637542871 = 0;
          }
          
        Temporary1 = withFlag_671089660(stack_671089574([nimCopy(null, numerator_637542858, NTI671088644), toTextRectOneLine_671088735(fractionLine_637542870, 0, 0), nimCopy(null, denominator_637542859, NTI671088644)], height_671088690(numerator_637542858), 0), flag_637542871);
        }
        
        result_637542857 = nimCopy(result_637542857, Temporary1, NTI671088644);

      return result_637542857;

    }
    
function HEX3Aanonymous_637543038(x_637543058) {
      var result_637543061 = [];

        result_637543061 = nimCopy(null, [nimCopy(null, x_637543058, NTI671088644)], NTI637536318);

      return result_637543061;

    }
    
function HEX3Aanonymous_637543101(x_637543121) {
      var result_637543124 = [];

        result_637543124 = nimCopy(null, [nimCopy(null, x_637543121, NTI671088644)], NTI637536318);

      return result_637543124;

    }

function bigDelimiter_637534223(delimiter_637534224, height_637534225, baseline_637534226) {
  var result_637534227 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_637534227.rows = nimCopy(null, newSeq_452985301(height_637534225), NTI452985127);
    result_637534227.width = 1;
    result_637534227.baseline = baseline_637534226;
    switch (toJSStr(delimiter_637534224)) {
    case "{":
      if ((height_637534225 == 2)) {
      result_637534227.rows[chckIndx(0, 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB0"), NTI33554439);
      result_637534227.rows[chckIndx(1, 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB1"), NTI33554439);
      }
      else {
        result_637534227.rows[chckIndx(0, 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xA7"), NTI33554439);
        Label1: do {
          var i_637535620 = 0;
          var colontmp__503316874 = 0;
          colontmp__503316874 = subInt(height_637534225, 1);
          var i_503316875 = 1;
          Label2: do {
              Label3: while (true) {
              if (!(i_503316875 < colontmp__503316874)) break Label3;
                i_637535620 = i_503316875;
                result_637534227.rows[chckIndx(i_637535620, 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAA"), NTI33554439);
                i_503316875 = addInt(i_503316875, 1);
              }
          } while (false);
        } while (false);
        result_637534227.rows[chckIndx(divInt(height_637534225, 2), 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xA8"), NTI33554439);
        HEX5BHEX5DHEX3D_637535621(result_637534227.rows, 1, makeNimstrLit("\xE2\x8E\xA9"));
      }
      
      break;
    case "}":
      if ((height_637534225 == 2)) {
      result_637534227.rows[chckIndx(0, 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB1"), NTI33554439);
      result_637534227.rows[chckIndx(1, 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB0"), NTI33554439);
      }
      else {
        result_637534227.rows[chckIndx(0, 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAB"), NTI33554439);
        Label4: do {
          var i_637535633 = 0;
          var colontmp__503316878 = 0;
          colontmp__503316878 = subInt(height_637534225, 1);
          var i_503316879 = 1;
          Label5: do {
              Label6: while (true) {
              if (!(i_503316879 < colontmp__503316878)) break Label6;
                i_637535633 = i_503316879;
                result_637534227.rows[chckIndx(i_637535633, 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAA"), NTI33554439);
                i_503316879 = addInt(i_503316879, 1);
              }
          } while (false);
        } while (false);
        result_637534227.rows[chckIndx(divInt(height_637534225, 2), 0, (result_637534227.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAC"), NTI33554439);
        HEX5BHEX5DHEX3D_637535621(result_637534227.rows, 1, makeNimstrLit("\xE2\x8E\xAD"));
      }
      
      break;
    case "⟨":
      result_637534227.width = chckRange(divInt(addInt(height_637534225, 1), 2), 0, 2147483647);
      var widthDec_637535639 = subInt(result_637534227.width, 1);
      if ((modInt(height_637534225, 2) == 1)) {
      result_637534227.rows[chckIndx(divInt(height_637534225, 2), 0, (result_637534227.rows).length - 1)] = nimCopy(null, (makeNimstrLit("\xE2\x9F\xA8") || []).concat(nsuRepeatStr(makeNimstrLit(" "), chckRange(divInt(height_637534225, 2), 0, 2147483647)) || []), NTI33554439);
      }
      
      Label7: do {
        var i_637535644 = 0;
        var colontmp__503316882 = 0;
        colontmp__503316882 = divInt(height_637534225, 2);
        var i_503316883 = 0;
        Label8: do {
            Label9: while (true) {
            if (!(i_503316883 < colontmp__503316882)) break Label9;
              i_637535644 = i_503316883;
              result_637534227.rows[chckIndx(i_637535644, 0, (result_637534227.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_637535639, i_637535644), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB1") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(i_637535644, 0, 2147483647)) || []), NTI33554439);
              result_637534227.rows[chckIndx(subInt(subInt(height_637534225, 1), i_637535644), 0, (result_637534227.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_637535639, i_637535644), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB2") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(i_637535644, 0, 2147483647)) || []), NTI33554439);
              i_503316883 = addInt(i_503316883, 1);
            }
        } while (false);
      } while (false);
      break;
    case "⟩":
      result_637534227.width = chckRange(divInt(addInt(height_637534225, 1), 2), 0, 2147483647);
      var widthDec_637535645 = subInt(result_637534227.width, 1);
      if ((modInt(height_637534225, 2) == 1)) {
      result_637534227.rows[chckIndx(divInt(height_637534225, 2), 0, (result_637534227.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(divInt(height_637534225, 2), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x9F\xA9") || []), NTI33554439);
      }
      
      Label10: do {
        var i_637535650 = 0;
        var colontmp__503316886 = 0;
        colontmp__503316886 = divInt(height_637534225, 2);
        var i_503316887 = 0;
        Label11: do {
            Label12: while (true) {
            if (!(i_503316887 < colontmp__503316886)) break Label12;
              i_637535650 = i_503316887;
              result_637534227.rows[chckIndx(i_637535650, 0, (result_637534227.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(i_637535650, 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB2") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_637535645, i_637535650), 0, 2147483647)) || []), NTI33554439);
              result_637534227.rows[chckIndx(subInt(subInt(height_637534225, 1), i_637535650), 0, (result_637534227.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(i_637535650, 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB1") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_637535645, i_637535650), 0, 2147483647)) || []), NTI33554439);
              i_503316887 = addInt(i_503316887, 1);
            }
        } while (false);
      } while (false);
      break;
    default: 
      var colontmp__503316893 = HEX5BHEX5D_637535704(delimiterParts_637535608, delimiter_637534224);
      var top_637535774 = nimCopy(null, colontmp__503316893["Field0"], NTI33554439);
      var mid_637535775 = nimCopy(null, colontmp__503316893["Field1"], NTI33554439);
      var bottom_637535776 = nimCopy(null, colontmp__503316893["Field2"], NTI33554439);
      result_637534227.rows[chckIndx(0, 0, (result_637534227.rows).length - 1)] = nimCopy(null, top_637535774, NTI33554439);
      Label13: do {
        var i_637535781 = 0;
        var colontmp__503316890 = 0;
        colontmp__503316890 = subInt(height_637534225, 1);
        var i_503316891 = 1;
        Label14: do {
            Label15: while (true) {
            if (!(i_503316891 < colontmp__503316890)) break Label15;
              i_637535781 = i_503316891;
              result_637534227.rows[chckIndx(i_637535781, 0, (result_637534227.rows).length - 1)] = nimCopy(null, mid_637535775, NTI33554439);
              i_503316891 = addInt(i_503316891, 1);
            }
        } while (false);
      } while (false);
      HEX5BHEX5DHEX3D_637535621(result_637534227.rows, 1, bottom_637535776);
      break;
    }

  return result_637534227;

}
    
function HEX3Aanonymous_637543179(nk_637543202) {
        var Temporary1;

      var result_637543205 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var n_637543206 = nimCopy(null, nk_637543202[chckIndx(0, 0, (nk_637543202).length - 1)], NTI671088644);
        var k_637543207 = nimCopy(null, nk_637543202[chckIndx(1, 0, (nk_637543202).length - 1)], NTI671088644);
        if (oneLine_637534221) {
        var fmtRes_637543212 = [mnewString(0)];
        fmtRes_637543212[0].push.apply(fmtRes_637543212[0], makeNimstrLit("C("));;
        formatValue_1275068578(fmtRes_637543212, 0, row_671088684(n_637543206), []);
        fmtRes_637543212[0].push.apply(fmtRes_637543212[0], makeNimstrLit(", "));;
        formatValue_1275068578(fmtRes_637543212, 0, row_671088684(k_637543207), []);
        fmtRes_637543212[0].push.apply(fmtRes_637543212[0], makeNimstrLit(")"));;
        Temporary1 = toTextRectOneLine_671088735(fmtRes_637543212[0], 0, 0);
        }
        else {
          var inside_637543213 = stack_671089574([nimCopy(null, n_637543206, NTI671088644), nimCopy(null, k_637543207, NTI671088644)], height_671088690(n_637543206), 0);
        Temporary1 = join_671088862([bigDelimiter_637534223(makeNimstrLit("("), height_671088690(inside_637543213), chckRange(inside_637543213.baseline, 0, 2147483647)), nimCopy(null, inside_637543213, NTI671088644), bigDelimiter_637534223(makeNimstrLit(")"), height_671088690(inside_637543213), chckRange(inside_637543213.baseline, 0, 2147483647))]);
        }
        
        result_637543205 = nimCopy(result_637543205, Temporary1, NTI671088644);

      return result_637543205;

    }
    
function HEX3Aanonymous_637543250(arg_637543296) {
        var Temporary1;

      var result_637543299 = ({rows: [], baseline: 0, width: 0, flag: 0});

        if (oneLine_637534221) {
        var fmtRes_637543304 = [mnewString(0)];
        fmtRes_637543304[0].push.apply(fmtRes_637543304[0], makeNimstrLit("["));;
        formatValue_1275068578(fmtRes_637543304, 0, row_671088684(arg_637543296), []);
        fmtRes_637543304[0].push.apply(fmtRes_637543304[0], makeNimstrLit("]"));;
        Temporary1 = toTextRectOneLine_671088735(fmtRes_637543304[0], 0, 0);
        }
        else {
          var horizontal_637543305 = toTextRectOneLine_671088735(nsuRepeatStr(makeNimstrLit("\xE2\x94\x80"), arg_637543296.width), 0, 0);
          var sandwich_637543306 = stack_671089574([nimCopy(null, horizontal_637543305, NTI671088644), nimCopy(null, arg_637543296, NTI671088644), nimCopy(null, horizontal_637543305, NTI671088644)], addInt(arg_637543296.baseline, 1), 1);
          var left_637543307 = ({rows: [], baseline: 0, width: 0, flag: 0});
          left_637543307.rows = nimCopy(null, newSeq_452985301(height_671088690(sandwich_637543306)), NTI452985127);
          left_637543307.width = 1;
          left_637543307.baseline = sandwich_637543306.baseline;
          Label2: do {
            var i_637543319 = 0;
            var colontmp__503316522 = 0;
            colontmp__503316522 = subInt(height_671088690(sandwich_637543306), 1);
            var i_503316523 = 1;
            Label3: do {
                Label4: while (true) {
                if (!(i_503316523 < colontmp__503316522)) break Label4;
                  i_637543319 = i_503316523;
                  left_637543307.rows[chckIndx(i_637543319, 0, (left_637543307.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x82"), NTI33554439);
                  i_503316523 = addInt(i_503316523, 1);
                }
            } while (false);
          } while (false);
          var right_637543320 = nimCopy(null, left_637543307, NTI671088644);
          left_637543307.rows[chckIndx(0, 0, (left_637543307.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x8C"), NTI33554439);
          HEX5BHEX5DHEX3D_637535621(left_637543307.rows, 1, makeNimstrLit("\xE2\x94\x94"));
          right_637543320.rows[chckIndx(0, 0, (right_637543320.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x90"), NTI33554439);
          HEX5BHEX5DHEX3D_637535621(right_637543320.rows, 1, makeNimstrLit("\xE2\x94\x98"));
        Temporary1 = join_671088862([nimCopy(null, left_637543307, NTI671088644), nimCopy(null, sandwich_637543306, NTI671088644), nimCopy(null, right_637543320, NTI671088644)]);
        }
        
        result_637543299 = nimCopy(result_637543299, Temporary1, NTI671088644);

      return result_637543299;

    }
    
function HEX3Aanonymous_637543367(arg_637543536) {
        var Temporary1;
          var Temporary2;

      var result_637543539 = ({rows: [], baseline: 0, width: 0, flag: 0});

        if (oneLine_637534221) {
        var fmtRes_637543544 = [mnewString(0)];
        fmtRes_637543544[0].push.apply(fmtRes_637543544[0], makeNimstrLit("\xE2\x88\x9A"));;
        formatValue_1275068578(fmtRes_637543544, 0, rowAsAtom_671088687(arg_637543536), []);
        Temporary1 = toTextRectOneLine_671088735(fmtRes_637543544[0], 0, 0);
        }
        else {
          var overbar_637543545 = toTextRectOneLine_671088735(nsuRepeatStr(makeNimstrLit("_"), arg_637543536.width), 0, 0);
          if ((height_671088690(arg_637543536) == 1)) {
          Temporary2 = {rows: [makeNimstrLit("\xE2\x88\x9A")], baseline: 0, width: 1, flag: 0};
          }
          else {
            Label3: do {
              var resultHEX60gensym175_637543560 = [];
              Label4: do {
                var xHEX60gensym175_637543561 = 0;
                var colontmp__503316527 = 0;
                colontmp__503316527 = divInt(height_671088690(arg_637543536), 2);
                var res_503316528 = colontmp__503316527;
                Label5: do {
                    Label6: while (true) {
                    if (!(1 <= res_503316528)) break Label6;
                      xHEX60gensym175_637543561 = res_503316528;
                      resultHEX60gensym175_637543560.push(xHEX60gensym175_637543561);;
                      res_503316528 = subInt(res_503316528, 1);
                    }
                } while (false);
              } while (false);
              var HEX3Atmp_637543585 = nimCopy(null, resultHEX60gensym175_637543560, NTI637541360);
              var iHEX60gensym176_637543588 = 0;
              var resultHEX60gensym176_637543595 = newSeq_671088990(chckRange((HEX3Atmp_637543585).length, 0, 2147483647));
              Label7: do {
                var it_637543599 = 0;
                var i_503316532 = 0;
                var L_503316533 = (HEX3Atmp_637543585).length;
                Label8: do {
                    Label9: while (true) {
                    if (!(i_503316532 < L_503316533)) break Label9;
                      it_637543599 = HEX3Atmp_637543585[chckIndx(i_503316532, 0, (HEX3Atmp_637543585).length - 1)];
                      resultHEX60gensym176_637543595[chckIndx(iHEX60gensym176_637543588, 0, (resultHEX60gensym176_637543595).length - 1)] = nimCopy(resultHEX60gensym176_637543595[chckIndx(iHEX60gensym176_637543588, 0, (resultHEX60gensym176_637543595).length - 1)], toTextRect_671088699(makeNimstrLit("\xE2\x95\xB2"), addInt(subInt(arg_637543536.baseline, height_671088690(arg_637543536)), it_637543599), 0), NTI671088644);
                      iHEX60gensym176_637543588 = addInt(iHEX60gensym176_637543588, 1);
                      i_503316532 = addInt(i_503316532, 1);
                      if (!(((HEX3Atmp_637543585).length == L_503316533))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            Label10: do {
              var resultHEX60gensym179_637543618 = [];
              Label11: do {
                var xHEX60gensym179_637543619 = 0;
                var colontmp__503316537 = 0;
                colontmp__503316537 = height_671088690(arg_637543536);
                var res_503316538 = 1;
                Label12: do {
                    Label13: while (true) {
                    if (!(res_503316538 <= colontmp__503316537)) break Label13;
                      xHEX60gensym179_637543619 = res_503316538;
                      resultHEX60gensym179_637543618.push(xHEX60gensym179_637543619);;
                      res_503316538 = addInt(res_503316538, 1);
                    }
                } while (false);
              } while (false);
              var HEX3Atmp_637543643 = nimCopy(null, resultHEX60gensym179_637543618, NTI637541415);
              var iHEX60gensym180_637543646 = 0;
              var resultHEX60gensym180_637543653 = newSeq_671088990(chckRange((HEX3Atmp_637543643).length, 0, 2147483647));
              Label14: do {
                var it_637543657 = 0;
                var i_503316541 = 0;
                var L_503316542 = (HEX3Atmp_637543643).length;
                Label15: do {
                    Label16: while (true) {
                    if (!(i_503316541 < L_503316542)) break Label16;
                      it_637543657 = HEX3Atmp_637543643[chckIndx(i_503316541, 0, (HEX3Atmp_637543643).length - 1)];
                      resultHEX60gensym180_637543653[chckIndx(iHEX60gensym180_637543646, 0, (resultHEX60gensym180_637543653).length - 1)] = nimCopy(resultHEX60gensym180_637543653[chckIndx(iHEX60gensym180_637543646, 0, (resultHEX60gensym180_637543653).length - 1)], toTextRect_671088699(makeNimstrLit("\xE2\x95\xB1"), addInt(subInt(arg_637543536.baseline, height_671088690(arg_637543536)), it_637543657), 0), NTI671088644);
                      iHEX60gensym180_637543646 = addInt(iHEX60gensym180_637543646, 1);
                      i_503316541 = addInt(i_503316541, 1);
                      if (!(((HEX3Atmp_637543643).length == L_503316542))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
          Temporary2 = join_671088862(HEX26_637538220(resultHEX60gensym176_637543595, resultHEX60gensym180_637543653));
          }
          
          var symbol_637543666 = nimCopy(null, Temporary2, NTI671088644);
        Temporary1 = join_671088862([nimCopy(null, symbol_637543666, NTI671088644), stack_671089574([nimCopy(null, overbar_637543545, NTI671088644), nimCopy(null, arg_637543536, NTI671088644)], addInt(arg_637543536.baseline, 1), 1)]);
        }
        
        result_637543539 = nimCopy(result_637543539, Temporary1, NTI671088644);

      return result_637543539;

    }
    
function HEX3Aanonymous_637543745(x_637543765) {
      var result_637543768 = [];

        result_637543768 = nimCopy(null, [nimCopy(null, x_637543765, NTI671088644)], NTI637536318);

      return result_637543768;

    }
    
function HEX3Aanonymous_637543808(x_637543828) {
      var result_637543831 = [];

        result_637543831 = nimCopy(null, [nimCopy(null, x_637543828, NTI671088644)], NTI637536318);

      return result_637543831;

    }
    
function HEX3Aanonymous_637543939(x_637543959) {
      var result_637543962 = [];

        result_637543962 = nimCopy(null, [nimCopy(null, x_637543959, NTI671088644)], NTI637536318);

      return result_637543962;

    }
    
function HEX3Aanonymous_637544100(things_637544119) {
      var result_637544122 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var inside_637544123 = nimCopy(null, things_637544119[chckIndx(1, 0, (things_637544119).length - 1)], NTI671088644);
        var left_637544124 = nimCopy(null, things_637544119[chckIndx(0, 0, (things_637544119).length - 1)], NTI671088644);
        var right_637544125 = nimCopy(null, things_637544119[chckIndx(2, 0, (things_637544119).length - 1)], NTI671088644);
        if ((1 < height_671088690(inside_637544123))) {
        left_637544124 = nimCopy(left_637544124, bigDelimiter_637534223(row_671088684(left_637544124), height_671088690(inside_637544123), chckRange(inside_637544123.baseline, 0, 2147483647)), NTI671088644);
        right_637544125 = nimCopy(right_637544125, bigDelimiter_637534223(row_671088684(right_637544125), height_671088690(inside_637544123), chckRange(inside_637544123.baseline, 0, 2147483647)), NTI671088644);
        }
        
        result_637544122 = nimCopy(result_637544122, join_671088862([nimCopy(null, left_637544124, NTI671088644), nimCopy(null, inside_637544123, NTI671088644), nimCopy(null, right_637544125, NTI671088644)]), NTI671088644);

      return result_637544122;

    }
    
function HEX3Aanonymous_637544861(sup_637544877) {
      var result_637544880 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_637544880 = nimCopy(result_637544880, withFlag_671089660(sup_637544877, 7), NTI671088644);

      return result_637544880;

    }
    
function HEX3Aanonymous_637545089(x_637545109) {
      var result_637545112 = [];

        result_637545112 = nimCopy(null, [nimCopy(null, x_637545109, NTI637538648)], NTI637539203);

      return result_637545112;

    }
    
function HEX3Aanonymous_637544970(x_637544990) {
      var result_637544993 = [];

        result_637544993 = nimCopy(null, [x_637544990], NTI637538761);

      return result_637544993;

    }
    
function HEX3Aanonymous_637545187(x_637545222) {
      var result_637545225 = [];

        var resultHEX60gensym211_637545234 = newSeq_637541234(0);
        Label1: do {
          var xHEX60gensym211_637545238 = [];
          var i_503316909 = 0;
          var L_503316910 = (x_637545222).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_503316909 < L_503316910)) break Label3;
                xHEX60gensym211_637545238 = x_637545222[chckIndx(i_503316909, 0, (x_637545222).length - 1)];
                var a_637545239 = nimCopy(null, resultHEX60gensym211_637545234, NTI637539612);
                var b_637545240 = nimCopy(null, xHEX60gensym211_637545238, NTI637538610);
                resultHEX60gensym211_637545234 = nimCopy(null, HEX26_637541269(a_637545239, b_637545240), NTI637539635);
                i_503316909 = addInt(i_503316909, 1);
                if (!(((x_637545222).length == L_503316910))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_637545225 = nimCopy(null, resultHEX60gensym211_637545234, NTI637539612);

      return result_637545225;

    }
    
function HEX3Aanonymous_637545268(primes_637545287) {
      var result_637545290 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_637545290 = nimCopy(result_637545290, withFlag_671089660(toTextRectOneLine_671088735(nsuRepeatStr(makeNimstrLit("\xE2\x80\xB2"), chckRange((primes_637545287).length, 0, 2147483647)), 0, 0), 7), NTI671088644);

      return result_637545290;

    }
    
function HEX3Aanonymous_637545386(sub_637545402) {
      var result_637545405 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_637545405 = nimCopy(result_637545405, withFlag_671089660(sub_637545402, 6), NTI671088644);

      return result_637545405;

    }
    
function HEX3Aanonymous_637545863(x_637545883) {
      var result_637545886 = [];

        result_637545886 = nimCopy(null, [nimCopy(null, x_637545883, NTI671088644)], NTI637536318);

      return result_637545886;

    }
    
function HEX3Aanonymous_637545507(x_637545527) {
      var result_637545530 = [];

        result_637545530 = nimCopy(null, [nimCopy(null, x_637545527, NTI671088644)], NTI637536318);

      return result_637545530;

    }
    
function HEX3Aanonymous_637545570(x_637545590) {
      var result_637545593 = [];

        result_637545593 = nimCopy(null, [nimCopy(null, x_637545590, NTI671088644)], NTI637536318);

      return result_637545593;

    }
    
function HEX3Aanonymous_637545687(x_637545707) {
      var result_637545710 = [];

        result_637545710 = nimCopy(null, [nimCopy(null, x_637545707, NTI671088644)], NTI637536318);

      return result_637545710;

    }
    
function HEX3Aanonymous_637545750(x_637545770) {
      var result_637545773 = [];

        result_637545773 = nimCopy(null, [nimCopy(null, x_637545770, NTI671088644)], NTI637536318);

      return result_637545773;

    }

function translateIfPossible_637544513(str_637544514, table_637544517) {
  var result_637544523 = ({val: [], has: false});

  BeforeRet: do {
    var resultHEX60gensym194_637544533 = [];
    Label1: do {
      var xHEX60gensym194_637544534 = 0;
      var i_503316916 = 0;
      var result_503316917 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316916 < (str_637544514).length)) break Label3;
            if ((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] <= 127)) {
            result_503316917 = chckRange(str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)], -2147483648, 2147483647);
            i_503316916 = addInt(i_503316916, 1);
            }
            else {
            if (((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] >>> 5) == 6)) {
            if ((i_503316916 <= subInt((str_637544514).length, 2))) {
            result_503316917 = chckRange((((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] & 31) << 6) | (str_637544514[chckIndx(addInt(i_503316916, 1), 0, (str_637544514).length - 1)] & 63)), -2147483648, 2147483647);
            i_503316916 = addInt(i_503316916, 2);
            }
            else {
              result_503316917 = 65533;
              i_503316916 = addInt(i_503316916, 1);
            }
            
            }
            else {
            if (((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] >>> 4) == 14)) {
            if ((i_503316916 <= subInt((str_637544514).length, 3))) {
            result_503316917 = chckRange(((((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] & 15) << 12) | ((str_637544514[chckIndx(addInt(i_503316916, 1), 0, (str_637544514).length - 1)] & 63) << 6)) | (str_637544514[chckIndx(addInt(i_503316916, 2), 0, (str_637544514).length - 1)] & 63)), -2147483648, 2147483647);
            i_503316916 = addInt(i_503316916, 3);
            }
            else {
              result_503316917 = 65533;
              i_503316916 = addInt(i_503316916, 1);
            }
            
            }
            else {
            if (((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] >>> 3) == 30)) {
            if ((i_503316916 <= subInt((str_637544514).length, 4))) {
            result_503316917 = chckRange((((((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] & 7) << 18) | ((str_637544514[chckIndx(addInt(i_503316916, 1), 0, (str_637544514).length - 1)] & 63) << 12)) | ((str_637544514[chckIndx(addInt(i_503316916, 2), 0, (str_637544514).length - 1)] & 63) << 6)) | (str_637544514[chckIndx(addInt(i_503316916, 3), 0, (str_637544514).length - 1)] & 63)), -2147483648, 2147483647);
            i_503316916 = addInt(i_503316916, 4);
            }
            else {
              result_503316917 = 65533;
              i_503316916 = addInt(i_503316916, 1);
            }
            
            }
            else {
            if (((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] >>> 2) == 62)) {
            if ((i_503316916 <= subInt((str_637544514).length, 5))) {
            result_503316917 = chckRange(((((((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] & 3) << 24) | ((str_637544514[chckIndx(addInt(i_503316916, 1), 0, (str_637544514).length - 1)] & 63) << 18)) | ((str_637544514[chckIndx(addInt(i_503316916, 2), 0, (str_637544514).length - 1)] & 63) << 12)) | ((str_637544514[chckIndx(addInt(i_503316916, 3), 0, (str_637544514).length - 1)] & 63) << 6)) | (str_637544514[chckIndx(addInt(i_503316916, 4), 0, (str_637544514).length - 1)] & 63)), -2147483648, 2147483647);
            i_503316916 = addInt(i_503316916, 5);
            }
            else {
              result_503316917 = 65533;
              i_503316916 = addInt(i_503316916, 1);
            }
            
            }
            else {
            if (((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] >>> 1) == 126)) {
            if ((i_503316916 <= subInt((str_637544514).length, 6))) {
            result_503316917 = chckRange((((((((str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)] & 1) << 30) | ((str_637544514[chckIndx(addInt(i_503316916, 1), 0, (str_637544514).length - 1)] & 63) << 24)) | ((str_637544514[chckIndx(addInt(i_503316916, 2), 0, (str_637544514).length - 1)] & 63) << 18)) | ((str_637544514[chckIndx(addInt(i_503316916, 3), 0, (str_637544514).length - 1)] & 63) << 12)) | ((str_637544514[chckIndx(addInt(i_503316916, 4), 0, (str_637544514).length - 1)] & 63) << 6)) | (str_637544514[chckIndx(addInt(i_503316916, 5), 0, (str_637544514).length - 1)] & 63)), -2147483648, 2147483647);
            i_503316916 = addInt(i_503316916, 6);
            }
            else {
              result_503316917 = 65533;
              i_503316916 = addInt(i_503316916, 1);
            }
            
            }
            else {
              result_503316917 = chckRange(str_637544514[chckIndx(i_503316916, 0, (str_637544514).length - 1)], -2147483648, 2147483647);
              i_503316916 = addInt(i_503316916, 1);
            }
            }}}}}
            xHEX60gensym194_637544534 = result_503316917;
            resultHEX60gensym194_637544533.push(xHEX60gensym194_637544534);;
          }
      } while (false);
    } while (false);
    var runes_637544539 = nimCopy(null, resultHEX60gensym194_637544533, NTI637542105);
      var resultHEX60gensym195_637544541 = true;
      Label4: do {
        var it_637544545 = 0;
        var i_503316921 = 0;
        var L_503316922 = (runes_637544539).length;
        Label5: do {
            Label6: while (true) {
            if (!(i_503316921 < L_503316922)) break Label6;
              it_637544545 = runes_637544539[chckIndx(i_503316921, 0, (runes_637544539).length - 1)];
              if (!(contains_637544588(table_637544517, it_637544545))) {
              resultHEX60gensym195_637544541 = false;
              break Label4;
              }
              
              i_503316921 = addInt(i_503316921, 1);
              if (!(((runes_637544539).length == L_503316922))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    if (resultHEX60gensym195_637544541) {
    Label7: do {
      var iHEX60gensym197_637544752 = 0;
      var resultHEX60gensym197_637544759 = newSeq_452985301(chckRange((runes_637544539).length, 0, 2147483647));
      Label8: do {
        var it_637544763 = 0;
        var i_503316926 = 0;
        var L_503316927 = (runes_637544539).length;
        Label9: do {
            Label10: while (true) {
            if (!(i_503316926 < L_503316927)) break Label10;
              it_637544763 = runes_637544539[chckIndx(i_503316926, 0, (runes_637544539).length - 1)];
              resultHEX60gensym197_637544759[chckIndx(iHEX60gensym197_637544752, 0, (resultHEX60gensym197_637544759).length - 1)] = nimCopy(null, HEX5BHEX5D_637544673(table_637544517, it_637544763), NTI33554439);
              iHEX60gensym197_637544752 = addInt(iHEX60gensym197_637544752, 1);
              i_503316926 = addInt(i_503316926, 1);
              if (!(((runes_637544539).length == L_503316927))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_637544523 = nimCopy(result_637544523, some_637544826(nsuJoinSep(resultHEX60gensym197_637544759, [])), NTI637542095);
    break BeforeRet;
    }
    
  } while (false);

  return result_637544523;

}
    
function HEX3Aanonymous_637545949(operands_637546035) {
        var Temporary1;
          var Temporary2;
          var Temporary3;

      var result_637546038 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var base_637546039 = nimCopy(null, operands_637546035[chckIndx(0, 0, (operands_637546035).length - 1)], NTI671088644);
        var flag_637546040 = base_637546039.flag;
        base_637546039.flag = 0;
        switch ((operands_637546035).length) {
        case 1:
          Temporary1 = base_637546039;
          break;
        case 3:
          if ((operands_637546035[chckIndx(1, 0, (operands_637546035).length - 1)].flag == 7)) {
          Temporary2 = {Field0: nimCopy(null, operands_637546035[chckIndx(1, 0, (operands_637546035).length - 1)], NTI671088644), Field1: nimCopy(null, operands_637546035[chckIndx(2, 0, (operands_637546035).length - 1)], NTI671088644)};
          }
          else {
          Temporary2 = {Field0: nimCopy(null, operands_637546035[chckIndx(2, 0, (operands_637546035).length - 1)], NTI671088644), Field1: nimCopy(null, operands_637546035[chckIndx(1, 0, (operands_637546035).length - 1)], NTI671088644)};
          }
          
          var colontmp__503316913 = nimCopy(null, Temporary2, NTI637543334);
          var sup_637546048 = nimCopy(null, colontmp__503316913["Field0"], NTI671088644);
          var sub_637546049 = nimCopy(null, colontmp__503316913["Field1"], NTI671088644);
          if (oneLine_637534221) {
          var str_637546050 = row_671088684(base_637546039);
          if (!(isEmpty_671088696(sub_637546049))) {
          str_637546050.push.apply(str_637546050, get_637545980(translateIfPossible_637544513(row_671088684(sub_637546049), subscripts_654313146), (makeNimstrLit("_") || []).concat(rowAsAtom_671088687(sub_637546049) || [])));;
          }
          
          if (!(isEmpty_671088696(sup_637546048))) {
          str_637546050.push.apply(str_637546050, get_637545980(translateIfPossible_637544513(row_671088684(sup_637546048), superscripts_654313141), (makeNimstrLit("^") || []).concat(rowAsAtom_671088687(sup_637546048) || [])));;
          }
          
          Temporary3 = toTextRectOneLine_671088735(str_637546050, 0, 0);
          }
          else {
          if ((ConstSet142[flag_637546040] != undefined)) {
          Temporary3 = stack_671089574([nimCopy(null, sup_637546048, NTI671088644), nimCopy(null, base_637546039, NTI671088644), nimCopy(null, sub_637546049, NTI671088644)], addInt(base_637546039.baseline, height_671088690(sup_637546048)), 0);
          }
          else {
          Temporary3 = HEX26_671089512(base_637546039, stack_671089574([extendDown_671088795(sup_637546048, height_671088690(base_637546039)), nimCopy(null, sub_637546049, NTI671088644)], addInt(base_637546039.baseline, height_671088690(sup_637546048)), 1));
          }
          }
          Temporary1 = Temporary3;
          break;
        default: 
          Temporary1 = ({rows: [], baseline: 0, width: 0, flag: 0});
          break;
        }
        result_637546038 = nimCopy(result_637546038, withFlag_671089660(Temporary1, flag_637546040), NTI671088644);

      return result_637546038;

    }
    var Temporary13;
    var Temporary14;
      var Temporary15;

  var result_637534222 = [];

    var ws_637537038 = map_637536981(HEX26_637536738(map_637536493(HEX2A_637535831(whitespace_1207960647, HEX2EHEX2E_989856595(0, 2147483647).a), HEX3Aanonymous_637536673), HEX2A_637536317(HEX7C_637536215(map_637535975(whitespace_1207960647, HEX3Aanonymous_637536161), nop_637535839()), subInt(HEX2EHEX2E_989856595(0, 2147483647).b, HEX2EHEX2E_989856595(0, 2147483647).a))), HEX3Aanonymous_637536888);
    var atom_637537049 = {body: null};
    var expr_637538491 = map_637538398(map_637538304(HEX26_637538031(map_637537786(HEX2A_637537094(atom_637537049, HEX2EHEX2E_989856595(0, 2147483647).a), HEX3Aanonymous_637537966), HEX2A_637537610(HEX7C_637537508(map_637537256(atom_637537049, HEX3Aanonymous_637537454), nop_637537102()), subInt(HEX2EHEX2E_989856595(0, 2147483647).b, HEX2EHEX2E_989856595(0, 2147483647).a))), HEX3Aanonymous_637538181), HEX3Aanonymous_637538369);
    var alpha_637538514 = HEX7C_1207960666(c_1207959991(HEX2EHEX2E_654311635(65, 90)), c_1207959991(HEX2EHEX2E_654311635(97, 122)));
    var digit_637538622 = map_637538565(c_1207959991(HEX2EHEX2E_654311635(48, 57)), HEX3Aanonymous_637538528);
    var sHEX60gensym88_637539623 = map_637539588(fontsByName_654311540, HEX3Aanonymous_637538698);
    if (!((0 < (sHEX60gensym88_637539623).length))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(895, 10) `s`gensym88.len > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym88_637539633 = null;
    resultHEX60gensym88_637539633 = sHEX60gensym88_637539623[chckIndx(0, 0, (sHEX60gensym88_637539623).length - 1)];
    Label1: do {
      var iHEX60gensym88_637539641 = 0;
      var colontmp__503316505 = 0;
      colontmp__503316505 = (sHEX60gensym88_637539623).length;
      var i_503316506 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(i_503316506 < colontmp__503316505)) break Label3;
            iHEX60gensym88_637539641 = i_503316506;
            var a_637539642 = resultHEX60gensym88_637539633;
            var b_637539643 = sHEX60gensym88_637539623[chckIndx(iHEX60gensym88_637539641, 0, (sHEX60gensym88_637539623).length - 1)];
            resultHEX60gensym88_637539633 = HEX7C_637539652(a_637539642, b_637539643);
            i_503316506 = addInt(i_503316506, 1);
          }
      } while (false);
    } while (false);
    var latinLetter_637539730 = HEX7C_637539652(map_637538565(alpha_637538514, HEX3Aanonymous_637538631), resultHEX60gensym88_637539633);
    var sHEX60gensym98_637540065 = map_637540039(delimiters_654311539, HEX3Aanonymous_637539731);
    var nHEX60gensym98_637540069 = (sHEX60gensym98_637540065).length;
    if (!((0 < nHEX60gensym98_637540069))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym98 > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym98_637540075 = sHEX60gensym98_637540065[chckIndx(subInt(nHEX60gensym98_637540069, 1), 0, (sHEX60gensym98_637540065).length - 1)];
    Label4: do {
      var iHEX60gensym98_637540081 = 0;
      var colontmp__503316509 = 0;
      colontmp__503316509 = subInt(nHEX60gensym98_637540069, 2);
      var res_503316511 = colontmp__503316509;
      Label5: do {
          Label6: while (true) {
          if (!(0 <= res_503316511)) break Label6;
            iHEX60gensym98_637540081 = res_503316511;
            var a_637540082 = sHEX60gensym98_637540065[chckIndx(iHEX60gensym98_637540081, 0, (sHEX60gensym98_637540065).length - 1)];
            var b_637540083 = resultHEX60gensym98_637540075;
            resultHEX60gensym98_637540075 = HEX7C_637539652(a_637540082, b_637540083);
            res_503316511 = subInt(res_503316511, 1);
          }
      } while (false);
    } while (false);
    var delimiter_637540096 = resultHEX60gensym98_637540075;
    var command_637541968 = map_637539927(validate_637541689(map_637541555(HEX3EHEX3E_637541419(c_1207959785(92), map_637541354(HEX26_637541075(map_637540830(HEX2A_637540137(letter_1207960740, HEX2EHEX2E_989856595(1, 2147483647).a), HEX3Aanonymous_637541010), HEX2A_637540654(HEX7C_637540552(map_637540316(letter_1207960740, HEX3Aanonymous_637540490), nop_637540145()), subInt(HEX2EHEX2E_989856595(1, 2147483647).b, HEX2EHEX2E_989856595(1, 2147483647).a))), HEX3Aanonymous_637541225)), HEX3Aanonymous_637541502), HEX3Aanonymous_637541620, makeNimstrLit("a command")), HEX3Aanonymous_637541752);
    var sHEX60gensym131_637542034 = map_637540039(nonCommands_654314678, HEX3Aanonymous_637541969);
    var nHEX60gensym131_637542038 = (sHEX60gensym131_637542034).length;
    if (!((0 < nHEX60gensym131_637542038))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym131 > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym131_637542044 = sHEX60gensym131_637542034[chckIndx(subInt(nHEX60gensym131_637542038, 1), 0, (sHEX60gensym131_637542034).length - 1)];
    Label7: do {
      var iHEX60gensym131_637542050 = 0;
      var colontmp__503316514 = 0;
      colontmp__503316514 = subInt(nHEX60gensym131_637542038, 2);
      var res_503316515 = colontmp__503316514;
      Label8: do {
          Label9: while (true) {
          if (!(0 <= res_503316515)) break Label9;
            iHEX60gensym131_637542050 = res_503316515;
            var a_637542051 = sHEX60gensym131_637542034[chckIndx(iHEX60gensym131_637542050, 0, (sHEX60gensym131_637542034).length - 1)];
            var b_637542052 = resultHEX60gensym131_637542044;
            resultHEX60gensym131_637542044 = HEX7C_637539652(a_637542051, b_637542052);
            res_503316515 = subInt(res_503316515, 1);
          }
      } while (false);
    } while (false);
    var nonCommand_637542065 = resultHEX60gensym131_637542044;
    var sHEX60gensym140_637542430 = map_637542403(simpleDiacritics_654311767, HEX3Aanonymous_637542082);
    var nHEX60gensym140_637542434 = (sHEX60gensym140_637542430).length;
    if (!((0 < nHEX60gensym140_637542434))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym140 > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym140_637542440 = sHEX60gensym140_637542430[chckIndx(subInt(nHEX60gensym140_637542434, 1), 0, (sHEX60gensym140_637542430).length - 1)];
    Label10: do {
      var iHEX60gensym140_637542446 = 0;
      var colontmp__503316518 = 0;
      colontmp__503316518 = subInt(nHEX60gensym140_637542434, 2);
      var res_503316519 = colontmp__503316518;
      Label11: do {
          Label12: while (true) {
          if (!(0 <= res_503316519)) break Label12;
            iHEX60gensym140_637542446 = res_503316519;
            var a_637542447 = sHEX60gensym140_637542430[chckIndx(iHEX60gensym140_637542446, 0, (sHEX60gensym140_637542430).length - 1)];
            var b_637542448 = resultHEX60gensym140_637542440;
            resultHEX60gensym140_637542440 = HEX7C_637539652(a_637542447, b_637542448);
            res_503316519 = subInt(res_503316519, 1);
          }
      } while (false);
    } while (false);
    var simpleDiacritic_637542461 = resultHEX60gensym140_637542440;
    var frac_637542977 = HEX3EHEX3E_637542902(HEX7C_637542470(HEX7C_637542470(HEX7C_637542470(s_1207959663(makeNimstrLit("\\frac")), s_1207959663(makeNimstrLit("\\tfrac"))), s_1207959663(makeNimstrLit("\\dfrac"))), s_1207959663(makeNimstrLit("\\cfrac"))), map_637538398(HEX26_637542712(map_637537256(atom_637537049, HEX3Aanonymous_637542592), map_637537256(atom_637537049, HEX3Aanonymous_637542655)), HEX3Aanonymous_637542807));
    var binom_637543241 = HEX3EHEX3E_637542902(HEX7C_637542470(HEX7C_637542470(HEX7C_637542470(s_1207959663(makeNimstrLit("\\binom")), s_1207959663(makeNimstrLit("\\tbinom"))), s_1207959663(makeNimstrLit("\\dbinom"))), s_1207959663(makeNimstrLit("\\cbinom"))), map_637538398(HEX26_637542712(map_637537256(atom_637537049, HEX3Aanonymous_637543038), map_637537256(atom_637537049, HEX3Aanonymous_637543101)), HEX3Aanonymous_637543179));
    var boxed_637543358 = HEX3EHEX3E_637542902(s_1207959663(makeNimstrLit("\\boxed")), map_637542337(atom_637537049, HEX3Aanonymous_637543250));
    var sqrt_637543694 = HEX3EHEX3E_637542902(s_1207959663(makeNimstrLit("\\sqrt")), map_637542337(atom_637537049, HEX3Aanonymous_637543367));
    var leftright_637544141 = map_637538398(HEX3EHEX3E_637544017(HEX3EHEX3E_637538715(s_1207959663(makeNimstrLit("\\left")), ws_637537038), HEX26_637542712(HEX26_637542712(map_637537256(delimiter_637540096, HEX3Aanonymous_637543745), map_637537256(HEX3EHEX3E_637542206(ws_637537038, expr_637538491), HEX3Aanonymous_637543808)), map_637537256(HEX3EHEX3E_637542206(HEX3EHEX3E_637538715(s_1207959663(makeNimstrLit("\\right")), ws_637537038), delimiter_637540096), HEX3Aanonymous_637543939))), HEX3Aanonymous_637544100);
    var bracedExpr_637544308 = HEX3CHEX3C_637544233(HEX3EHEX3E_637544150(c_1207959785(123), expr_637538491), c_1207959785(125));
    var atom1_637544512 = HEX3CHEX3C_637544437(HEX7C_637539652(HEX7C_637539652(HEX7C_637539652(HEX7C_637539652(HEX7C_637539652(HEX7C_637539652(HEX7C_637539652(HEX7C_637539652(HEX7C_637539652(HEX7C_637539652(bracedExpr_637544308, leftright_637544141), digit_637538622), latinLetter_637539730), command_637541968), nonCommand_637542065), simpleDiacritic_637542461), frac_637542977), binom_637543241), sqrt_637543694), boxed_637543358), ws_637537038);
    var superscript_637545364 = HEX7C_637539652(map_637542337(HEX3EHEX3E_637544150(c_1207959785(94), atom1_637544512), HEX3Aanonymous_637544861), map_637545303(map_637541354(HEX26_637541075(map_637540830(HEX2A_637540137(c_1207959785(39), HEX2EHEX2E_989856595(1, 2147483647).a), HEX3Aanonymous_637545089), HEX2A_637540654(HEX7C_637540552(map_637540316(c_1207959785(39), HEX3Aanonymous_637544970), nop_637540145()), subInt(HEX2EHEX2E_989856595(1, 2147483647).b, HEX2EHEX2E_989856595(1, 2147483647).a))), HEX3Aanonymous_637545187), HEX3Aanonymous_637545268));
    var subscript_637545421 = map_637542337(HEX3EHEX3E_637544150(c_1207959785(95), atom1_637544512), HEX3Aanonymous_637545386);
    atom_637537049.body = map_637538398(HEX26_637542712(map_637537256(atom1_637544512, HEX3Aanonymous_637545863), HEX7C_637537508(HEX7C_637537508(HEX26_637542712(map_637537256(superscript_637545364, HEX3Aanonymous_637545507), map_637537256(HEX7C_637539652(subscript_637545421, nop_637545431()), HEX3Aanonymous_637545570)), HEX26_637542712(map_637537256(subscript_637545421, HEX3Aanonymous_637545687), map_637537256(HEX7C_637539652(superscript_637545364, nop_637545431()), HEX3Aanonymous_637545750))), nop_637537102())), HEX3Aanonymous_637545949).body;
    var completeExpr_637546189 = HEX3CHEX3C_637546114(expr_637538491, eof_1207960645);
    var parsed_637546202 = parse_637537302(completeExpr_637546189, latex_637534220);
    if ((parsed_637546202.kind == 0)) {
    var Temporary14 = parsed_637546202;
    if (ConstSet146[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI1207959573)); }
    Temporary13 = HEX24_671088672(Temporary14.value);
    }
    else {
      var colontmp__503316932 = lineInfo_637546207(parsed_637546202);
      var lnNum_637546236 = colontmp__503316932["Field0"];
      var colNum_637546237 = colontmp__503316932["Field1"];
      var showing_637546238 = (makeNimstrLit("    ") || []).concat((Temporary15 = nsuSplitLines(latex_637534220, false), Temporary15)[chckIndx(subInt(lnNum_637546236, 1), 0, (Temporary15).length - 1)] || [],makeNimstrLit("\x0A") || [],nsuRepeatChar(32, chckRange(addInt(colNum_637546237, 3), 0, 2147483647)) || [],makeNimstrLit("^") || []);
      var fmtRes_637546239 = [mnewString(0)];
      fmtRes_637546239[0].push.apply(fmtRes_637546239[0], makeNimstrLit("Parse error at line "));;
      formatValue_637546240(fmtRes_637546239, 0, lnNum_637546236, []);
      fmtRes_637546239[0].push.apply(fmtRes_637546239[0], makeNimstrLit(", column "));;
      formatValue_637546240(fmtRes_637546239, 0, colNum_637546237, []);
      fmtRes_637546239[0].push.apply(fmtRes_637546239[0], makeNimstrLit("\x0A"));;
      formatValue_1275068578(fmtRes_637546239, 0, showing_637546238, []);
      raiseException({message: nimCopy(null, fmtRes_637546239[0], NTI33554439), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_637534222 = nimCopy(null, Temporary13, NTI33554439);

  return result_637534222;

}

function matext(latex_503316484, opts_503316485) {
  var result_503316486 = null;

    var opts_503316487 = opts_503316485;
    if ((opts_503316487 == undefined)) {
    opts_503316487 = {};
    }
    
    result_503316486 = toJSStr(render_637534219(cstrToNimstr(latex_503316484), (opts_503316487.oneLine)));

  return result_503316486;

}
export default matext;
