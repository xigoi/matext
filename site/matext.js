/* Generated by the Nim Compiler v1.6.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI620764823 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620764784 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620764288 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620764072 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763499 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763753 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763747 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763595 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763562 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763141 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763343 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763337 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763297 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763254 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763185 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763152 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763707 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763664 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763945 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763939 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763549 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763555 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620764143 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620764049 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763103 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763109 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620764210 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620763034 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762822 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762883 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620762736 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761708 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI738197511 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI620762413 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI385876137 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI620762358 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI620756998 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620761738 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761732 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761847 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI620761345 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761411 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620761490 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534910 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI637534909 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620758124 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757880 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757925 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758015 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757833 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620758196 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519298 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519206 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760573 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760695 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760634 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760761 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760822 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534211 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI637534600 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620761276 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI704643434 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI704643446 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760493 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760276 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759706 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759960 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759954 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759802 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759769 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759343 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759550 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759544 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759493 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759450 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759381 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759354 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759914 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759871 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760152 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620760146 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759756 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759762 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620760347 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866058 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759294 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759300 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620760412 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757844 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI687865859 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33555088 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555081 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI687865863 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687865860 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI687865915 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758642 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758896 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758890 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758738 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758705 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758302 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758486 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758480 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758440 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519234 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758340 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758313 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758850 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758807 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759088 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620759082 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758692 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758698 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620759262 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758253 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620758259 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI452985127 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI637534749 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519451 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555129 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1090520179 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI654313427 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1090519046 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519514 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654321353 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654321832 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1090520117 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI1090519270 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090520083 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519075 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1090519061 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1090519172 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1090519061 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1090519061, name: "success", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1090519061, name: "failure", len: 0, sons: null}}};
NTI1090519061.node = NNI1090519061;
NTI1090519075.base = NTI33554439;
var NNI1090519172 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI33554439, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1090519172.node = NNI1090519172;
NTI1090520083.base = NTI33554439;
var NNI1090519270 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI33554438, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI1090519270.node = NNI1090519270;
NTI1090520117.base = NTI33554439;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI654321832 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI654321353, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI654321832.node = NNI654321832;
NTI1090519514.base = NTI33554439;
var NNI1090519046 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554456, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554456, name: "Field1", sons: null}]};
NTI1090519046.node = NNI1090519046;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI654313427 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI654313427.node = NNI654313427;
NTI1090520179.base = NTI33554439;
var NNI33555129 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555129.node = NNI33555129;
NTI33555129.base = NTI33555113;
NTI1090519451.base = NTI33554439;
var NNI637534749 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554438, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554438, name: "b", sons: null}]};
NTI637534749.node = NNI637534749;
NTI452985127.base = NTI33554439;
NTI620758253.base = NTI33554439;
var NNI620758259 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620758253, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620758259.node = NNI620758259;
NTI620759262.base = NTI33554439;
NTI620758692.base = NTI620758253;
var NNI620758698 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620758692, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620758698.node = NNI620758698;
NTI620759082.base = NTI620758253;
NTI620759088.base = NTI33554439;
NTI620758807.base = NTI620758253;
NTI620758850.base = NTI33554439;
NTI620758313.base = NTI33554439;
NTI620758340.base = NTI33554439;
NTI1090519234.base = NTI33554439;
NTI620758440.base = NTI33554439;
NTI620758480.base = NTI33554439;
NTI620758486.base = NTI33554439;
NTI620758302.base = NTI33554439;
NTI620758705.base = NTI620758253;
NTI620758738.base = NTI33554439;
NTI620758890.base = NTI620758253;
NTI620758896.base = NTI33554439;
NTI620758642.base = NTI33554439;
NTI687865915.base = NTI33554439;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
NTI687865863.base = NTI33554439;
NTI33555081.base = NTI33555088;
var NNI687865859 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI687865859, name: "trfNone", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI687865859, name: "trfAlnum", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI687865859, name: "trfOperator", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI687865859, name: "trfBigOperator", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI687865859, name: "trfWord", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI687865859, name: "trfFraction", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI687865859, name: "trfSub", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI687865859, name: "trfSup", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI687865859, name: "trfPunctuation", len: 0, sons: null}}};
NTI687865859.node = NNI687865859;
var NNI687865860 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "rows", len: 0, typ: NTI687865863, name: "rows", sons: null}, 
{kind: 1, offset: "baseline", len: 0, typ: NTI33554456, name: "baseline", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI33555081, name: "width", sons: null}, 
{kind: 1, offset: "flag", len: 0, typ: NTI687865859, name: "flag", sons: null}]};
NTI687865860.node = NNI687865860;
var NNI620757844 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI687865860, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620757844.node = NNI620757844;
NTI620760412.base = NTI33554439;
NTI620759294.base = NTI687865860;
var NNI620759300 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620759294, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620759300.node = NNI620759300;
NTI687866058.base = NTI687865860;
NTI620760347.base = NTI33554439;
NTI620759756.base = NTI620759294;
var NNI620759762 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620759756, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620759762.node = NNI620759762;
NTI620760146.base = NTI620759294;
NTI620760152.base = NTI33554439;
NTI620759871.base = NTI620759294;
NTI620759914.base = NTI33554439;
NTI620759354.base = NTI687865860;
NTI620759381.base = NTI33554439;
NTI620759450.base = NTI687865860;
NTI620759493.base = NTI33554439;
NTI620759544.base = NTI687865860;
NTI620759550.base = NTI33554439;
NTI620759343.base = NTI687865860;
NTI620759769.base = NTI620759294;
NTI620759802.base = NTI33554439;
NTI620759954.base = NTI620759294;
NTI620759960.base = NTI33554439;
NTI620759706.base = NTI33554439;
NTI620760276.base = NTI687865860;
NTI620760493.base = NTI33554439;
NTI704643446.base = NTI33554439;
NTI704643434.base = NTI33554439;
NTI620761276.base = NTI33554439;
var NNI637534211 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI637534211, name: "fItalic", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI637534211, name: "fBold", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI637534211, name: "fScript", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI637534211, name: "fFraktur", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI637534211, name: "fDoubleStruck", len: 0, sons: null}}};
NTI637534211.node = NNI637534211;
var NNI637534600 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI637534211, name: "Field1", sons: null}]};
NTI637534600.node = NNI637534600;
NTI620760822.base = NTI33554439;
NTI620760761.base = NTI33554439;
NTI620760634.base = NTI33554439;
NTI620760695.base = NTI33554439;
NTI620760573.base = NTI33554439;
NTI1090519206.base = NTI33554439;
NTI1090519298.base = NTI33554439;
NTI620758196.base = NTI33554439;
var NNI620757833 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI620757833.node = NNI620757833;
NTI620758015.base = NTI33554439;
NTI620757925.base = NTI33554439;
NTI620757880.base = NTI33554439;
NTI620758124.base = NTI33554439;
var NNI637534910 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}]};
NTI637534910.node = NNI637534910;
var NNI637534909 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI637534910, name: "Field1", sons: null}]};
NTI637534909.node = NNI637534909;
NTI620761490.base = NTI33554439;
NTI620761411.base = NTI33554439;
NTI620761345.base = NTI33554439;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
NTI620761847.base = NTI33554439;
NTI620761732.base = NTI687865860;
NTI620761738.base = NTI33554439;
var NNI620756998 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554439, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554439, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554439, name: "Field2", sons: null}]};
NTI620756998.node = NNI620756998;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
NTI33555126.base = NTI33555125;
NTI620762358.base = NTI385876137;
NTI620762413.base = NTI738197511;
NTI620761708.base = NTI687865860;
NTI620762736.base = NTI33554439;
NTI620762883.base = NTI33554439;
NTI620762822.base = NTI33554439;
NTI620763034.base = NTI33554439;
NTI620764210.base = NTI33554439;
NTI620763103.base = NTI33554438;
var NNI620763109 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620763103, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620763109.node = NNI620763109;
NTI620764049.base = NTI33554438;
NTI620764143.base = NTI33554439;
NTI620763549.base = NTI620763103;
var NNI620763555 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "kind", len: 2, typ: NTI1090519061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "value", len: 0, typ: NTI620763549, name: "value", sons: null}], 
[setConstr(1), {kind: 1, offset: "expected", len: 0, typ: NTI1090519075, name: "expected", sons: null}]]}, 
{kind: 1, offset: "tail", len: 0, typ: NTI33554439, name: "tail", sons: null}, 
{kind: 1, offset: "fromInput", len: 0, typ: NTI33554439, name: "fromInput", sons: null}]};
NTI620763555.node = NNI620763555;
NTI620763939.base = NTI620763103;
NTI620763945.base = NTI33554439;
NTI620763664.base = NTI620763103;
NTI620763707.base = NTI33554439;
NTI620763152.base = NTI33554438;
NTI620763185.base = NTI33554439;
NTI620763254.base = NTI33554438;
NTI620763297.base = NTI33554439;
NTI620763337.base = NTI33554438;
NTI620763343.base = NTI33554439;
NTI620763141.base = NTI33554438;
NTI620763562.base = NTI620763103;
NTI620763595.base = NTI33554439;
NTI620763747.base = NTI620763103;
NTI620763753.base = NTI33554439;
NTI620763499.base = NTI33554439;
NTI620764072.base = NTI33554438;
NTI620764288.base = NTI33554439;
var NNI620764784 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI687865860, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI687865860, name: "Field1", sons: null}]};
NTI620764784.node = NNI620764784;
NTI620764823.base = NTI33554439;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

    switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557132(ti_33557143))) {
      result_33557152 = src_33557142;
      }
      else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }
      
      break;
    case 19:
            if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      }
      else {
        for (var key in dest_33557141) { delete dest_33557141[key]; }
      }
      for (var key in src_33557142) { dest_33557141[key] = src_33557142[key]; }
      result_33557152 = dest_33557141;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557143.base == null))) {
      result_33557152 = nimCopy(dest_33557141, src_33557142, ti_33557143.base);
      }
      else {
      if ((ti_33557143.kind == 17)) {
      result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {m_type: ti_33557143} : dest_33557141;
      }
      else {
        result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {} : dest_33557141;
      }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557142 === null) {
        result_33557152 = null;
      }
      else {
        if (dest_33557141 === null || dest_33557141 === undefined || dest_33557141.length != src_33557142.length) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(result_33557152[i], src_33557142[i], ti_33557143.base);
        }
      }
    
      break;
    case 28:
            if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }
    
      break;
    default: 
      result_33557152 = src_33557142;
      break;
    }

  return result_33557152;

}

function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556894) {
        return new Array(len_33556894);
  

  
}

function toJSStr(s_33556808) {
                    var Temporary5;
            var Temporary7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break Label2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556859 = c_33556846.toString(16);
                  if ((((code_33556859) == null ? 0 : (code_33556859).length) == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Temporary5 = true; else {                      Temporary5 = (s_33556808[i_33556844] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556845 += 1;
        }
    } while (false);
    if (res_33556843.length < j_33556845) { for (var i = res_33556843.length ; i < j_33556845 ; ++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}

function raiseException(e_33556668, ename_33556669) {
    e_33556668.name = ename_33556669;
    if ((excHandler == 0)) {
    unhandledException(e_33556668);
    }
    
    throw e_33556668;

  
}

function addInt(a_33556941, b_33556942) {
        var result = a_33556941 + b_33556942;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557190, a_33557191, b_33557192) {
      var Temporary1;

  var result_33557193 = 0;

  BeforeRet: do {
      if (!(a_33557191 <= i_33557190)) Temporary1 = false; else {        Temporary1 = (i_33557190 <= b_33557192);      }    if (Temporary1) {
    result_33557193 = i_33557190;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557193;

}

function chckIndx(i_33557185, a_33557186, b_33557187) {
      var Temporary1;

  var result_33557188 = 0;

  BeforeRet: do {
      if (!(a_33557186 <= i_33557185)) Temporary1 = false; else {        Temporary1 = (i_33557185 <= b_33557187);      }    if (Temporary1) {
    result_33557188 = i_33557185;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557185, a_33557186, b_33557187);
    }
    
  } while (false);

  return result_33557188;

}

function subInt(a_33556945, b_33556946) {
        var result = a_33556945 - b_33556946;
    checkOverflowInt(result);
    return result;
  

  
}

function cstrToNimstr(c_33556805) {
      var ln = c_33556805.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556805.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556805.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function addChar(x_33557256, c_33557257) {
    x_33557256.push(c_33557257);

  
}
var ConstSet2 = setConstr([48, 57]);

function mulInt(a_33556949, b_33556950) {
        var result = a_33556949 * b_33556950;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([65, 90]);

function nimMax(a_33556999, b_33557000) {
    var Temporary1;

  var result_33557001 = 0;

  BeforeRet: do {
    if ((b_33557000 <= a_33556999)) {
    Temporary1 = a_33556999;
    }
    else {
    Temporary1 = b_33557000;
    }
    
    result_33557001 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557001;

}

function nimMin(a_33556995, b_33556996) {
    var Temporary1;

  var result_33556997 = 0;

  BeforeRet: do {
    if ((a_33556995 <= b_33556996)) {
    Temporary1 = a_33556995;
    }
    else {
    Temporary1 = b_33556996;
    }
    
    result_33556997 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556997;

}
var ConstSet6 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var ConstSet7 = setConstr(1);

function raiseFieldError2(f_33556779, discVal_33556780) {
    raiseException({message: (f_33556779 || []).concat(discVal_33556780 || [],makeNimstrLit("\'") || []), parent: null, m_type: NTI33555129, name: null, trace: [], up: null}, "FieldDefect");

  
}

function nimBoolToStr(x_33556515) {
  var result_33556516 = [];

    if (x_33556515) {
    result_33556516 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33556516 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33556516;

}

function reprDiscriminant(e_33557425, typ_33557426) {
    var Temporary1;

  var result_33557427 = [];

    switch (typ_33557426.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557425, typ_33557426);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557425 == 0)));
      break;
    default: 
      Temporary1 = HEX24_335544323(e_33557425);
      break;
    }
    result_33557427 = nimCopy(null, Temporary1, NTI33554439);

  return result_33557427;

}
var ConstSet8 = setConstr(1);

function nimCharToStr(x_33556518) {
  var result_33556519 = [];

    result_33556519 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556519[0] = x_33556518;

  return result_33556519;

}
var ConstSet9 = setConstr(1);
var ConstSet10 = setConstr(0);
var ConstSet11 = setConstr(1);
var ConstSet12 = setConstr(1);
var ConstSet13 = setConstr(0);
var ConstSet14 = setConstr(0);
var ConstSet15 = setConstr(1);
var ConstSet16 = setConstr(0);
var ConstSet17 = setConstr(1);
var ConstSet18 = setConstr(0);
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr(0);
var ConstSet21 = setConstr(1);

function eqStrings(a_33556932, b_33556933) {
        if (a_33556932 == b_33556933) return true;
    if (a_33556932 === null && b_33556933.length == 0) return true;
    if (b_33556933 === null && a_33556932.length == 0) return true;
    if ((!a_33556932) || (!b_33556933)) return false;
    var alen = a_33556932.length;
    if (alen != b_33556933.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556932[i] != b_33556933[i]) return false;
    return true;
  

  
}
var ConstSet22 = setConstr(0);
var ConstSet23 = setConstr(1);
var ConstSet24 = setConstr(0);
var ConstSet25 = setConstr(1);
var ConstSet26 = setConstr(0);
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(1);
var ConstSet29 = setConstr(1);
var ConstSet30 = setConstr(0);
var ConstSet31 = setConstr(1);
var ConstSet32 = setConstr(0);
var ConstSet33 = setConstr(1);
var ConstSet34 = setConstr(1);
var ConstSet35 = setConstr(0);
var ConstSet36 = setConstr(0);
var ConstSet37 = setConstr(1);
var ConstSet38 = setConstr(0);
var ConstSet39 = setConstr(1);
var ConstSet40 = setConstr(0);
var ConstSet41 = setConstr(1);
var ConstSet42 = setConstr(0);
var ConstSet43 = setConstr(1);
var ConstSet44 = setConstr(0);
var ConstSet45 = setConstr(1);
var ConstSet46 = setConstr(0);
var ConstSet47 = setConstr(1);
var ConstSet48 = setConstr(0);
var ConstSet49 = setConstr(1);
var ConstSet50 = setConstr(1);
var ConstSet51 = setConstr(2, 3, 8);
var ConstSet52 = setConstr(1, 4);
var ConstSet53 = setConstr(1);
var ConstSet54 = setConstr(1);
var ConstSet55 = setConstr(0);
var ConstSet56 = setConstr(1);
var ConstSet57 = setConstr(1);
      var fontExceptions_637534244 = [[{Field0: 104, Field1: makeNimstrLit("\xE2\x84\x8E")}], [], [{Field0: 66, Field1: makeNimstrLit("\xE2\x84\xAC")}, {Field0: 69, Field1: makeNimstrLit("\xE2\x84\xB0")}, {Field0: 70, Field1: makeNimstrLit("\xE2\x84\xB1")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8B")}, {Field0: 73, Field1: makeNimstrLit("\xE2\x84\x90")}, {Field0: 76, Field1: makeNimstrLit("\xE2\x84\x92")}, {Field0: 77, Field1: makeNimstrLit("\xE2\x84\xB3")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9B")}, {Field0: 101, Field1: makeNimstrLit("\xE2\x84\xAF")}, {Field0: 103, Field1: makeNimstrLit("\xE2\x84\x8A")}, {Field0: 111, Field1: makeNimstrLit("\xE2\x84\xB4")}], [{Field0: 67, Field1: makeNimstrLit("\xE2\x84\xAD")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8C")}, {Field0: 73, Field1: makeNimstrLit("\xE2\x84\x91")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9C")}, {Field0: 90, Field1: makeNimstrLit("\xE2\x84\xA8")}], [{Field0: 67, Field1: makeNimstrLit("\xE2\x84\x82")}, {Field0: 72, Field1: makeNimstrLit("\xE2\x84\x8D")}, {Field0: 78, Field1: makeNimstrLit("\xE2\x84\x95")}, {Field0: 80, Field1: makeNimstrLit("\xE2\x84\x99")}, {Field0: 81, Field1: makeNimstrLit("\xE2\x84\x9A")}, {Field0: 82, Field1: makeNimstrLit("\xE2\x84\x9D")}, {Field0: 90, Field1: makeNimstrLit("\xE2\x84\xA4")}]];
    var fontStarts_637534223 = new Int32Array([119860, 119808, 119964, 120068, 120120]);
var fontsByName_637534222 = [{Field0: makeNimstrLit("\\mathit"), Field1: 0}, {Field0: makeNimstrLit("\\mathbf"), Field1: 1}, {Field0: makeNimstrLit("\\mathcal"), Field1: 2}, {Field0: makeNimstrLit("\\mathfrak"), Field1: 3}, {Field0: makeNimstrLit("\\mathbb"), Field1: 4}];
var ConstSet58 = setConstr(1);
var ConstSet59 = setConstr(1);
var ConstSet60 = setConstr(0);
var ConstSet61 = setConstr(1);
var ConstSet62 = setConstr(1);
var ConstSet63 = setConstr(0);
var ConstSet64 = setConstr(1);
var ConstSet65 = setConstr(1);
var ConstSet66 = setConstr(0);
var ConstSet67 = setConstr(1);
var ConstSet68 = setConstr(1);
var ConstSet69 = setConstr(0);
var ConstSet70 = setConstr(1);
var ConstSet71 = setConstr(1);
var ConstSet72 = setConstr(0);
var ConstSet73 = setConstr(1);
var ConstSet74 = setConstr(0);
var ConstSet75 = setConstr(1);
var ConstSet76 = setConstr(0);
var ConstSet77 = setConstr(1);
var ConstSet78 = setConstr(1);
var ConstSet79 = setConstr(0);
var ConstSet80 = setConstr(1);
var ConstSet81 = setConstr(1);
var bigOperators_637534219 = [{Field0: makeNimstrLit("\\sum"), Field1: makeNimstrLit("\xE2\x88\x91")}, {Field0: makeNimstrLit("\\prod"), Field1: makeNimstrLit("\xE2\x88\x8F")}, {Field0: makeNimstrLit("\\bigotimes"), Field1: makeNimstrLit("\xE2\xA8\x82")}, {Field0: makeNimstrLit("\\bigvee"), Field1: makeNimstrLit("\xE2\x8B\x81")}, {Field0: makeNimstrLit("\\int"), Field1: makeNimstrLit("\xE2\x88\xAB")}, {Field0: makeNimstrLit("\\coprod"), Field1: makeNimstrLit("\xE2\x88\x90")}, {Field0: makeNimstrLit("\\bigoplus"), Field1: makeNimstrLit("\xE2\xA8\x81")}, {Field0: makeNimstrLit("\\bigwedge"), Field1: makeNimstrLit("\xE2\x8B\x80")}, {Field0: makeNimstrLit("\\iint"), Field1: makeNimstrLit("\xE2\x88\xAC")}, {Field0: makeNimstrLit("\\intop"), Field1: makeNimstrLit("\xE2\x88\xAB")}, {Field0: makeNimstrLit("\\bigodot"), Field1: makeNimstrLit("\xE2\xA8\x80")}, {Field0: makeNimstrLit("\\bigcap"), Field1: makeNimstrLit("\xE2\x8B\x82")}, {Field0: makeNimstrLit("\\iiint"), Field1: makeNimstrLit("\xE2\x88\xAD")}, {Field0: makeNimstrLit("\\smallint"), Field1: makeNimstrLit("\xE2\x88\xAB")}, {Field0: makeNimstrLit("\\biguplus"), Field1: makeNimstrLit("\xE2\xA8\x84")}, {Field0: makeNimstrLit("\\bigcup"), Field1: makeNimstrLit("\xE2\x8B\x83")}, {Field0: makeNimstrLit("\\oint"), Field1: makeNimstrLit("\xE2\x88\xAE")}, {Field0: makeNimstrLit("\\oiint"), Field1: makeNimstrLit("\xE2\x88\xAF")}, {Field0: makeNimstrLit("\\oiiint"), Field1: makeNimstrLit("\xE2\x88\xB0")}, {Field0: makeNimstrLit("\\bigsqcup"), Field1: makeNimstrLit("\xE2\xA8\x86")}];
var binaryOperators_637534220 = [{Field0: makeNimstrLit("+"), Field1: makeNimstrLit("+")}, {Field0: makeNimstrLit("-"), Field1: makeNimstrLit("\xE2\x88\x92")}, {Field0: makeNimstrLit("*"), Field1: makeNimstrLit("\xE2\x88\x97")}, {Field0: makeNimstrLit("/"), Field1: makeNimstrLit("/")}, {Field0: makeNimstrLit("\\cdot"), Field1: makeNimstrLit("\xE2\x8B\x85")}, {Field0: makeNimstrLit("\\gtrdot"), Field1: makeNimstrLit("\xE2\x8B\x97")}, {Field0: makeNimstrLit("\\cdotp"), Field1: makeNimstrLit("\xE2\x8B\x85")}, {Field0: makeNimstrLit("\\intercal"), Field1: makeNimstrLit("\xE2\x8A\xBA")}, {Field0: makeNimstrLit("\\centerdot"), Field1: makeNimstrLit("\xE2\x8B\x85")}, {Field0: makeNimstrLit("\\land"), Field1: makeNimstrLit("\xE2\x88\xA7")}, {Field0: makeNimstrLit("\\rhd"), Field1: makeNimstrLit("\xE2\x8A\xB3")}, {Field0: makeNimstrLit("\\circ"), Field1: makeNimstrLit("\xE2\x88\x98")}, {Field0: makeNimstrLit("\\leftthreetimes"), Field1: makeNimstrLit("\xE2\x8B\x8B")}, {Field0: makeNimstrLit("\\rightthreetimes"), Field1: makeNimstrLit("\xE2\x8B\x8C")}, {Field0: makeNimstrLit("\\amalg"), Field1: makeNimstrLit("\xE2\xA8\xBF")}, {Field0: makeNimstrLit("\\circledast"), Field1: makeNimstrLit("\xE2\x8A\x9B")}, {Field0: makeNimstrLit("\\ldotp"), Field1: makeNimstrLit(".")}, {Field0: makeNimstrLit("\\rtimes"), Field1: makeNimstrLit("\xE2\x8B\x8A")}, {Field0: makeNimstrLit("\\And"), Field1: makeNimstrLit("&")}, {Field0: makeNimstrLit("\\circledcirc"), Field1: makeNimstrLit("\xE2\x8A\x9A")}, {Field0: makeNimstrLit("\\lor"), Field1: makeNimstrLit("\xE2\x88\xA8")}, {Field0: makeNimstrLit("\\setminus"), Field1: makeNimstrLit("\xE2\x88\x96")}, {Field0: makeNimstrLit("\\ast"), Field1: makeNimstrLit("\xE2\x88\x97")}, {Field0: makeNimstrLit("\\circleddash"), Field1: makeNimstrLit("\xE2\x8A\x9D")}, {Field0: makeNimstrLit("\\lessdot"), Field1: makeNimstrLit("\xE2\x8B\x96")}, {Field0: makeNimstrLit("\\smallsetminus"), Field1: makeNimstrLit("\xE2\x88\x96")}, {Field0: makeNimstrLit("\\barwedge"), Field1: makeNimstrLit("\xE2\x8A\xBC")}, {Field0: makeNimstrLit("\\Cup"), Field1: makeNimstrLit("\xE2\x8B\x93")}, {Field0: makeNimstrLit("\\lhd"), Field1: makeNimstrLit("\xE2\x8A\xB2")}, {Field0: makeNimstrLit("\\sqcap"), Field1: makeNimstrLit("\xE2\x8A\x93")}, {Field0: makeNimstrLit("\\bigcirc"), Field1: makeNimstrLit("\xE2\x97\xAF")}, {Field0: makeNimstrLit("\\cup"), Field1: makeNimstrLit("\xE2\x88\xAA")}, {Field0: makeNimstrLit("\\ltimes"), Field1: makeNimstrLit("\xE2\x8B\x89")}, {Field0: makeNimstrLit("\\sqcup"), Field1: makeNimstrLit("\xE2\x8A\x94")}, {Field0: makeNimstrLit("\\mod"), Field1: makeNimstrLit("bmod")}, {Field0: makeNimstrLit("\\curlyvee"), Field1: makeNimstrLit("\xE2\x8B\x8E")}, {Field0: makeNimstrLit("\\times"), Field1: makeNimstrLit("\xC3\x97")}, {Field0: makeNimstrLit("\\boxdot"), Field1: makeNimstrLit("\xE2\x8A\xA1")}, {Field0: makeNimstrLit("\\curlywedge"), Field1: makeNimstrLit("\xE2\x8B\x8F")}, {Field0: makeNimstrLit("\\mp"), Field1: makeNimstrLit("\xE2\x88\x93")}, {Field0: makeNimstrLit("\\unlhd"), Field1: makeNimstrLit("\xE2\x8A\xB4")}, {Field0: makeNimstrLit("\\boxminus"), Field1: makeNimstrLit("\xE2\x8A\x9F")}, {Field0: makeNimstrLit("\\div"), Field1: makeNimstrLit("\xC3\xB7")}, {Field0: makeNimstrLit("\\odot"), Field1: makeNimstrLit("\xE2\x8A\x99")}, {Field0: makeNimstrLit("\\unrhd"), Field1: makeNimstrLit("\xE2\x8A\xB5")}, {Field0: makeNimstrLit("\\boxplus"), Field1: makeNimstrLit("\xE2\x8A\x9E")}, {Field0: makeNimstrLit("\\divideontimes"), Field1: makeNimstrLit("\xE2\x8B\x87")}, {Field0: makeNimstrLit("\\ominus"), Field1: makeNimstrLit("\xE2\x8A\x96")}, {Field0: makeNimstrLit("\\uplus"), Field1: makeNimstrLit("\xE2\x8A\x8E")}, {Field0: makeNimstrLit("\\boxtimes"), Field1: makeNimstrLit("\xE2\x8A\xA0")}, {Field0: makeNimstrLit("\\dotplus"), Field1: makeNimstrLit("\xE2\x88\x94")}, {Field0: makeNimstrLit("\\oplus"), Field1: makeNimstrLit("\xE2\x8A\x95")}, {Field0: makeNimstrLit("\\vee"), Field1: makeNimstrLit("\xE2\x88\xA8")}, {Field0: makeNimstrLit("\\bullet"), Field1: makeNimstrLit("\xE2\x88\x99")}, {Field0: makeNimstrLit("\\doublebarwedge"), Field1: makeNimstrLit("\xE2\xA9\x9E")}, {Field0: makeNimstrLit("\\otimes"), Field1: makeNimstrLit("\xE2\x8A\x97")}, {Field0: makeNimstrLit("\\veebar"), Field1: makeNimstrLit("\xE2\x8A\xBB")}, {Field0: makeNimstrLit("\\Cap"), Field1: makeNimstrLit("\xE2\x8B\x92")}, {Field0: makeNimstrLit("\\doublecap"), Field1: makeNimstrLit("\xE2\x8B\x92")}, {Field0: makeNimstrLit("\\oslash"), Field1: makeNimstrLit("\xE2\x8A\x98")}, {Field0: makeNimstrLit("\\wedge"), Field1: makeNimstrLit("\xE2\x88\xA7")}, {Field0: makeNimstrLit("\\cap"), Field1: makeNimstrLit("\xE2\x88\xA9")}, {Field0: makeNimstrLit("\\doublecup"), Field1: makeNimstrLit("\xE2\x8B\x93")}, {Field0: makeNimstrLit("\\pm"), Field1: makeNimstrLit("\xC2\xB1")}, {Field0: makeNimstrLit("\\plusmn"), Field1: makeNimstrLit("\xC2\xB1")}, {Field0: makeNimstrLit("\\wr"), Field1: makeNimstrLit("\xE2\x89\x80")}, {Field0: makeNimstrLit("\\forall"), Field1: makeNimstrLit("\xE2\x88\x80")}, {Field0: makeNimstrLit("\\complement"), Field1: makeNimstrLit("\xE2\x88\x81")}, {Field0: makeNimstrLit("\\therefore"), Field1: makeNimstrLit("\xE2\x88\xB4")}, {Field0: makeNimstrLit("\\emptyset"), Field1: makeNimstrLit("\xE2\x88\x85")}, {Field0: makeNimstrLit("\\exists"), Field1: makeNimstrLit("\xE2\x88\x83")}, {Field0: makeNimstrLit("\\subset"), Field1: makeNimstrLit("\xE2\x8A\x82")}, {Field0: makeNimstrLit("\\because"), Field1: makeNimstrLit("\xE2\x88\xB5")}, {Field0: makeNimstrLit("\\empty"), Field1: makeNimstrLit("\xE2\x88\x85")}, {Field0: makeNimstrLit("\\exist"), Field1: makeNimstrLit("\xE2\x88\x83")}, {Field0: makeNimstrLit("\\supset"), Field1: makeNimstrLit("\xE2\x8A\x83")}, {Field0: makeNimstrLit("\\mapsto"), Field1: makeNimstrLit("\xE2\x86\xA6")}, {Field0: makeNimstrLit("\\varnothing"), Field1: makeNimstrLit("\xE2\x88\x85")}, {Field0: makeNimstrLit("\\nexists"), Field1: makeNimstrLit("\xE2\x88\x84")}, {Field0: makeNimstrLit("\\mid"), Field1: makeNimstrLit("\xE2\x88\xA3")}, {Field0: makeNimstrLit("\\to"), Field1: makeNimstrLit("\xE2\x86\x92")}, {Field0: makeNimstrLit("\\implies"), Field1: makeNimstrLit("\xE2\x9F\xB9")}, {Field0: makeNimstrLit("\\in"), Field1: makeNimstrLit("\xE2\x88\x88")}, {Field0: makeNimstrLit("\\land"), Field1: makeNimstrLit("\xE2\x88\xA7")}, {Field0: makeNimstrLit("\\gets"), Field1: makeNimstrLit("\xE2\x86\x90")}, {Field0: makeNimstrLit("\\impliedby"), Field1: makeNimstrLit("\xE2\x9F\xB8")}, {Field0: makeNimstrLit("\\isin"), Field1: makeNimstrLit("\xE2\x88\x88")}, {Field0: makeNimstrLit("\\lor"), Field1: makeNimstrLit("\xE2\x88\xA8")}, {Field0: makeNimstrLit("\\leftrightarrow"), Field1: makeNimstrLit("\xE2\x86\x94")}, {Field0: makeNimstrLit("\\iff"), Field1: makeNimstrLit("\xE2\x9F\xBA")}, {Field0: makeNimstrLit("\\notin"), Field1: makeNimstrLit("\xE2\x88\x89")}, {Field0: makeNimstrLit("\\ni"), Field1: makeNimstrLit("\xE2\x88\x8B")}, {Field0: makeNimstrLit("\\notni"), Field1: makeNimstrLit("\xE2\x88\x8C")}, {Field0: makeNimstrLit("\\neg"), Field1: makeNimstrLit("\xC2\xAC")}, {Field0: makeNimstrLit("\\lnot"), Field1: makeNimstrLit("\xC2\xAC")}, {Field0: makeNimstrLit("\\circlearrowleft"), Field1: makeNimstrLit("\xE2\x86\xBA")}, {Field0: makeNimstrLit("\\leftharpoonup"), Field1: makeNimstrLit("\xE2\x86\xBC")}, {Field0: makeNimstrLit("\\rArr"), Field1: makeNimstrLit("\xE2\x87\x92")}, {Field0: makeNimstrLit("\\circlearrowright"), Field1: makeNimstrLit("\xE2\x86\xBB")}, {Field0: makeNimstrLit("\\leftleftarrows"), Field1: makeNimstrLit("\xE2\x87\x87")}, {Field0: makeNimstrLit("\\rarr"), Field1: makeNimstrLit("\xE2\x86\x92")}, {Field0: makeNimstrLit("\\curvearrowleft"), Field1: makeNimstrLit("\xE2\x86\xB6")}, {Field0: makeNimstrLit("\\leftrightarrow"), Field1: makeNimstrLit("\xE2\x86\x94")}, {Field0: makeNimstrLit("\\restriction"), Field1: makeNimstrLit("\xE2\x86\xBE")}, {Field0: makeNimstrLit("\\curvearrowright"), Field1: makeNimstrLit("\xE2\x86\xB7")}, {Field0: makeNimstrLit("\\Leftrightarrow"), Field1: makeNimstrLit("\xE2\x87\x94")}, {Field0: makeNimstrLit("\\rightarrow"), Field1: makeNimstrLit("\xE2\x86\x92")}, {Field0: makeNimstrLit("\\Darr"), Field1: makeNimstrLit("\xE2\x87\x93")}, {Field0: makeNimstrLit("\\leftrightarrows"), Field1: makeNimstrLit("\xE2\x87\x86")}, {Field0: makeNimstrLit("\\Rightarrow"), Field1: makeNimstrLit("\xE2\x87\x92")}, {Field0: makeNimstrLit("\\dArr"), Field1: makeNimstrLit("\xE2\x87\x93")}, {Field0: makeNimstrLit("\\leftrightharpoons"), Field1: makeNimstrLit("\xE2\x87\x8B")}, {Field0: makeNimstrLit("\\rightarrowtail"), Field1: makeNimstrLit("\xE2\x86\xA3")}, {Field0: makeNimstrLit("\\darr"), Field1: makeNimstrLit("\xE2\x86\x93")}, {Field0: makeNimstrLit("\\leftrightsquigarrow"), Field1: makeNimstrLit("\xE2\x86\xAD")}, {Field0: makeNimstrLit("\\rightharpoondown"), Field1: makeNimstrLit("\xE2\x87\x81")}, {Field0: makeNimstrLit("\\dashleftarrow"), Field1: makeNimstrLit("\xE2\x87\xA0")}, {Field0: makeNimstrLit("\\Lleftarrow"), Field1: makeNimstrLit("\xE2\x87\x9A")}, {Field0: makeNimstrLit("\\rightharpoonup"), Field1: makeNimstrLit("\xE2\x87\x80")}, {Field0: makeNimstrLit("\\dashrightarrow"), Field1: makeNimstrLit("\xE2\x87\xA2")}, {Field0: makeNimstrLit("\\longleftarrow"), Field1: makeNimstrLit("\xE2\x9F\xB5")}, {Field0: makeNimstrLit("\\rightleftarrows"), Field1: makeNimstrLit("\xE2\x87\x84")}, {Field0: makeNimstrLit("\\downarrow"), Field1: makeNimstrLit("\xE2\x86\x93")}, {Field0: makeNimstrLit("\\Longleftarrow"), Field1: makeNimstrLit("\xE2\x9F\xB8")}, {Field0: makeNimstrLit("\\rightleftharpoons"), Field1: makeNimstrLit("\xE2\x87\x8C")}, {Field0: makeNimstrLit("\\Downarrow"), Field1: makeNimstrLit("\xE2\x87\x93")}, {Field0: makeNimstrLit("\\longleftrightarrow"), Field1: makeNimstrLit("\xE2\x9F\xB7")}, {Field0: makeNimstrLit("\\rightrightarrows"), Field1: makeNimstrLit("\xE2\x87\x89")}, {Field0: makeNimstrLit("\\downdownarrows"), Field1: makeNimstrLit("\xE2\x87\x8A")}, {Field0: makeNimstrLit("\\Longleftrightarrow"), Field1: makeNimstrLit("\xE2\x9F\xBA")}, {Field0: makeNimstrLit("\\rightsquigarrow"), Field1: makeNimstrLit("\xE2\x87\x9D")}, {Field0: makeNimstrLit("\\downharpoonleft"), Field1: makeNimstrLit("\xE2\x87\x83")}, {Field0: makeNimstrLit("\\longmapsto"), Field1: makeNimstrLit("\xE2\x9F\xBC")}, {Field0: makeNimstrLit("\\Rrightarrow"), Field1: makeNimstrLit("\xE2\x87\x9B")}, {Field0: makeNimstrLit("\\downharpoonright"), Field1: makeNimstrLit("\xE2\x87\x82")}, {Field0: makeNimstrLit("\\longrightarrow"), Field1: makeNimstrLit("\xE2\x9F\xB6")}, {Field0: makeNimstrLit("\\Rsh"), Field1: makeNimstrLit("\xE2\x86\xB1")}, {Field0: makeNimstrLit("\\gets"), Field1: makeNimstrLit("\xE2\x86\x90")}, {Field0: makeNimstrLit("\\Longrightarrow"), Field1: makeNimstrLit("\xE2\x9F\xB9")}, {Field0: makeNimstrLit("\\searrow"), Field1: makeNimstrLit("\xE2\x86\x98")}, {Field0: makeNimstrLit("\\Harr"), Field1: makeNimstrLit("\xE2\x87\x94")}, {Field0: makeNimstrLit("\\looparrowleft"), Field1: makeNimstrLit("\xE2\x86\xAB")}, {Field0: makeNimstrLit("\\swarrow"), Field1: makeNimstrLit("\xE2\x86\x99")}, {Field0: makeNimstrLit("\\hArr"), Field1: makeNimstrLit("\xE2\x87\x94")}, {Field0: makeNimstrLit("\\looparrowright"), Field1: makeNimstrLit("\xE2\x86\xAC")}, {Field0: makeNimstrLit("\\to"), Field1: makeNimstrLit("\xE2\x86\x92")}, {Field0: makeNimstrLit("\\harr"), Field1: makeNimstrLit("\xE2\x86\x94")}, {Field0: makeNimstrLit("\\Lrarr"), Field1: makeNimstrLit("\xE2\x87\x94")}, {Field0: makeNimstrLit("\\twoheadleftarrow"), Field1: makeNimstrLit("\xE2\x86\x9E")}, {Field0: makeNimstrLit("\\hookleftarrow"), Field1: makeNimstrLit("\xE2\x86\xA9")}, {Field0: makeNimstrLit("\\lrArr"), Field1: makeNimstrLit("\xE2\x87\x94")}, {Field0: makeNimstrLit("\\twoheadrightarrow"), Field1: makeNimstrLit("\xE2\x86\xA0")}, {Field0: makeNimstrLit("\\hookrightarrow"), Field1: makeNimstrLit("\xE2\x86\xAA")}, {Field0: makeNimstrLit("\\lrarr"), Field1: makeNimstrLit("\xE2\x86\x94")}, {Field0: makeNimstrLit("\\Uarr"), Field1: makeNimstrLit("\xE2\x87\x91")}, {Field0: makeNimstrLit("\\Lsh"), Field1: makeNimstrLit("\xE2\x86\xB0")}, {Field0: makeNimstrLit("\\uArr"), Field1: makeNimstrLit("\xE2\x87\x91")}, {Field0: makeNimstrLit("\\mapsto"), Field1: makeNimstrLit("\xE2\x86\xA6")}, {Field0: makeNimstrLit("\\uarr"), Field1: makeNimstrLit("\xE2\x86\x91")}, {Field0: makeNimstrLit("\\nearrow"), Field1: makeNimstrLit("\xE2\x86\x97")}, {Field0: makeNimstrLit("\\uparrow"), Field1: makeNimstrLit("\xE2\x86\x91")}, {Field0: makeNimstrLit("\\Larr"), Field1: makeNimstrLit("\xE2\x87\x90")}, {Field0: makeNimstrLit("\\nleftarrow"), Field1: makeNimstrLit("\xE2\x86\x9A")}, {Field0: makeNimstrLit("\\Uparrow"), Field1: makeNimstrLit("\xE2\x87\x91")}, {Field0: makeNimstrLit("\\lArr"), Field1: makeNimstrLit("\xE2\x87\x90")}, {Field0: makeNimstrLit("\\nLeftarrow"), Field1: makeNimstrLit("\xE2\x87\x8D")}, {Field0: makeNimstrLit("\\updownarrow"), Field1: makeNimstrLit("\xE2\x86\x95")}, {Field0: makeNimstrLit("\\larr"), Field1: makeNimstrLit("\xE2\x86\x90")}, {Field0: makeNimstrLit("\\nleftrightarrow"), Field1: makeNimstrLit("\xE2\x86\xAE")}, {Field0: makeNimstrLit("\\Updownarrow"), Field1: makeNimstrLit("\xE2\x87\x95")}, {Field0: makeNimstrLit("\\leadsto"), Field1: makeNimstrLit("\xE2\x87\x9D")}, {Field0: makeNimstrLit("\\nLeftrightarrow"), Field1: makeNimstrLit("\xE2\x87\x8E")}, {Field0: makeNimstrLit("\\upharpoonleft"), Field1: makeNimstrLit("\xE2\x86\xBF")}, {Field0: makeNimstrLit("\\leftarrow"), Field1: makeNimstrLit("\xE2\x86\x90")}, {Field0: makeNimstrLit("\\nrightarrow"), Field1: makeNimstrLit("\xE2\x86\x9B")}, {Field0: makeNimstrLit("\\upharpoonright"), Field1: makeNimstrLit("\xE2\x86\xBE")}, {Field0: makeNimstrLit("\\Leftarrow"), Field1: makeNimstrLit("\xE2\x87\x90")}, {Field0: makeNimstrLit("\\nRightarrow"), Field1: makeNimstrLit("\xE2\x87\x8F")}, {Field0: makeNimstrLit("\\upuparrows"), Field1: makeNimstrLit("\xE2\x87\x88")}, {Field0: makeNimstrLit("\\leftarrowtail"), Field1: makeNimstrLit("\xE2\x86\xA2")}, {Field0: makeNimstrLit("\\nwarrow"), Field1: makeNimstrLit("\xE2\x86\x96")}, {Field0: makeNimstrLit("\\leftharpoondown"), Field1: makeNimstrLit("\xE2\x86\xBD")}, {Field0: makeNimstrLit("\\Rarr"), Field1: makeNimstrLit("\xE2\x87\x92")}, {Field0: makeNimstrLit("="), Field1: makeNimstrLit("=")}, {Field0: makeNimstrLit("\\doteqdot"), Field1: makeNimstrLit("\xE2\x89\x91")}, {Field0: makeNimstrLit("\\lessapprox"), Field1: makeNimstrLit("\xE2\xAA\x85")}, {Field0: makeNimstrLit("\\smile"), Field1: makeNimstrLit("\xE2\x8C\xA3")}, {Field0: makeNimstrLit("<"), Field1: makeNimstrLit("<")}, {Field0: makeNimstrLit("\\eqcirc"), Field1: makeNimstrLit("\xE2\x89\x96")}, {Field0: makeNimstrLit("\\lesseqgtr"), Field1: makeNimstrLit("\xE2\x8B\x9A")}, {Field0: makeNimstrLit("\\sqsubset"), Field1: makeNimstrLit("\xE2\x8A\x8F")}, {Field0: makeNimstrLit("\\eqcolon"), Field1: makeNimstrLit(">>> >, \xE2\x88\xB9")}, {Field0: makeNimstrLit("\\minuscolon"), Field1: makeNimstrLit("\xE2\x88\xB9")}, {Field0: makeNimstrLit(">"), Field1: makeNimstrLit(">")}, {Field0: makeNimstrLit("\\lesseqqgtr"), Field1: makeNimstrLit("\xE2\xAA\x8B")}, {Field0: makeNimstrLit("\\sqsubseteq"), Field1: makeNimstrLit("\xE2\x8A\x91")}, {Field0: makeNimstrLit("\\Eqcolon"), Field1: makeNimstrLit("::: :, \xE2\x88\x92\xE2\x88\xB7")}, {Field0: makeNimstrLit("\\minuscoloncolon"), Field1: makeNimstrLit("::: :, \xE2\x88\x92\xE2\x88\xB7")}, {Field0: makeNimstrLit("\\lessgtr"), Field1: makeNimstrLit("\xE2\x89\xB6")}, {Field0: makeNimstrLit("\\sqsupset"), Field1: makeNimstrLit("\xE2\x8A\x90")}, {Field0: makeNimstrLit("\\eqqcolon"), Field1: makeNimstrLit("\xE2\x89\x95")}, {Field0: makeNimstrLit("\\equalscolon"), Field1: makeNimstrLit("\xE2\x89\x95")}, {Field0: makeNimstrLit("\\approx"), Field1: makeNimstrLit("\xE2\x89\x88")}, {Field0: makeNimstrLit("\\lesssim"), Field1: makeNimstrLit("\xE2\x89\xB2")}, {Field0: makeNimstrLit("\\sqsupseteq"), Field1: makeNimstrLit("\xE2\x8A\x92")}, {Field0: makeNimstrLit("\\Eqqcolon"), Field1: makeNimstrLit("=\xE2\x88\xB7")}, {Field0: makeNimstrLit("\x1Bqualscoloncolon"), Field1: makeNimstrLit("=\xE2\x88\xB7")}, {Field0: makeNimstrLit("\\approxcolon"), Field1: makeNimstrLit("\xE2\x89\x88:")}, {Field0: makeNimstrLit("\\ll"), Field1: makeNimstrLit("\xE2\x89\xAA")}, {Field0: makeNimstrLit("\\Subset"), Field1: makeNimstrLit("\xE2\x8B\x90")}, {Field0: makeNimstrLit("\x07pproxcoloncolon"), Field1: makeNimstrLit("\xE2\x89\x88\xE2\x88\xB7")}, {Field0: makeNimstrLit("\\eqsim"), Field1: makeNimstrLit("\xE2\x89\x82")}, {Field0: makeNimstrLit("\\lll"), Field1: makeNimstrLit("\xE2\x8B\x98")}, {Field0: makeNimstrLit("\\subset"), Field1: makeNimstrLit("\xE2\x8A\x82")}, {Field0: makeNimstrLit("\\sub"), Field1: makeNimstrLit("\xE2\x8A\x82")}, {Field0: makeNimstrLit("\\approxeq"), Field1: makeNimstrLit("\xE2\x89\x8A")}, {Field0: makeNimstrLit("\\eqslantgtr"), Field1: makeNimstrLit("\xE2\xAA\x96")}, {Field0: makeNimstrLit("\\llless"), Field1: makeNimstrLit("\xE2\x8B\x98")}, {Field0: makeNimstrLit("\\subseteq"), Field1: makeNimstrLit("\xE2\x8A\x86")}, {Field0: makeNimstrLit("\\sube"), Field1: makeNimstrLit("\xE2\x8A\x86")}, {Field0: makeNimstrLit("\\asymp"), Field1: makeNimstrLit("\xE2\x89\x8D")}, {Field0: makeNimstrLit("\\eqslantless"), Field1: makeNimstrLit("\xE2\xAA\x95")}, {Field0: makeNimstrLit("\\lt"), Field1: makeNimstrLit("<")}, {Field0: makeNimstrLit("\\subseteqq"), Field1: makeNimstrLit("\xE2\xAB\x85")}, {Field0: makeNimstrLit("\\backepsilon"), Field1: makeNimstrLit("\xE2\x88\x8D")}, {Field0: makeNimstrLit("\\equiv"), Field1: makeNimstrLit("\xE2\x89\xA1")}, {Field0: makeNimstrLit("\\mid"), Field1: makeNimstrLit("\xE2\x88\xA3")}, {Field0: makeNimstrLit("\\succ"), Field1: makeNimstrLit("\xE2\x89\xBB")}, {Field0: makeNimstrLit("\\backsim"), Field1: makeNimstrLit("\xE2\x88\xBD")}, {Field0: makeNimstrLit("\\fallingdotseq"), Field1: makeNimstrLit("\xE2\x89\x92")}, {Field0: makeNimstrLit("\\models"), Field1: makeNimstrLit("\xE2\x8A\xA8")}, {Field0: makeNimstrLit("\\succapprox"), Field1: makeNimstrLit("\xE2\xAA\xB8")}, {Field0: makeNimstrLit("\\backsimeq"), Field1: makeNimstrLit("\xE2\x8B\x8D")}, {Field0: makeNimstrLit("\\frown"), Field1: makeNimstrLit("\xE2\x8C\xA2")}, {Field0: makeNimstrLit("\\multimap"), Field1: makeNimstrLit("\xE2\x8A\xB8")}, {Field0: makeNimstrLit("\\succcurlyeq"), Field1: makeNimstrLit("\xE2\x89\xBD")}, {Field0: makeNimstrLit("\\between"), Field1: makeNimstrLit("\xE2\x89\xAC")}, {Field0: makeNimstrLit("\\ge"), Field1: makeNimstrLit("\xE2\x89\xA5")}, {Field0: makeNimstrLit("\\origof"), Field1: makeNimstrLit("\xE2\x8A\xB6")}, {Field0: makeNimstrLit("\\succeq"), Field1: makeNimstrLit("\xE2\xAA\xB0")}, {Field0: makeNimstrLit("\\bowtie"), Field1: makeNimstrLit("\xE2\x8B\x88")}, {Field0: makeNimstrLit("\\geq"), Field1: makeNimstrLit("\xE2\x89\xA5")}, {Field0: makeNimstrLit("\\owns"), Field1: makeNimstrLit("\xE2\x88\x8B")}, {Field0: makeNimstrLit("\\succsim"), Field1: makeNimstrLit("\xE2\x89\xBF")}, {Field0: makeNimstrLit("\\bumpeq"), Field1: makeNimstrLit("\xE2\x89\x8F")}, {Field0: makeNimstrLit("\\geqq"), Field1: makeNimstrLit("\xE2\x89\xA7")}, {Field0: makeNimstrLit("\\parallel"), Field1: makeNimstrLit("\xE2\x88\xA5")}, {Field0: makeNimstrLit("\\Supset"), Field1: makeNimstrLit("\xE2\x8B\x91")}, {Field0: makeNimstrLit("\\Bumpeq"), Field1: makeNimstrLit("\xE2\x89\x8E")}, {Field0: makeNimstrLit("\\geqslant"), Field1: makeNimstrLit("\xE2\xA9\xBE")}, {Field0: makeNimstrLit("\\perp"), Field1: makeNimstrLit("\xE2\x8A\xA5")}, {Field0: makeNimstrLit("\\supset"), Field1: makeNimstrLit("\xE2\x8A\x83")}, {Field0: makeNimstrLit("\\circeq"), Field1: makeNimstrLit("\xE2\x89\x97")}, {Field0: makeNimstrLit("\\gg"), Field1: makeNimstrLit("\xE2\x89\xAB")}, {Field0: makeNimstrLit("\\pitchfork"), Field1: makeNimstrLit("\xE2\x8B\x94")}, {Field0: makeNimstrLit("\\supseteq"), Field1: makeNimstrLit("\xE2\x8A\x87")}, {Field0: makeNimstrLit("\\supe"), Field1: makeNimstrLit("\xE2\x8A\x87")}, {Field0: makeNimstrLit("\\colonapprox"), Field1: makeNimstrLit(":\xE2\x89\x88")}, {Field0: makeNimstrLit("\\ggg"), Field1: makeNimstrLit("\xE2\x8B\x99")}, {Field0: makeNimstrLit("\\prec"), Field1: makeNimstrLit("\xE2\x89\xBA")}, {Field0: makeNimstrLit("\\supseteqq"), Field1: makeNimstrLit("\xE2\xAB\x86")}, {Field0: makeNimstrLit("\\Colonapprox"), Field1: makeNimstrLit("\xE2\x88\xB7\xE2\x89\x88")}, {Field0: makeNimstrLit("\x0Doloncolonapprox"), Field1: makeNimstrLit("\xE2\x88\xB7\xE2\x89\x88")}, {Field0: makeNimstrLit("\\gggtr"), Field1: makeNimstrLit("\xE2\x8B\x99")}, {Field0: makeNimstrLit("\\precapprox"), Field1: makeNimstrLit("\xE2\xAA\xB7")}, {Field0: makeNimstrLit("\\thickapprox"), Field1: makeNimstrLit("\xE2\x89\x88")}, {Field0: makeNimstrLit("\\coloneq"), Field1: makeNimstrLit(":\xE2\x88\x92")}, {Field0: makeNimstrLit("\\colonminus"), Field1: makeNimstrLit(":\xE2\x88\x92")}, {Field0: makeNimstrLit("\\gt"), Field1: makeNimstrLit(">")}, {Field0: makeNimstrLit("\\preccurlyeq"), Field1: makeNimstrLit("\xE2\x89\xBC")}, {Field0: makeNimstrLit("\\thicksim"), Field1: makeNimstrLit("\xE2\x88\xBC")}, {Field0: makeNimstrLit("\\Coloneq"), Field1: makeNimstrLit("\xE2\x88\xB7\xE2\x88\x92")}, {Field0: makeNimstrLit("\x0Doloncolonminus"), Field1: makeNimstrLit("\xE2\x88\xB7\xE2\x88\x92")}, {Field0: makeNimstrLit("\\gtrapprox"), Field1: makeNimstrLit("\xE2\xAA\x86")}, {Field0: makeNimstrLit("\\preceq"), Field1: makeNimstrLit("\xE2\xAA\xAF")}, {Field0: makeNimstrLit("\\trianglelefteq"), Field1: makeNimstrLit("\xE2\x8A\xB4")}, {Field0: makeNimstrLit("\\coloneqq"), Field1: makeNimstrLit("\xE2\x89\x94")}, {Field0: makeNimstrLit("\x0Dolonequals"), Field1: makeNimstrLit("\xE2\x89\x94")}, {Field0: makeNimstrLit("\\gtreqless"), Field1: makeNimstrLit("\xE2\x8B\x9B")}, {Field0: makeNimstrLit("\\precsim"), Field1: makeNimstrLit("\xE2\x89\xBE")}, {Field0: makeNimstrLit("\\triangleq"), Field1: makeNimstrLit("\xE2\x89\x9C")}, {Field0: makeNimstrLit("\\Coloneqq"), Field1: makeNimstrLit("\xE2\x88\xB7=")}, {Field0: makeNimstrLit("\x0Doloncolonequals"), Field1: makeNimstrLit("\xE2\x88\xB7=")}, {Field0: makeNimstrLit("\\gtreqqless"), Field1: makeNimstrLit("\xE2\xAA\x8C")}, {Field0: makeNimstrLit("\\propto"), Field1: makeNimstrLit("\xE2\x88\x9D")}, {Field0: makeNimstrLit("\\trianglerighteq"), Field1: makeNimstrLit("\xE2\x8A\xB5")}, {Field0: makeNimstrLit("\\colonsim"), Field1: makeNimstrLit(":\xE2\x88\xBC")}, {Field0: makeNimstrLit("\\gtrless"), Field1: makeNimstrLit("\xE2\x89\xB7")}, {Field0: makeNimstrLit("\\risingdotseq"), Field1: makeNimstrLit("\xE2\x89\x93")}, {Field0: makeNimstrLit("\\varpropto"), Field1: makeNimstrLit("\xE2\x88\x9D")}, {Field0: makeNimstrLit("\\Colonsim"), Field1: makeNimstrLit("\xE2\x88\xB7\xE2\x88\xBC")}, {Field0: makeNimstrLit("\x0Doloncolonsim"), Field1: makeNimstrLit("\xE2\x88\xB7\xE2\x88\xBC")}, {Field0: makeNimstrLit("\\gtrsim"), Field1: makeNimstrLit("\xE2\x89\xB3")}, {Field0: makeNimstrLit("\\shortmid"), Field1: makeNimstrLit("\xE2\x88\xA3")}, {Field0: makeNimstrLit("\\vartriangle"), Field1: makeNimstrLit("\xE2\x96\xB3")}, {Field0: makeNimstrLit("\\cong"), Field1: makeNimstrLit("\xE2\x89\x85")}, {Field0: makeNimstrLit("\\imageof"), Field1: makeNimstrLit("\xE2\x8A\xB7")}, {Field0: makeNimstrLit("\\shortparallel"), Field1: makeNimstrLit("\xE2\x88\xA5")}, {Field0: makeNimstrLit("\\vartriangleleft"), Field1: makeNimstrLit("\xE2\x8A\xB2")}, {Field0: makeNimstrLit("\\curlyeqprec"), Field1: makeNimstrLit("\xE2\x8B\x9E")}, {Field0: makeNimstrLit("\\in"), Field1: makeNimstrLit("\xE2\x88\x88")}, {Field0: makeNimstrLit("\\isin"), Field1: makeNimstrLit("\xE2\x88\x88")}, {Field0: makeNimstrLit("\\sim"), Field1: makeNimstrLit("\xE2\x88\xBC")}, {Field0: makeNimstrLit("\\vartriangleright"), Field1: makeNimstrLit("\xE2\x8A\xB3")}, {Field0: makeNimstrLit("\\curlyeqsucc"), Field1: makeNimstrLit("\xE2\x8B\x9F")}, {Field0: makeNimstrLit("\\Join"), Field1: makeNimstrLit("\xE2\x8B\x88")}, {Field0: makeNimstrLit("\\simcolon"), Field1: makeNimstrLit("\xE2\x88\xBC:")}, {Field0: makeNimstrLit("\\vcentcolon"), Field1: makeNimstrLit(":")}, {Field0: makeNimstrLit("\\ratio"), Field1: makeNimstrLit(":")}, {Field0: makeNimstrLit("\\dashv"), Field1: makeNimstrLit("\xE2\x8A\xA3")}, {Field0: makeNimstrLit("\\le"), Field1: makeNimstrLit("\xE2\x89\xA4")}, {Field0: makeNimstrLit("\\simcoloncolon"), Field1: makeNimstrLit("\xE2\x88\xBC\xE2\x88\xB7")}, {Field0: makeNimstrLit("\\vdash"), Field1: makeNimstrLit("\xE2\x8A\xA2")}, {Field0: makeNimstrLit("\\dblcolon"), Field1: makeNimstrLit("\xE2\x88\xB7")}, {Field0: makeNimstrLit("\x0Doloncolon"), Field1: makeNimstrLit("\xE2\x88\xB7")}, {Field0: makeNimstrLit("\\leq"), Field1: makeNimstrLit("\xE2\x89\xA4")}, {Field0: makeNimstrLit("\\simeq"), Field1: makeNimstrLit("\xE2\x89\x83")}, {Field0: makeNimstrLit("\\vDash"), Field1: makeNimstrLit("\xE2\x8A\xA8")}, {Field0: makeNimstrLit("\\doteq"), Field1: makeNimstrLit("\xE2\x89\x90")}, {Field0: makeNimstrLit("\\leqq"), Field1: makeNimstrLit("\xE2\x89\xA6")}, {Field0: makeNimstrLit("\\smallfrown"), Field1: makeNimstrLit("\xE2\x8C\xA2")}, {Field0: makeNimstrLit("\\Vdash"), Field1: makeNimstrLit("\xE2\x8A\xA9")}, {Field0: makeNimstrLit("\\Doteq"), Field1: makeNimstrLit("\xE2\x89\x91")}, {Field0: makeNimstrLit("\\leqslant"), Field1: makeNimstrLit("\xE2\xA9\xBD")}, {Field0: makeNimstrLit("\\smallsmile"), Field1: makeNimstrLit("\xE2\x8C\xA3")}, {Field0: makeNimstrLit("\\Vvdash"), Field1: makeNimstrLit("\xE2\x8A\xAA")}];
var delimiters_637534221 = [{Field0: makeNimstrLit("("), Field1: makeNimstrLit("(")}, {Field0: makeNimstrLit("\\lparen"), Field1: makeNimstrLit("(")}, {Field0: makeNimstrLit(")"), Field1: makeNimstrLit(")")}, {Field0: makeNimstrLit("\\rparen"), Field1: makeNimstrLit(")")}, {Field0: makeNimstrLit("["), Field1: makeNimstrLit("[")}, {Field0: makeNimstrLit("\\lbrack"), Field1: makeNimstrLit("[")}, {Field0: makeNimstrLit("]"), Field1: makeNimstrLit("]")}, {Field0: makeNimstrLit("\\rbrack"), Field1: makeNimstrLit("]")}, {Field0: makeNimstrLit("\\{"), Field1: makeNimstrLit("{")}, {Field0: makeNimstrLit("\\lbrace"), Field1: makeNimstrLit("{")}, {Field0: makeNimstrLit("\\}"), Field1: makeNimstrLit("}")}, {Field0: makeNimstrLit("\\rbrace"), Field1: makeNimstrLit("}")}, {Field0: makeNimstrLit("\xE2\x9F\xA8"), Field1: makeNimstrLit("\xE2\x9F\xA8")}, {Field0: makeNimstrLit("\\langle"), Field1: makeNimstrLit("\xE2\x9F\xA8")}, {Field0: makeNimstrLit("\\lang"), Field1: makeNimstrLit("\xE2\x9F\xA8")}, {Field0: makeNimstrLit("\xE2\x9F\xA9"), Field1: makeNimstrLit("\xE2\x9F\xA9")}, {Field0: makeNimstrLit("\\rangle"), Field1: makeNimstrLit("\xE2\x9F\xA9")}, {Field0: makeNimstrLit("\\rang"), Field1: makeNimstrLit("\xE2\x9F\xA9")}, {Field0: makeNimstrLit("|"), Field1: makeNimstrLit("\xE2\x88\xA3")}, {Field0: makeNimstrLit("\\vert"), Field1: makeNimstrLit("\xE2\x88\xA3")}, {Field0: makeNimstrLit("\\|"), Field1: makeNimstrLit("\xE2\x88\xA5")}, {Field0: makeNimstrLit("\\Vert"), Field1: makeNimstrLit("\xE2\x88\xA5")}, {Field0: makeNimstrLit("\xE2\x8C\x88"), Field1: makeNimstrLit("\xE2\x8C\x88")}, {Field0: makeNimstrLit("\\lceil"), Field1: makeNimstrLit("\xE2\x8C\x88")}, {Field0: makeNimstrLit("\xE2\x8C\x89"), Field1: makeNimstrLit("\xE2\x8C\x89")}, {Field0: makeNimstrLit("\\rceil"), Field1: makeNimstrLit("\xE2\x8C\x89")}, {Field0: makeNimstrLit("\xE2\x8C\x8A"), Field1: makeNimstrLit("\xE2\x8C\x8A")}, {Field0: makeNimstrLit("\\lfloor"), Field1: makeNimstrLit("\xE2\x8C\x8A")}, {Field0: makeNimstrLit("\xE2\x8C\x8B"), Field1: makeNimstrLit("\xE2\x8C\x8B")}, {Field0: makeNimstrLit("\\rfloor"), Field1: makeNimstrLit("\xE2\x8C\x8B")}, {Field0: makeNimstrLit("\xE2\x9F\xA6"), Field1: makeNimstrLit("\xE2\x9F\xA6")}, {Field0: makeNimstrLit("\\llbracket"), Field1: makeNimstrLit("\xE2\x9F\xA6")}, {Field0: makeNimstrLit("\xE2\x9F\xA7"), Field1: makeNimstrLit("\xE2\x9F\xA7")}, {Field0: makeNimstrLit("\\rrbracket"), Field1: makeNimstrLit("\xE2\x9F\xA7")}];
var letters_637534412 = [{Field0: makeNimstrLit("\\Alpha"), Field1: makeNimstrLit("A")}, {Field0: makeNimstrLit("\\Beta"), Field1: makeNimstrLit("B")}, {Field0: makeNimstrLit("\\Gamma"), Field1: makeNimstrLit("\xCE\x93")}, {Field0: makeNimstrLit("\\Delta"), Field1: makeNimstrLit("\xCE\x94")}, {Field0: makeNimstrLit("\\Epsilon"), Field1: makeNimstrLit("E")}, {Field0: makeNimstrLit("\\Zeta"), Field1: makeNimstrLit("Z")}, {Field0: makeNimstrLit("\\Eta"), Field1: makeNimstrLit("H")}, {Field0: makeNimstrLit("\\Theta"), Field1: makeNimstrLit("\xCE\x98")}, {Field0: makeNimstrLit("\\Iota"), Field1: makeNimstrLit("I")}, {Field0: makeNimstrLit("\\Kappa"), Field1: makeNimstrLit("K")}, {Field0: makeNimstrLit("\\Lambda"), Field1: makeNimstrLit("\xCE\x9B")}, {Field0: makeNimstrLit("\\Mu"), Field1: makeNimstrLit("M")}, {Field0: makeNimstrLit("\\Nu"), Field1: makeNimstrLit("N")}, {Field0: makeNimstrLit("\\Xi"), Field1: makeNimstrLit("\xCE\x9E")}, {Field0: makeNimstrLit("\\Omicron"), Field1: makeNimstrLit("O")}, {Field0: makeNimstrLit("\\Pi"), Field1: makeNimstrLit("\xCE\xA0")}, {Field0: makeNimstrLit("\\Rho"), Field1: makeNimstrLit("P")}, {Field0: makeNimstrLit("\\Sigma"), Field1: makeNimstrLit("\xCE\xA3")}, {Field0: makeNimstrLit("\\Tau"), Field1: makeNimstrLit("T")}, {Field0: makeNimstrLit("\\Upsilon"), Field1: makeNimstrLit("\xCE\xA5")}, {Field0: makeNimstrLit("\\Phi"), Field1: makeNimstrLit("\xCE\xA6")}, {Field0: makeNimstrLit("\\Chi"), Field1: makeNimstrLit("X")}, {Field0: makeNimstrLit("\\Psi"), Field1: makeNimstrLit("\xCE\xA8")}, {Field0: makeNimstrLit("\\Omega"), Field1: makeNimstrLit("\xCE\xA9")}, {Field0: makeNimstrLit("\\varGamma"), Field1: makeNimstrLit("\xCE\x93")}, {Field0: makeNimstrLit("\\varDelta"), Field1: makeNimstrLit("\xCE\x94")}, {Field0: makeNimstrLit("\\varTheta"), Field1: makeNimstrLit("\xCE\x98")}, {Field0: makeNimstrLit("\\varLambda"), Field1: makeNimstrLit("\xCE\x9B")}, {Field0: makeNimstrLit("\\varXi"), Field1: makeNimstrLit("\xCE\x9E")}, {Field0: makeNimstrLit("\\varPi"), Field1: makeNimstrLit("\xCE\xA0")}, {Field0: makeNimstrLit("\\varSigma"), Field1: makeNimstrLit("\xCE\xA3")}, {Field0: makeNimstrLit("\\varUpsilon"), Field1: makeNimstrLit("\xCE\xA5")}, {Field0: makeNimstrLit("\\varPhi"), Field1: makeNimstrLit("\xCE\xA6")}, {Field0: makeNimstrLit("\\varPsi"), Field1: makeNimstrLit("\xCE\xA8")}, {Field0: makeNimstrLit("\\varOmega"), Field1: makeNimstrLit("\xCE\xA9")}, {Field0: makeNimstrLit("\\alpha"), Field1: makeNimstrLit("\xCE\xB1")}, {Field0: makeNimstrLit("\\beta"), Field1: makeNimstrLit("\xCE\xB2")}, {Field0: makeNimstrLit("\\gamma"), Field1: makeNimstrLit("\xCE\xB3")}, {Field0: makeNimstrLit("\\delta"), Field1: makeNimstrLit("\xCE\xB4")}, {Field0: makeNimstrLit("\\epsilon"), Field1: makeNimstrLit("\xCF\xB5")}, {Field0: makeNimstrLit("\\zeta"), Field1: makeNimstrLit("\xCE\xB6")}, {Field0: makeNimstrLit("\\eta"), Field1: makeNimstrLit("\xCE\xB7")}, {Field0: makeNimstrLit("\\theta"), Field1: makeNimstrLit("\xCE\xB8")}, {Field0: makeNimstrLit("\\iota"), Field1: makeNimstrLit("\xCE\xB9")}, {Field0: makeNimstrLit("\\kappa"), Field1: makeNimstrLit("\xCE\xBA")}, {Field0: makeNimstrLit("\\lambda"), Field1: makeNimstrLit("\xCE\xBB")}, {Field0: makeNimstrLit("\\mu"), Field1: makeNimstrLit("\xCE\xBC")}, {Field0: makeNimstrLit("\\nu"), Field1: makeNimstrLit("\xCE\xBD")}, {Field0: makeNimstrLit("\\xi"), Field1: makeNimstrLit("\xCE\xBE")}, {Field0: makeNimstrLit("\\omicron"), Field1: makeNimstrLit("\xCE\xBF")}, {Field0: makeNimstrLit("\\pi"), Field1: makeNimstrLit("\xCF\x80")}, {Field0: makeNimstrLit("\\rho"), Field1: makeNimstrLit("\xCF\x81")}, {Field0: makeNimstrLit("\\sigma"), Field1: makeNimstrLit("\xCF\x83")}, {Field0: makeNimstrLit("\\tau"), Field1: makeNimstrLit("\xCF\x84")}, {Field0: makeNimstrLit("\\upsilon"), Field1: makeNimstrLit("\xCF\x85")}, {Field0: makeNimstrLit("\\phi"), Field1: makeNimstrLit("\xCF\x95")}, {Field0: makeNimstrLit("\\chi"), Field1: makeNimstrLit("\xCF\x87")}, {Field0: makeNimstrLit("\\psi"), Field1: makeNimstrLit("\xCF\x88")}, {Field0: makeNimstrLit("\\omega"), Field1: makeNimstrLit("\xCF\x89")}, {Field0: makeNimstrLit("\\varepsilon"), Field1: makeNimstrLit("\xCE\xB5")}, {Field0: makeNimstrLit("\\varkappa"), Field1: makeNimstrLit("\xCF\xB0")}, {Field0: makeNimstrLit("\\vartheta"), Field1: makeNimstrLit("\xCF\x91")}, {Field0: makeNimstrLit("\\thetasym"), Field1: makeNimstrLit("\xCF\x91")}, {Field0: makeNimstrLit("\\varpi"), Field1: makeNimstrLit("\xCF\x96")}, {Field0: makeNimstrLit("\\varrho"), Field1: makeNimstrLit("\xCF\xB1")}, {Field0: makeNimstrLit("\\varsigma"), Field1: makeNimstrLit("\xCF\x82")}, {Field0: makeNimstrLit("\\varphi"), Field1: makeNimstrLit("\xCF\x86")}, {Field0: makeNimstrLit("\\digamma"), Field1: makeNimstrLit("\xCF\x9D")}, {Field0: makeNimstrLit("\\imath"), Field1: makeNimstrLit("\xEE\x84\xB1")}, {Field0: makeNimstrLit("\\nabla"), Field1: makeNimstrLit("\xE2\x88\x87")}, {Field0: makeNimstrLit("\\Im"), Field1: makeNimstrLit("\xE2\x84\x91")}, {Field0: makeNimstrLit("\\Reals"), Field1: makeNimstrLit("R")}, {Field0: makeNimstrLit("\\OE"), Field1: makeNimstrLit("\xC5\x92")}, {Field0: makeNimstrLit("\\jmath"), Field1: makeNimstrLit("\xC8\xB7")}, {Field0: makeNimstrLit("\\partial"), Field1: makeNimstrLit("\xE2\x88\x82")}, {Field0: makeNimstrLit("\\image"), Field1: makeNimstrLit("\xE2\x84\x91")}, {Field0: makeNimstrLit("\\wp"), Field1: makeNimstrLit("\xE2\x84\x98")}, {Field0: makeNimstrLit("\\o"), Field1: makeNimstrLit("\xC3\xB8")}, {Field0: makeNimstrLit("\\aleph"), Field1: makeNimstrLit("\xE2\x84\xB5")}, {Field0: makeNimstrLit("\\Game"), Field1: makeNimstrLit("\xE2\x85\x81")}, {Field0: makeNimstrLit("\\Bbbk"), Field1: makeNimstrLit("k")}, {Field0: makeNimstrLit("\\weierp"), Field1: makeNimstrLit("\xE2\x84\x98")}, {Field0: makeNimstrLit("\\O"), Field1: makeNimstrLit("\xC3\x98")}, {Field0: makeNimstrLit("\\alef"), Field1: makeNimstrLit("\xE2\x84\xB5")}, {Field0: makeNimstrLit("\\Finv"), Field1: makeNimstrLit("\xE2\x84\xB2")}, {Field0: makeNimstrLit("\\N"), Field1: makeNimstrLit("N")}, {Field0: makeNimstrLit("\\Z"), Field1: makeNimstrLit("Z")}, {Field0: makeNimstrLit("\\ss"), Field1: makeNimstrLit("\xC3\x9F")}, {Field0: makeNimstrLit("\\alefsym"), Field1: makeNimstrLit("\xE2\x84\xB5")}, {Field0: makeNimstrLit("\\cnums"), Field1: makeNimstrLit("C")}, {Field0: makeNimstrLit("\\natnums"), Field1: makeNimstrLit("N")}, {Field0: makeNimstrLit("\\aa"), Field1: makeNimstrLit("\xC3\xA5")}, {Field0: makeNimstrLit("\\i"), Field1: makeNimstrLit("\xC4\xB1")}, {Field0: makeNimstrLit("\\beth"), Field1: makeNimstrLit("\xE2\x84\xB6")}, {Field0: makeNimstrLit("\\Complex"), Field1: makeNimstrLit("C")}, {Field0: makeNimstrLit("\\R"), Field1: makeNimstrLit("R")}, {Field0: makeNimstrLit("\\AA"), Field1: makeNimstrLit("\xC3\x85")}, {Field0: makeNimstrLit("\\j"), Field1: makeNimstrLit("\xC8\xB7")}, {Field0: makeNimstrLit("\\gimel"), Field1: makeNimstrLit("\xE2\x84\xB7")}, {Field0: makeNimstrLit("\\ell"), Field1: makeNimstrLit("\xE2\x84\x93")}, {Field0: makeNimstrLit("\\Re"), Field1: makeNimstrLit("\xE2\x84\x9C")}, {Field0: makeNimstrLit("\\ae"), Field1: makeNimstrLit("\xC3\xA6")}, {Field0: makeNimstrLit("\\daleth"), Field1: makeNimstrLit("\xE2\x84\xB8")}, {Field0: makeNimstrLit("\\hbar"), Field1: makeNimstrLit("\xE2\x84\x8F")}, {Field0: makeNimstrLit("\\real"), Field1: makeNimstrLit("\xE2\x84\x9C")}, {Field0: makeNimstrLit("\\AE"), Field1: makeNimstrLit("\xC3\x86")}, {Field0: makeNimstrLit("\\eth"), Field1: makeNimstrLit("\xC3\xB0")}, {Field0: makeNimstrLit("\\hslash"), Field1: makeNimstrLit("\xE2\x84\x8F")}, {Field0: makeNimstrLit("\\reals"), Field1: makeNimstrLit("R")}, {Field0: makeNimstrLit("\\oe"), Field1: makeNimstrLit("\xC5\x93")}];
var punctuation_637534413 = [{Field0: makeNimstrLit(","), Field1: makeNimstrLit(",")}, {Field0: makeNimstrLit(":"), Field1: makeNimstrLit(":")}];
var symbols_637534435 = [{Field0: makeNimstrLit("\\dots"), Field1: makeNimstrLit("\xE2\x80\xA6")}, {Field0: makeNimstrLit("\\KaTeX"), Field1: makeNimstrLit("K T X\x0A A E ")}, {Field0: makeNimstrLit("\\%"), Field1: makeNimstrLit("%")}, {Field0: makeNimstrLit("\\cdots"), Field1: makeNimstrLit("\xE2\x8B\xAF")}, {Field0: makeNimstrLit("\\LaTeX"), Field1: makeNimstrLit("L T X\x0A A E ")}, {Field0: makeNimstrLit("\\#"), Field1: makeNimstrLit("#")}, {Field0: makeNimstrLit("\\ddots"), Field1: makeNimstrLit("\xE2\x8B\xB1")}, {Field0: makeNimstrLit("\\TeX"), Field1: makeNimstrLit("T X\x0A E ")}, {Field0: makeNimstrLit("\\&"), Field1: makeNimstrLit("&")}, {Field0: makeNimstrLit("\\ldots"), Field1: makeNimstrLit("\xE2\x80\xA6")}, {Field0: makeNimstrLit("\\nabla"), Field1: makeNimstrLit("\xE2\x88\x87")}, {Field0: makeNimstrLit("\\_"), Field1: makeNimstrLit("_")}, {Field0: makeNimstrLit("\\vdots"), Field1: makeNimstrLit("\xE2\x8B\xAE")}, {Field0: makeNimstrLit("\\infty"), Field1: makeNimstrLit("\xE2\x88\x9E")}, {Field0: makeNimstrLit("\\textunderscore"), Field1: makeNimstrLit("_")}, {Field0: makeNimstrLit("\\dotsb"), Field1: makeNimstrLit("\xE2\x8B\xAF")}, {Field0: makeNimstrLit("\\infin"), Field1: makeNimstrLit("\xE2\x88\x9E")}, {Field0: makeNimstrLit("\\--"), Field1: makeNimstrLit("\xE2\x80\x93")}, {Field0: makeNimstrLit("\\dotsc"), Field1: makeNimstrLit("\xE2\x80\xA6")}, {Field0: makeNimstrLit("\\checkmark"), Field1: makeNimstrLit("\xE2\x9C\x93")}, {Field0: makeNimstrLit("\\textendash"), Field1: makeNimstrLit("\xE2\x80\x93")}, {Field0: makeNimstrLit("\\dotsi"), Field1: makeNimstrLit("\xE2\x8B\xAF")}, {Field0: makeNimstrLit("\\dag"), Field1: makeNimstrLit("\xE2\x80\xA0")}, {Field0: makeNimstrLit("\\---"), Field1: makeNimstrLit("\xE2\x80\x94")}, {Field0: makeNimstrLit("\\dotsm"), Field1: makeNimstrLit("\xE2\x8B\xAF")}, {Field0: makeNimstrLit("\\dagger"), Field1: makeNimstrLit("\xE2\x80\xA0")}, {Field0: makeNimstrLit("\\textemdash"), Field1: makeNimstrLit("\xE2\x80\x94")}, {Field0: makeNimstrLit("\\dotso"), Field1: makeNimstrLit("\xE2\x80\xA6")}, {Field0: makeNimstrLit("\\textdagger"), Field1: makeNimstrLit("\xE2\x80\xA0")}, {Field0: makeNimstrLit("\\textasciitilde"), Field1: makeNimstrLit("~")}, {Field0: makeNimstrLit("\\sdot"), Field1: makeNimstrLit("\xE2\x8B\x85")}, {Field0: makeNimstrLit("\\ddag"), Field1: makeNimstrLit("\xE2\x80\xA1")}, {Field0: makeNimstrLit("\\textasciicircum"), Field1: makeNimstrLit("^")}, {Field0: makeNimstrLit("\\mathellipsis"), Field1: makeNimstrLit("\xE2\x80\xA6")}, {Field0: makeNimstrLit("\\ddagger"), Field1: makeNimstrLit("\xE2\x80\xA1")}, {Field0: makeNimstrLit("`"), Field1: makeNimstrLit("\xE2\x80\x98")}, {Field0: makeNimstrLit("\\textellipsis"), Field1: makeNimstrLit("\xE2\x80\xA6")}, {Field0: makeNimstrLit("\\textdaggerdbl"), Field1: makeNimstrLit("\xE2\x80\xA1")}, {Field0: makeNimstrLit("\\textquoteleft"), Field1: makeNimstrLit("\xE2\x80\x98")}, {Field0: makeNimstrLit("\\Box"), Field1: makeNimstrLit("\xE2\x96\xA1")}, {Field0: makeNimstrLit("\\Dagger"), Field1: makeNimstrLit("\xE2\x80\xA1")}, {Field0: makeNimstrLit("\\lq"), Field1: makeNimstrLit("\xE2\x80\x98")}, {Field0: makeNimstrLit("\\square"), Field1: makeNimstrLit("\xE2\x96\xA1")}, {Field0: makeNimstrLit("\\angle"), Field1: makeNimstrLit("\xE2\x88\xA0")}, {Field0: makeNimstrLit("\\textquoteright"), Field1: makeNimstrLit("\xE2\x80\x99")}, {Field0: makeNimstrLit("\\blacksquare"), Field1: makeNimstrLit("\xE2\x96\xA0")}, {Field0: makeNimstrLit("\\measuredangle"), Field1: makeNimstrLit("\xE2\x88\xA1")}, {Field0: makeNimstrLit("\\rq"), Field1: makeNimstrLit("\xE2\x80\xB2")}, {Field0: makeNimstrLit("\\triangle"), Field1: makeNimstrLit("\xE2\x96\xB3")}, {Field0: makeNimstrLit("\\sphericalangle"), Field1: makeNimstrLit("\xE2\x88\xA2")}, {Field0: makeNimstrLit("\\textquotedblleft"), Field1: makeNimstrLit("\xE2\x80\x9C")}, {Field0: makeNimstrLit("\\triangledown"), Field1: makeNimstrLit("\xE2\x96\xBD")}, {Field0: makeNimstrLit("\\top"), Field1: makeNimstrLit("\xE2\x8A\xA4")}, {Field0: makeNimstrLit("\""), Field1: makeNimstrLit("\"")}, {Field0: makeNimstrLit("\\triangleleft"), Field1: makeNimstrLit("\xE2\x97\x83")}, {Field0: makeNimstrLit("\\bot"), Field1: makeNimstrLit("\xE2\x8A\xA5")}, {Field0: makeNimstrLit("\\textquotedblright"), Field1: makeNimstrLit("\xE2\x80\x9D")}, {Field0: makeNimstrLit("\\triangleright"), Field1: makeNimstrLit("\xE2\x96\xB9")}, {Field0: makeNimstrLit("\\$"), Field1: makeNimstrLit("$")}, {Field0: makeNimstrLit("\\colon"), Field1: makeNimstrLit(":")}, {Field0: makeNimstrLit("\\bigtriangledown"), Field1: makeNimstrLit("\xE2\x96\xBD")}, {Field0: makeNimstrLit("\\textdollar"), Field1: makeNimstrLit("$")}, {Field0: makeNimstrLit("\\backprime"), Field1: makeNimstrLit("\xE2\x80\xB5")}, {Field0: makeNimstrLit("\\bigtriangleup"), Field1: makeNimstrLit("\xE2\x96\xB3")}, {Field0: makeNimstrLit("\\pounds"), Field1: makeNimstrLit("\xC2\xA3")}, {Field0: makeNimstrLit("\\prime"), Field1: makeNimstrLit("\xE2\x80\xB2")}, {Field0: makeNimstrLit("\\blacktriangle"), Field1: makeNimstrLit("\xE2\x96\xB2")}, {Field0: makeNimstrLit("\\mathsterling"), Field1: makeNimstrLit("\xC2\xA3")}, {Field0: makeNimstrLit("\\textless"), Field1: makeNimstrLit("<")}, {Field0: makeNimstrLit("\\blacktriangledown"), Field1: makeNimstrLit("\xE2\x96\xBC")}, {Field0: makeNimstrLit("\\textsterling"), Field1: makeNimstrLit("\xC2\xA3")}, {Field0: makeNimstrLit("\\textgreater"), Field1: makeNimstrLit(">")}, {Field0: makeNimstrLit("\\blacktriangleleft"), Field1: makeNimstrLit("\xE2\x97\x80")}, {Field0: makeNimstrLit("\\yen"), Field1: makeNimstrLit("\xC2\xA5")}, {Field0: makeNimstrLit("\\textbar"), Field1: makeNimstrLit("|")}, {Field0: makeNimstrLit("\\blacktriangleright"), Field1: makeNimstrLit("\xE2\x96\xB6")}, {Field0: makeNimstrLit("\\surd"), Field1: makeNimstrLit("\xE2\x88\x9A")}, {Field0: makeNimstrLit("\\textbardbl"), Field1: makeNimstrLit("\xE2\x88\xA5")}, {Field0: makeNimstrLit("\\diamond"), Field1: makeNimstrLit("\xE2\x8B\x84")}, {Field0: makeNimstrLit("\\degree"), Field1: makeNimstrLit("\xC2\xB0")}, {Field0: makeNimstrLit("\\textbraceleft"), Field1: makeNimstrLit("{")}, {Field0: makeNimstrLit("\\Diamond"), Field1: makeNimstrLit("\xE2\x97\x8A")}, {Field0: makeNimstrLit("\\textdegree"), Field1: makeNimstrLit("\xC2\xB0")}, {Field0: makeNimstrLit("\\textbraceright"), Field1: makeNimstrLit("}")}, {Field0: makeNimstrLit("\\lozenge"), Field1: makeNimstrLit("\xE2\x97\x8A")}, {Field0: makeNimstrLit("\\mho"), Field1: makeNimstrLit("\xE2\x84\xA7")}, {Field0: makeNimstrLit("\\textbackslash"), Field1: makeNimstrLit("\\")}, {Field0: makeNimstrLit("\\blacklozenge"), Field1: makeNimstrLit("\xE2\xA7\xAB")}, {Field0: makeNimstrLit("\\diagdown"), Field1: makeNimstrLit("\xE2\x95\xB2")}, {Field0: makeNimstrLit("\\P"), Field1: makeNimstrLit("\xC2\xB6")}, {Field0: makeNimstrLit("\\star"), Field1: makeNimstrLit("\xE2\x8B\x86")}, {Field0: makeNimstrLit("\\diagup"), Field1: makeNimstrLit("\xE2\x95\xB1")}, {Field0: makeNimstrLit("\\S"), Field1: makeNimstrLit("\xC2\xA7")}, {Field0: makeNimstrLit("\\bigstar"), Field1: makeNimstrLit("\xE2\x98\x85")}, {Field0: makeNimstrLit("\\flat"), Field1: makeNimstrLit("\xE2\x99\xAD")}, {Field0: makeNimstrLit("\\sect"), Field1: makeNimstrLit("\xC2\xA7")}, {Field0: makeNimstrLit("\\clubsuit"), Field1: makeNimstrLit("\xE2\x99\xA3")}, {Field0: makeNimstrLit("\\natural"), Field1: makeNimstrLit("\xE2\x99\xAE")}, {Field0: makeNimstrLit("\\copyright"), Field1: makeNimstrLit("\xC2\xA9")}, {Field0: makeNimstrLit("\\clubs"), Field1: makeNimstrLit("\xE2\x99\xA3")}, {Field0: makeNimstrLit("\\sharp"), Field1: makeNimstrLit("\xE2\x99\xAF")}, {Field0: makeNimstrLit("\\circledR"), Field1: makeNimstrLit("\xC2\xAE")}, {Field0: makeNimstrLit("\\diamondsuit"), Field1: makeNimstrLit("\xE2\x99\xA2")}, {Field0: makeNimstrLit("\\heartsuit"), Field1: makeNimstrLit("\xE2\x99\xA1")}, {Field0: makeNimstrLit("\\textregistered"), Field1: makeNimstrLit("\xC2\xAE")}, {Field0: makeNimstrLit("\\diamonds"), Field1: makeNimstrLit("\xE2\x99\xA2")}, {Field0: makeNimstrLit("\\hearts"), Field1: makeNimstrLit("\xE2\x99\xA1")}, {Field0: makeNimstrLit("\\circledS"), Field1: makeNimstrLit("\xE2\x93\x88")}, {Field0: makeNimstrLit("\\spadesuit"), Field1: makeNimstrLit("\xE2\x99\xA0")}, {Field0: makeNimstrLit("\\spades"), Field1: makeNimstrLit("\xE2\x99\xA0")}, {Field0: makeNimstrLit("\\maltese"), Field1: makeNimstrLit("\xE2\x9C\xA0")}, {Field0: makeNimstrLit("\\minuso"), Field1: makeNimstrLit("\xE2\xA6\xB5")}];
var textOperators_637534436 = [{Field0: makeNimstrLit("\\arcsin"), Field1: makeNimstrLit("arcsin")}, {Field0: makeNimstrLit("\\cosec"), Field1: makeNimstrLit("cosec")}, {Field0: makeNimstrLit("\\deg"), Field1: makeNimstrLit("deg")}, {Field0: makeNimstrLit("\\sec"), Field1: makeNimstrLit("sec")}, {Field0: makeNimstrLit("\\arccos"), Field1: makeNimstrLit("arccos")}, {Field0: makeNimstrLit("\\cosh"), Field1: makeNimstrLit("cosh")}, {Field0: makeNimstrLit("\\dim"), Field1: makeNimstrLit("dim")}, {Field0: makeNimstrLit("\\sin"), Field1: makeNimstrLit("sin")}, {Field0: makeNimstrLit("\\arctan"), Field1: makeNimstrLit("arctan")}, {Field0: makeNimstrLit("\\cot"), Field1: makeNimstrLit("cot")}, {Field0: makeNimstrLit("\\exp"), Field1: makeNimstrLit("exp")}, {Field0: makeNimstrLit("\\sinh"), Field1: makeNimstrLit("sinh")}, {Field0: makeNimstrLit("\\arctg"), Field1: makeNimstrLit("arctg")}, {Field0: makeNimstrLit("\\cotg"), Field1: makeNimstrLit("cotg")}, {Field0: makeNimstrLit("\\hom"), Field1: makeNimstrLit("hom")}, {Field0: makeNimstrLit("\\sh"), Field1: makeNimstrLit("sh")}, {Field0: makeNimstrLit("\\arcctg"), Field1: makeNimstrLit("arcctg")}, {Field0: makeNimstrLit("\\coth"), Field1: makeNimstrLit("coth")}, {Field0: makeNimstrLit("\\ker"), Field1: makeNimstrLit("ker")}, {Field0: makeNimstrLit("\\tan"), Field1: makeNimstrLit("tan")}, {Field0: makeNimstrLit("\\arg"), Field1: makeNimstrLit("arg")}, {Field0: makeNimstrLit("\\csc"), Field1: makeNimstrLit("csc")}, {Field0: makeNimstrLit("\\lg"), Field1: makeNimstrLit("lg")}, {Field0: makeNimstrLit("\\tanh"), Field1: makeNimstrLit("tanh")}, {Field0: makeNimstrLit("\\ch"), Field1: makeNimstrLit("ch")}, {Field0: makeNimstrLit("\\ctg"), Field1: makeNimstrLit("ctg")}, {Field0: makeNimstrLit("\\ln"), Field1: makeNimstrLit("ln")}, {Field0: makeNimstrLit("\\tg"), Field1: makeNimstrLit("tg")}, {Field0: makeNimstrLit("\\cos"), Field1: makeNimstrLit("cos")}, {Field0: makeNimstrLit("\\cth"), Field1: makeNimstrLit("cth")}, {Field0: makeNimstrLit("\\log"), Field1: makeNimstrLit("log")}, {Field0: makeNimstrLit("\\th"), Field1: makeNimstrLit("th")}, {Field0: makeNimstrLit("\\argmax"), Field1: makeNimstrLit("arg\xE2\x80\x89max")}, {Field0: makeNimstrLit("\\injlim"), Field1: makeNimstrLit("inj\xE2\x80\x89lim")}, {Field0: makeNimstrLit("\\min"), Field1: makeNimstrLit("min")}, {Field0: makeNimstrLit("\\argmin"), Field1: makeNimstrLit("arg\xE2\x80\x89min")}, {Field0: makeNimstrLit("\\lim"), Field1: makeNimstrLit("lim")}, {Field0: makeNimstrLit("\\plim"), Field1: makeNimstrLit("plim")}, {Field0: makeNimstrLit("\\det"), Field1: makeNimstrLit("det")}, {Field0: makeNimstrLit("\\liminf"), Field1: makeNimstrLit("lim inf")}, {Field0: makeNimstrLit("\\Pr"), Field1: makeNimstrLit("Pr")}, {Field0: makeNimstrLit("\\gcd"), Field1: makeNimstrLit("gcd")}, {Field0: makeNimstrLit("\\limsup"), Field1: makeNimstrLit("lim sup")}, {Field0: makeNimstrLit("\\projlim"), Field1: makeNimstrLit("proj lim")}, {Field0: makeNimstrLit("\\inf"), Field1: makeNimstrLit("inf")}, {Field0: makeNimstrLit("\\max"), Field1: makeNimstrLit("max")}, {Field0: makeNimstrLit("\\sup"), Field1: makeNimstrLit("sup")}];
var simpleDiacritics_637534434 = [{Field0: makeNimstrLit("\\acute"), Field1: {Field0: makeNimstrLit("\xCC\x81"), Field1: makeNimstrLit("\xCB\x8F")}}, {Field0: makeNimstrLit("\\bar"), Field1: {Field0: makeNimstrLit("\xCC\x84"), Field1: makeNimstrLit("_")}}, {Field0: makeNimstrLit("\\breve"), Field1: {Field0: makeNimstrLit("\xCC\x86"), Field1: makeNimstrLit("\xE2\x8F\x91")}}, {Field0: makeNimstrLit("\\check"), Field1: {Field0: makeNimstrLit("\xCC\x8C"), Field1: makeNimstrLit("\xCB\x87")}}, {Field0: makeNimstrLit("\\dot"), Field1: {Field0: makeNimstrLit("\xCC\x87"), Field1: makeNimstrLit(".")}}, {Field0: makeNimstrLit("\\ddot"), Field1: {Field0: makeNimstrLit("\xCC\x88"), Field1: makeNimstrLit("\xC2\xA8")}}, {Field0: makeNimstrLit("\\grave"), Field1: {Field0: makeNimstrLit("\xCC\x80"), Field1: makeNimstrLit("\xCB\x8E")}}, {Field0: makeNimstrLit("\\hat"), Field1: {Field0: makeNimstrLit("\xCC\x82"), Field1: makeNimstrLit("\xEA\x9E\x88")}}, {Field0: makeNimstrLit("\\tilde"), Field1: {Field0: makeNimstrLit("\xCC\x83"), Field1: makeNimstrLit("\xCB\xB7")}}, {Field0: makeNimstrLit("\\vec"), Field1: {Field0: makeNimstrLit("\xE2\x83\x97"), Field1: makeNimstrLit("\xE2\x86\x92")}}];
var ConstSet82 = setConstr(1);
var ConstSet83 = setConstr(0);
var ConstSet84 = setConstr(1);
var ConstSet85 = setConstr(1);
var ConstSet86 = setConstr(0);
var ConstSet87 = setConstr(1);
var ConstSet88 = setConstr(1);
var ConstSet89 = setConstr(0);

function divInt(a_33556953, b_33556954) {
        if (b_33556954 == 0) raiseDivByZero();
    if (b_33556954 == -1 && a_33556953 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556953 / b_33556954);
  

  
}
    var alignFuncs_687866765 = [HEX3Aanonymous_687866753, HEX3Aanonymous_687866757, HEX3Aanonymous_687866761];
var ConstSet90 = setConstr(1);
var ConstSet91 = setConstr(1);
var ConstSet92 = setConstr(0);
var ConstSet93 = setConstr(1);
var ConstSet94 = setConstr(1);
var ConstSet95 = setConstr(0);
var ConstSet96 = setConstr(0);

function modInt(a_33556957, b_33556958) {
        if (b_33556958 == 0) raiseDivByZero();
    if (b_33556958 == -1 && a_33556957 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556957 % b_33556958);
  

  
}
      var delimiterParts_620758385 = {data: [{Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 132032417, Field1: makeNimstrLit("\xE2\x88\xA5"), Field2: {Field0: makeNimstrLit("\xE2\x95\x91"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x91")}}, {Field0: 1632932802, Field1: makeNimstrLit("["), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA1"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA3")}}, {Field0: -289087198, Field1: makeNimstrLit("\xE2\x9F\xA7"), Field2: {Field0: makeNimstrLit("\xE2\x95\x96"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x9C")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -436772347, Field1: makeNimstrLit(")"), Field2: {Field0: makeNimstrLit("\xE2\x8E\x9E"), Field1: makeNimstrLit("\xE2\x8E\x9F"), Field2: makeNimstrLit("\xE2\x8E\xA0")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -1827680438, Field1: makeNimstrLit("\xE2\x8C\x88"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA1"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA2")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 501150701, Field1: makeNimstrLit("("), Field2: {Field0: makeNimstrLit("\xE2\x8E\x9B"), Field1: makeNimstrLit("\xE2\x8E\x9C"), Field2: makeNimstrLit("\xE2\x8E\x9D")}}, {Field0: 243936301, Field1: makeNimstrLit("\xE2\x8C\x8A"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA2"), Field1: makeNimstrLit("\xE2\x8E\xA2"), Field2: makeNimstrLit("\xE2\x8E\xA3")}}, {Field0: 1380037103, Field1: makeNimstrLit("\xE2\x9F\xA6"), Field2: {Field0: makeNimstrLit("\xE2\x95\x93"), Field1: makeNimstrLit("\xE2\x95\x91"), Field2: makeNimstrLit("\xE2\x95\x99")}}, {Field0: 1862135120, Field1: makeNimstrLit("]"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA4"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA6")}}, {Field0: -696588431, Field1: makeNimstrLit("\xE2\x8C\x8B"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA5"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA6")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -1377921419, Field1: makeNimstrLit("\xE2\x88\xA3"), Field2: {Field0: makeNimstrLit("\xE2\x94\x82"), Field1: makeNimstrLit("\xE2\x94\x82"), Field2: makeNimstrLit("\xE2\x94\x82")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: -2091933701, Field1: makeNimstrLit("\xE2\x8C\x89"), Field2: {Field0: makeNimstrLit("\xE2\x8E\xA4"), Field1: makeNimstrLit("\xE2\x8E\xA5"), Field2: makeNimstrLit("\xE2\x8E\xA5")}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}, {Field0: 0, Field1: [], Field2: {Field0: [], Field1: [], Field2: []}}], counter: 12};
var ConstSet97 = setConstr(1);
var ConstSet98 = setConstr(1);
var ConstSet99 = setConstr(0);
var ConstSet100 = setConstr(1);
var ConstSet101 = setConstr(1);
var ConstSet102 = setConstr(0);
var ConstSet103 = setConstr(1);
var ConstSet104 = setConstr(1);
var ConstSet105 = setConstr(0);
var ConstSet106 = setConstr(1);
var ConstSet107 = setConstr(1);
var ConstSet108 = setConstr(0);
var ConstSet109 = setConstr(1);
var ConstSet110 = setConstr(0);
var ConstSet111 = setConstr(1);
var ConstSet112 = setConstr(0);
var ConstSet113 = setConstr(1);
var ConstSet114 = setConstr(1);
var ConstSet115 = setConstr(0);
var ConstSet116 = setConstr(0);
var ConstSet117 = setConstr(1);
var ConstSet118 = setConstr(0);
var ConstSet119 = setConstr(1);
var ConstSet120 = setConstr(0);
var ConstSet121 = setConstr(1);
var ConstSet122 = setConstr(0);
var ConstSet123 = setConstr(1);
var ConstSet124 = setConstr(0);
var ConstSet125 = setConstr(1);
var ConstSet126 = setConstr(0);
var ConstSet127 = setConstr(1);
var ConstSet128 = setConstr(0);
var ConstSet129 = setConstr(1);
var ConstSet130 = setConstr(1);
var ConstSet131 = setConstr(3, 4);
var ConstSet132 = setConstr(3, 4);
var ConstSet133 = setConstr(1, 4, 2, 3, 8);
var ConstSet134 = setConstr(1);
var ConstSet135 = setConstr(1);
var ConstSet136 = setConstr(0);
var ConstSet137 = setConstr(0);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_1140850850 = [0];

function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !((ConstSet1[ti_33557133.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557134;

}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
    switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557147.sons.length; i++) {
      nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
    }
    
      break;
    case 3:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }
    
      break;
    }

  
}

function succeedImpl_1090520053(inputInHEX60gensym43_1090520054, valueInHEX60gensym43_1090520055, tailInHEX60gensym43_1090520056) {
  var result_1090520058 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1090520058 = nimCopy(result_1090520058, {kind: 0, value: nimCopy(null, valueInHEX60gensym43_1090520055, NTI33554439), tail: nimCopy(null, tailInHEX60gensym43_1090520056, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_1090520054, NTI33554439), expected: []}, NTI1090519172);

  return result_1090520058;

}

function failImpl_1090520060(inputInHEX60gensym43_1090520061, expectedInHEX60gensym43_1090520062, tailInHEX60gensym43_1090520063) {
  var result_1090520065 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1090520065 = nimCopy(result_1090520065, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym43_1090520062, NTI1090520083), tail: nimCopy(null, tailInHEX60gensym43_1090520063, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym43_1090520061, NTI33554439), value: []}, NTI1090519172);

  return result_1090520065;

}

function succeedImpl_1090520089(inputInHEX60gensym45_1090520090, valueInHEX60gensym45_1090520091, tailInHEX60gensym45_1090520092) {
  var result_1090520094 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1090520094 = nimCopy(result_1090520094, {kind: 0, value: valueInHEX60gensym45_1090520091, tail: nimCopy(null, tailInHEX60gensym45_1090520092, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_1090520090, NTI33554439), expected: []}, NTI1090519270);

  return result_1090520094;

}

function failImpl_1090520096(inputInHEX60gensym45_1090520097, expectedInHEX60gensym45_1090520098, tailInHEX60gensym45_1090520099) {
  var result_1090520101 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1090520101 = nimCopy(result_1090520101, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym45_1090520098, NTI1090520117), tail: nimCopy(null, tailInHEX60gensym45_1090520099, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_1090520097, NTI33554439), value: 0}, NTI1090519270);

  return result_1090520101;

}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
          if (x_33556421[x_33556421_Idx] === null) { x_33556421[x_33556421_Idx] = []; }
      var off = x_33556421[x_33556421_Idx].length;
      x_33556421[x_33556421_Idx].length += y_33556422.length;
      for (var i = 0; i < y_33556422.length; ++i) {
        x_33556421[x_33556421_Idx][off+i] = y_33556422.charCodeAt(i);
      }
    

  
}

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

    result_33556829 = new Array(len_33556828); for (var i = 0 ; i < len_33556828 ; ++i) { result_33556829[i] = null; }
  return result_33556829;

}

function unhandledException(e_33556664) {
    var buf_33556665 = [[]];
    if (!(((e_33556664.message).length == 0))) {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);;
    }
    else {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));;
    add_33556420(buf_33556665, 0, e_33556664.name);
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556666 = toJSStr(buf_33556665[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556666);
  }
  else {
    throw cbuf_33556666;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556939) {
        if (a_33556939 > 2147483647 || a_33556939 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_1090520272 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1090520272 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_1090520272;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_1090520272 = addInt(i_1090520272, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function raiseIndexError(i_33556755, a_33556756, b_33556757) {
    var Temporary1;

    if ((b_33556757 < a_33556756)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556755) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556756) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556757) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function HEX5BHEX5D_654314667(s_654314670, x_654314671) {
  var result_654314672 = [];

    var a_654314674 = x_654314671.a;
    var L_654314676 = addInt(subInt(subInt((s_654314670).length, x_654314671.b), a_654314674), 1);
    result_654314672 = nimCopy(null, mnewString(chckRange(L_654314676, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_654314681 = 0;
      var i_1090520277 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1090520277 < L_654314676)) break Label3;
            i_654314681 = i_1090520277;
            result_654314672[chckIndx(i_654314681, 0, (result_654314672).length - 1)] = s_654314670[chckIndx(addInt(i_654314681, a_654314674), 0, (s_654314670).length - 1)];
            i_1090520277 = addInt(i_1090520277, 1);
          }
      } while (false);
    } while (false);

  return result_654314672;

}

function HEX2EHEX2E_654314640(a_654314643, b_654314644) {
  var result_654314647 = ({a: 0, b: 0});

    result_654314647 = nimCopy(result_654314647, {a: a_654314643, b: b_654314644}, NTI654321832);

  return result_654314647;

}

function nsuFindChar(s_704644597, sub_704644598, start_704644599, last_704644600) {
    var Temporary1;

  var result_704644601 = 0;

  BeforeRet: do {
    if ((last_704644600 == 0)) {
    Temporary1 = (s_704644597).length - 1;
    }
    else {
    Temporary1 = last_704644600;
    }
    
    var last_704644602 = Temporary1;
    Label2: do {
      var i_704644612 = 0;
      var colontmp__1090520289 = 0;
      colontmp__1090520289 = start_704644599;
      var res_1090520290 = colontmp__1090520289;
      Label3: do {
          Label4: while (true) {
          if (!(res_1090520290 <= last_704644602)) break Label4;
            i_704644612 = res_1090520290;
            if ((sub_704644598 == s_704644597[chckIndx(i_704644612, 0, (s_704644597).length - 1)])) {
            result_704644601 = i_704644612;
            break BeforeRet;
            }
            
            res_1090520290 = addInt(res_1090520290, 1);
          }
      } while (false);
    } while (false);
    result_704644601 = -1;
    break BeforeRet;
  } while (false);

  return result_704644601;

}

function fill_704644539(a_704644541, value_704644542) {
    var xHEX60gensym166_704644548 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(xHEX60gensym166_704644548 <= (a_704644541).length - 1)) break Label2;
          a_704644541[chckIndx(xHEX60gensym166_704644548, 0, (a_704644541).length - 1)] = value_704644542;
          xHEX60gensym166_704644548 = addInt(xHEX60gensym166_704644548, 1);
        }
    } while (false);

  
}

function nsuInitSkipTable(a_704644536, sub_704644537) {
    var m_704644538 = (sub_704644537).length;
    fill_704644539(a_704644536, m_704644538);
    Label1: do {
      var i_704644557 = 0;
      var colontmp__1090520293 = 0;
      colontmp__1090520293 = subInt(m_704644538, 1);
      var i_1090520294 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1090520294 < colontmp__1090520293)) break Label3;
            i_704644557 = i_1090520294;
            a_704644536[chckIndx(sub_704644537[chckIndx(i_704644557, 0, (sub_704644537).length - 1)], 0, (a_704644536).length - 1)] = subInt(subInt(m_704644538, 1), i_704644557);
            i_1090520294 = addInt(i_1090520294, 1);
          }
      } while (false);
    } while (false);

  
}

function nsuFindStrA(a_704644577, s_704644578, sub_704644579, start_704644580, last_704644581) {
    var Temporary1;

  var result_704644582 = 0;

  BeforeRet: do {
    if ((last_704644581 == 0)) {
    Temporary1 = (s_704644578).length - 1;
    }
    else {
    Temporary1 = last_704644581;
    }
    
    var last_704644583 = Temporary1;
    var subLast_704644584 = subInt((sub_704644579).length, 1);
    if ((subLast_704644584 == -1)) {
    result_704644582 = start_704644580;
    break BeforeRet;
    }
    
    var skip_704644585 = start_704644580;
    Label2: do {
        Label3: while (true) {
        if (!(subLast_704644584 <= subInt(last_704644583, skip_704644585))) break Label3;
          var i_704644586 = subLast_704644584;
          Label4: do {
              Label5: while (true) {
              if (!(s_704644578[chckIndx(addInt(skip_704644585, i_704644586), 0, (s_704644578).length - 1)] == sub_704644579[chckIndx(i_704644586, 0, (sub_704644579).length - 1)])) break Label5;
                if ((i_704644586 == 0)) {
                result_704644582 = skip_704644585;
                break BeforeRet;
                }
                
                i_704644586 = subInt(i_704644586, 1);
              }
          } while (false);
          skip_704644585 = addInt(skip_704644585, a_704644577[chckIndx(s_704644578[chckIndx(addInt(skip_704644585, subLast_704644584), 0, (s_704644578).length - 1)], 0, (a_704644577).length - 1)]);
        }
    } while (false);
    result_704644582 = -1;
    break BeforeRet;
  } while (false);

  return result_704644582;

}

function nsuFindStr(s_704644630, sub_704644631, start_704644632, last_704644633) {
  var result_704644634 = 0;

  BeforeRet: do {
    if ((subInt((s_704644630).length, start_704644632) < (sub_704644631).length)) {
    result_704644634 = -1;
    break BeforeRet;
    }
    
    if (((sub_704644631).length == 1)) {
    result_704644634 = nsuFindChar(s_704644630, sub_704644631[chckIndx(0, 0, (sub_704644631).length - 1)], start_704644632, last_704644633);
    break BeforeRet;
    }
    
    var a_704644636 = [new Int32Array(256)];
    nsuInitSkipTable(a_704644636[0], sub_704644631);
    result_704644634 = nsuFindStrA(a_704644636[0], s_704644630, sub_704644631, start_704644632, last_704644633);
  } while (false);

  return result_704644634;

}

function findBounds_1090519048(s_1090519049, r_1090519050) {
  var result_1090519051 = {Field0: 0, Field1: 0};

  BeforeRet: do {
    var m_1090519052 = toJSStr(s_1090519049).match(r_1090519050);
    if (!(((m_1090519052) == null))) {
    var start_1090519060 = nsuFindStr(s_1090519049, cstrToNimstr(m_1090519052[chckIndx(0, 0, (m_1090519052).length - 1)]), 0, 0);
    var colontmp__1090520280 = start_1090519060;
    var colontmp__1090520281 = subInt(addInt(start_1090519060, ((m_1090519052[chckIndx(0, 0, (m_1090519052).length - 1)]) == null ? 0 : (m_1090519052[chckIndx(0, 0, (m_1090519052).length - 1)]).length)), 1);
    result_1090519051 = nimCopy(result_1090519051, {Field0: colontmp__1090520280, Field1: colontmp__1090520281}, NTI1090519046);
    break BeforeRet;
    }
    
    var colontmp__1090520282 = -1;
    var colontmp__1090520283 = 0;
    result_1090519051 = nimCopy(result_1090519051, {Field0: colontmp__1090520282, Field1: colontmp__1090520283}, NTI1090519046);
    break BeforeRet;
  } while (false);

  return result_1090519051;

}

function invalidFormatString_704645197() {
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");

  
}

function toLowerAscii_1006632961(c_1006632962) {
  var result_1006632963 = 0;

    if ((ConstSet5[c_1006632962] != undefined)) {
    result_1006632963 = chckRange(addInt(c_1006632962, 32), 0, 255);
    }
    else {
      result_1006632963 = c_1006632962;
    }
    

  return result_1006632963;

}

function nsuCmpIgnoreStyle(a_704643262, b_704643263) {
          var Temporary7;
          var Temporary8;

  var result_704643264 = 0;

  BeforeRet: do {
    var aLenHEX60gensym25_704643273 = (a_704643262).length;
    var bLenHEX60gensym25_704643274 = (b_704643263).length;
    var iHEX60gensym25_704643275 = 0;
    var jHEX60gensym25_704643276 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          Label3: do {
              Label4: while (true) {
              if (!((iHEX60gensym25_704643275 < aLenHEX60gensym25_704643273) && (a_704643262[iHEX60gensym25_704643275] == 95))) break Label4;
                iHEX60gensym25_704643275 += 1;
              }
          } while (false);
          Label5: do {
              Label6: while (true) {
              if (!((jHEX60gensym25_704643276 < bLenHEX60gensym25_704643274) && (b_704643263[jHEX60gensym25_704643276] == 95))) break Label6;
                jHEX60gensym25_704643276 += 1;
              }
          } while (false);
          if ((iHEX60gensym25_704643275 < aLenHEX60gensym25_704643273)) {
          Temporary7 = toLowerAscii_1006632961(a_704643262[iHEX60gensym25_704643275]);
          }
          else {
          Temporary7 = 0;
          }
          
          var aaHEX60gensym25_704643285 = Temporary7;
          if ((jHEX60gensym25_704643276 < bLenHEX60gensym25_704643274)) {
          Temporary8 = toLowerAscii_1006632961(b_704643263[jHEX60gensym25_704643276]);
          }
          else {
          Temporary8 = 0;
          }
          
          var bbHEX60gensym25_704643286 = Temporary8;
          result_704643264 = (aaHEX60gensym25_704643285 - bbHEX60gensym25_704643286);
          if (!((result_704643264 == 0))) {
          break BeforeRet;
          }
          
          if ((aLenHEX60gensym25_704643273 <= iHEX60gensym25_704643275)) {
          if ((bLenHEX60gensym25_704643274 <= jHEX60gensym25_704643276)) {
          result_704643264 = 0;
          break BeforeRet;
          }
          
          result_704643264 = -1;
          break BeforeRet;
          }
          else {
          if ((bLenHEX60gensym25_704643274 <= jHEX60gensym25_704643276)) {
          result_704643264 = 1;
          break BeforeRet;
          }
          }
          iHEX60gensym25_704643275 += 1;
          jHEX60gensym25_704643276 += 1;
        }
    } while (false);
  } while (false);

  return result_704643264;

}

function findNormalized_704645185(x_704645186, inArray_704645187) {
  var result_704645188 = 0;

  BeforeRet: do {
    var i_704645189 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_704645189 < (inArray_704645187).length - 1)) break Label2;
          if ((nsuCmpIgnoreStyle(x_704645186, inArray_704645187[chckIndx(i_704645189, 0, (inArray_704645187).length - 1)]) == 0)) {
          result_704645188 = i_704645189;
          break BeforeRet;
          }
          
          i_704645189 = addInt(i_704645189, 2);
        }
    } while (false);
    result_704645188 = -1;
    break BeforeRet;
  } while (false);

  return result_704645188;

}

function substr_33557922(s_33557923, first_33557924, last_33557925) {
  var result_33557926 = [];

    var first_33557927 = nimMax(first_33557924, 0);
    var L_33557928 = nimMax(addInt(subInt(nimMin(last_33557925, (s_33557923).length - 1), first_33557927), 1), 0);
    result_33557926 = nimCopy(null, mnewString(chckRange(L_33557928, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557933 = 0;
      var colontmp__1090520308 = 0;
      colontmp__1090520308 = subInt(L_33557928, 1);
      var res_1090520309 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1090520309 <= colontmp__1090520308)) break Label3;
            i_33557933 = res_1090520309;
            result_33557926[chckIndx(i_33557933, 0, (result_33557926).length - 1)] = s_33557923[chckIndx(addInt(i_33557933, first_33557927), 0, (s_33557923).length - 1)];
            res_1090520309 = addInt(res_1090520309, 1);
          }
      } while (false);
    } while (false);

  return result_33557926;

}

function nsuAddf(s_704645200, s_704645200_Idx, formatstr_704645201, a_704645202) {
                  var Temporary5;
            var Temporary6;
              var Temporary7;
            var Temporary10;
              var Temporary11;
                var Temporary12;
                  var Temporary15;
              var Temporary16;

    var i_704645204 = 0;
    var num_704645205 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_704645204 < (formatstr_704645201).length)) break Label2;
          if (((formatstr_704645201[chckIndx(i_704645204, 0, (formatstr_704645201).length - 1)] == 36) && (addInt(i_704645204, 1) < (formatstr_704645201).length))) {
          switch (formatstr_704645201[chckIndx(addInt(i_704645204, 1), 0, (formatstr_704645201).length - 1)]) {
          case 35:
            if (((a_704645202).length - 1 < num_704645205)) {
            invalidFormatString_704645197();
            }
            
            s_704645200[s_704645200_Idx].push.apply(s_704645200[s_704645200_Idx], a_704645202[chckIndx(num_704645205, 0, (a_704645202).length - 1)]);;
            i_704645204 = addInt(i_704645204, 2);
            num_704645205 = addInt(num_704645205, 1);
            break;
          case 36:
            addChar(s_704645200[s_704645200_Idx], 36);;
            i_704645204 = addInt(i_704645204, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            var j_704645221 = 0;
            i_704645204 = addInt(i_704645204, 1);
            var negative_704645226 = (formatstr_704645201[chckIndx(i_704645204, 0, (formatstr_704645201).length - 1)] == 45);
            if (negative_704645226) {
            i_704645204 = addInt(i_704645204, 1);
            }
            
            Label3: do {
                Label4: while (true) {
                  if (!(i_704645204 < (formatstr_704645201).length)) Temporary5 = false; else {                    Temporary5 = (ConstSet2[formatstr_704645201[chckIndx(i_704645204, 0, (formatstr_704645201).length - 1)]] != undefined);                  }                if (!Temporary5) break Label4;
                  j_704645221 = subInt(addInt(mulInt(j_704645221, 10), formatstr_704645201[chckIndx(i_704645204, 0, (formatstr_704645201).length - 1)]), 48);
                  i_704645204 = addInt(i_704645204, 1);
                }
            } while (false);
            if (!(negative_704645226)) {
            Temporary6 = subInt(j_704645221, 1);
            }
            else {
            Temporary6 = subInt((a_704645202).length, j_704645221);
            }
            
            var idx_704645249 = Temporary6;
              if ((idx_704645249 < 0)) Temporary7 = true; else {                Temporary7 = ((a_704645202).length - 1 < idx_704645249);              }            if (Temporary7) {
            invalidFormatString_704645197();
            }
            
            s_704645200[s_704645200_Idx].push.apply(s_704645200[s_704645200_Idx], a_704645202[chckIndx(idx_704645249, 0, (a_704645202).length - 1)]);;
            break;
          case 123:
            var j_704645253 = addInt(i_704645204, 2);
            var k_704645254 = 0;
            var negative_704645255 = (formatstr_704645201[chckIndx(j_704645253, 0, (formatstr_704645201).length - 1)] == 45);
            if (negative_704645255) {
            j_704645253 = addInt(j_704645253, 1);
            }
            
            var isNumber_704645260 = 0;
            Label8: do {
                Label9: while (true) {
                if (!((j_704645253 < (formatstr_704645201).length) && !((ConstSet3[formatstr_704645201[chckIndx(j_704645253, 0, (formatstr_704645201).length - 1)]] != undefined)))) break Label9;
                  if ((ConstSet4[formatstr_704645201[chckIndx(j_704645253, 0, (formatstr_704645201).length - 1)]] != undefined)) {
                  k_704645254 = subInt(addInt(mulInt(k_704645254, 10), formatstr_704645201[chckIndx(j_704645253, 0, (formatstr_704645201).length - 1)]), 48);
                  if ((isNumber_704645260 == 0)) {
                  isNumber_704645260 = 1;
                  }
                  
                  }
                  else {
                    isNumber_704645260 = -1;
                  }
                  
                  j_704645253 = addInt(j_704645253, 1);
                }
            } while (false);
            if ((isNumber_704645260 == 1)) {
            if (!(negative_704645255)) {
            Temporary10 = subInt(k_704645254, 1);
            }
            else {
            Temporary10 = subInt((a_704645202).length, k_704645254);
            }
            
            var idx_704645282 = Temporary10;
              if ((idx_704645282 < 0)) Temporary11 = true; else {                Temporary11 = ((a_704645202).length - 1 < idx_704645282);              }            if (Temporary11) {
            invalidFormatString_704645197();
            }
            
            s_704645200[s_704645200_Idx].push.apply(s_704645200[s_704645200_Idx], a_704645202[chckIndx(idx_704645282, 0, (a_704645202).length - 1)]);;
            }
            else {
              var x_704645286 = findNormalized_704645185(substr_33557922(formatstr_704645201, addInt(i_704645204, 2), subInt(j_704645253, 1)), a_704645202);
                if (!(0 <= x_704645286)) Temporary12 = false; else {                  Temporary12 = (x_704645286 < (a_704645202).length - 1);                }              if (Temporary12) {
              s_704645200[s_704645200_Idx].push.apply(s_704645200[s_704645200_Idx], a_704645202[chckIndx(addInt(x_704645286, 1), 0, (a_704645202).length - 1)]);;
              }
              else {
              invalidFormatString_704645197();
              }
              
            }
            
            i_704645204 = addInt(j_704645253, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            var j_704645290 = addInt(i_704645204, 1);
            Label13: do {
                Label14: while (true) {
                  if (!(j_704645290 < (formatstr_704645201).length)) Temporary15 = false; else {                    Temporary15 = (ConstSet6[formatstr_704645201[chckIndx(j_704645290, 0, (formatstr_704645201).length - 1)]] != undefined);                  }                if (!Temporary15) break Label14;
                  j_704645290 = addInt(j_704645290, 1);
                }
            } while (false);
            var x_704645299 = findNormalized_704645185(substr_33557922(formatstr_704645201, addInt(i_704645204, 1), subInt(j_704645290, 1)), a_704645202);
              if (!(0 <= x_704645299)) Temporary16 = false; else {                Temporary16 = (x_704645299 < (a_704645202).length - 1);              }            if (Temporary16) {
            s_704645200[s_704645200_Idx].push.apply(s_704645200[s_704645200_Idx], a_704645202[chckIndx(addInt(x_704645299, 1), 0, (a_704645202).length - 1)]);;
            }
            else {
            invalidFormatString_704645197();
            }
            
            i_704645204 = j_704645290;
            break;
          default: 
            invalidFormatString_704645197();
            break;
          }
          }
          else {
            addChar(s_704645200[s_704645200_Idx], formatstr_704645201[chckIndx(i_704645204, 0, (formatstr_704645201).length - 1)]);;
            i_704645204 = addInt(i_704645204, 1);
          }
          
        }
    } while (false);

  
}

function nsuFormatSingleElem(formatstr_704645319, a_704645320) {
  var result_704645321 = [[]];

    result_704645321[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_704645321, 0, formatstr_704645319, [nimCopy(null, a_704645320, NTI33554439)]);

  return result_704645321[0];

}

function HEX5BHEX5D_654312302(s_654312305, x_654312306) {
  var result_654312307 = [];

    var a_654312309 = x_654312306.a;
    var L_654312311 = addInt(subInt(x_654312306.b, a_654312309), 1);
    result_654312307 = nimCopy(null, mnewString(chckRange(L_654312311, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_654312316 = 0;
      var i_1090520312 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_1090520312 < L_654312311)) break Label3;
            i_654312316 = i_1090520312;
            result_654312307[chckIndx(i_654312316, 0, (result_654312307).length - 1)] = s_654312305[chckIndx(addInt(i_654312316, a_654312309), 0, (s_654312305).length - 1)];
            i_1090520312 = addInt(i_1090520312, 1);
          }
      } while (false);
    } while (false);

  return result_654312307;

}

function HEX2EHEX2E_654312275(a_654312278, b_654312279) {
  var result_654312282 = ({a: 0, b: 0});

    result_654312282 = nimCopy(result_654312282, {a: a_654312278, b: b_654312279}, NTI654313427);

  return result_654312282;

}

function regex_1090519554(expect_1090519555) {

function succeedImpl_1090519569(inputInHEX60gensym20_1090519570, valueInHEX60gensym20_1090519571, tailInHEX60gensym20_1090519572) {
  var result_1090519574 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1090519574 = nimCopy(result_1090519574, {kind: 0, value: nimCopy(null, valueInHEX60gensym20_1090519571, NTI33554439), tail: nimCopy(null, tailInHEX60gensym20_1090519572, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_1090519570, NTI33554439), expected: []}, NTI1090519172);

  return result_1090519574;

}

function failImpl_1090519576(inputInHEX60gensym20_1090519577, expectedInHEX60gensym20_1090519578, tailInHEX60gensym20_1090519579) {
  var result_1090519581 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1090519581 = nimCopy(result_1090519581, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym20_1090519578, NTI1090519514), tail: nimCopy(null, tailInHEX60gensym20_1090519579, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_1090519577, NTI33554439), value: []}, NTI1090519172);

  return result_1090519581;

}
      expect_1090519555 = nimCopy(null, expect_1090519555, NTI33554439);
      
function HEX3Aanonymous_1090519584(input_1090519585) {
        var result_1090519587 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1090519588 = succeedImpl_1090519569;
          var fail_1090519589 = failImpl_1090519576;
          var bounds_1090519590 = findBounds_1090519048(input_1090519585, expreg_1090519558);
          if (!((bounds_1090519590["Field0"] == 0))) {
          result_1090519587 = nimCopy(result_1090519587, fail_1090519589(input_1090519585, [nsuFormatSingleElem(makeNimstrLit("match for regex \'$1\'"), expect_1090519555)], input_1090519585), NTI1090519172);
          break BeforeRet;
          }
          
          result_1090519587 = nimCopy(result_1090519587, succeed_1090519588(input_1090519585, HEX5BHEX5D_654312302(input_1090519585, HEX2EHEX2E_654312275(0, bounds_1090519590["Field1"])), HEX5BHEX5D_654314667(input_1090519585, HEX2EHEX2E_654314640(addInt(bounds_1090519590["Field1"], 1), 1))), NTI1090519172);
        } while (false);

        return result_1090519587;

      }

  var result_1090519557 = null;

    var expreg_1090519558 = new RegExp(toJSStr(expect_1090519555));
    Label1: do {
    } while (false);
    result_1090519557 = {body: HEX3Aanonymous_1090519584};

  return result_1090519557;

}

function parse_1090520010(p_1090520012, input_1090520013) {
  var result_1090520014 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_1090520012.body == null)) {
    result_1090520014 = nimCopy(result_1090520014, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_1090520013, NTI33554439), fromInput: nimCopy(null, input_1090520013, NTI33554439), value: 0}, NTI1090519270);
    break BeforeRet;
    }
    
    result_1090520014 = nimCopy(result_1090520014, p_1090520012.body(input_1090520013), NTI1090519270);
  } while (false);

  return result_1090520014;

}

function HEX26_687865962(x_687865964, y_687865965) {
  var result_687865966 = [];

    result_687865966 = new Array(chckRange(addInt((x_687865964).length, (y_687865965).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_687865964).length, (y_687865965).length), 0, 2147483647) ; ++i) { result_687865966[i] = []; }    Label1: do {
      var i_687865984 = 0;
      var colontmp__1090520316 = 0;
      colontmp__1090520316 = subInt((x_687865964).length, 1);
      var res_1090520317 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_1090520317 <= colontmp__1090520316)) break Label3;
            i_687865984 = res_1090520317;
            result_687865966[chckIndx(i_687865984, 0, (result_687865966).length - 1)] = nimCopy(null, x_687865964[chckIndx(i_687865984, 0, (x_687865964).length - 1)], NTI33554439);
            res_1090520317 = addInt(res_1090520317, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_687865992 = 0;
      var colontmp__1090520320 = 0;
      colontmp__1090520320 = subInt((y_687865965).length, 1);
      var res_1090520321 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_1090520321 <= colontmp__1090520320)) break Label6;
            i_687865992 = res_1090520321;
            result_687865966[chckIndx(addInt(i_687865992, (x_687865964).length), 0, (result_687865966).length - 1)] = nimCopy(null, y_687865965[chckIndx(i_687865992, 0, (y_687865965).length - 1)], NTI33554439);
            res_1090520321 = addInt(res_1090520321, 1);
          }
      } while (false);
    } while (false);

  return result_687865966;

}

function reprEnum(e_33557401, typ_33557402) {
  var result_33557403 = [];

    var tmp_33557404 = false;
    var item_33557405 = typ_33557402.node.sons[e_33557401];
    tmp_33557404 = item_33557405 !== undefined
    if (tmp_33557404) {
    result_33557403 = nimCopy(null, makeNimstrLit(item_33557405.name), NTI33554439);
    }
    else {
      result_33557403 = nimCopy(null, (HEX24_335544323(e_33557401) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557403;

}

function HEX7C_1090520154(a_1090520156, b_1090520157) {

function succeedImpl_1090520169(inputInHEX60gensym49_1090520170, valueInHEX60gensym49_1090520171, tailInHEX60gensym49_1090520172) {
  var result_1090520174 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1090520174 = nimCopy(result_1090520174, {kind: 0, value: valueInHEX60gensym49_1090520171, tail: nimCopy(null, tailInHEX60gensym49_1090520172, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_1090520170, NTI33554439), expected: []}, NTI1090519270);

  return result_1090520174;

}

function failImpl_1090520176(inputInHEX60gensym49_1090520177, expectedInHEX60gensym49_1090520178, tailInHEX60gensym49_1090520179) {
  var result_1090520181 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1090520181 = nimCopy(result_1090520181, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym49_1090520178, NTI1090520179), tail: nimCopy(null, tailInHEX60gensym49_1090520179, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym49_1090520177, NTI33554439), value: 0}, NTI1090519270);

  return result_1090520181;

}
      
function HEX3Aanonymous_1090520184(input_1090520185) {
          var Temporary1;
          var Temporary2;

        var result_1090520187 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1090520188 = succeedImpl_1090520169;
          var fail_1090520189 = failImpl_1090520176;
          var result1_1090520202 = parse_1090520010(a_1090520156, input_1090520185);
          if ((result1_1090520202.kind == 0)) {
          result_1090520187 = nimCopy(result_1090520187, result1_1090520202, NTI1090519270);
          break BeforeRet;
          }
          
          var result2_1090520219 = parse_1090520010(b_1090520157, input_1090520185);
          if ((result2_1090520219.kind == 0)) {
          result_1090520187 = nimCopy(result_1090520187, result2_1090520219, NTI1090519270);
          break BeforeRet;
          }
          
          var Temporary1 = result1_1090520202;
          if (ConstSet7[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1090519061)); }
          var Temporary2 = result2_1090520219;
          if (ConstSet8[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
          result_1090520187 = nimCopy(result_1090520187, fail_1090520189(input_1090520185, HEX26_687865962(Temporary1.expected, Temporary2.expected), input_1090520185), NTI1090519270);
        } while (false);

        return result_1090520187;

      }

  var result_1090520158 = null;

    Label1: do {
    } while (false);
    result_1090520158 = {body: HEX3Aanonymous_1090520184};

  return result_1090520158;

}

function contains_637534374(s_637534378, value_637534379) {
  var result_637534380 = false;

    result_637534380 = ((s_637534378.a <= value_637534379) && (value_637534379 <= s_637534378.b));

  return result_637534380;

}

function nsuFormatOpenArray(formatstr_704645308, a_704645309) {
  var result_704645310 = [[]];

    result_704645310[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_704645310, 0, formatstr_704645308, a_704645309);

  return result_704645310[0];

}

function c_1090519479(expect_1090519481) {

function succeedImpl_1090519494(inputInHEX60gensym14_1090519495, valueInHEX60gensym14_1090519496, tailInHEX60gensym14_1090519497) {
  var result_1090519499 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1090519499 = nimCopy(result_1090519499, {kind: 0, value: valueInHEX60gensym14_1090519496, tail: nimCopy(null, tailInHEX60gensym14_1090519497, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym14_1090519495, NTI33554439), expected: []}, NTI1090519270);

  return result_1090519499;

}

function failImpl_1090519501(inputInHEX60gensym14_1090519502, expectedInHEX60gensym14_1090519503, tailInHEX60gensym14_1090519504) {
  var result_1090519506 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1090519506 = nimCopy(result_1090519506, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym14_1090519503, NTI1090519451), tail: nimCopy(null, tailInHEX60gensym14_1090519504, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym14_1090519502, NTI33554439), value: 0}, NTI1090519270);

  return result_1090519506;

}
      expect_1090519481 = nimCopy(null, expect_1090519481, NTI637534749);
      
function HEX3Aanonymous_1090519509(input_1090519510) {
            var Temporary1;

        var result_1090519512 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1090519513 = succeedImpl_1090519494;
          var fail_1090519514 = failImpl_1090519501;
            if (!(0 < (input_1090519510).length)) Temporary1 = false; else {              Temporary1 = contains_637534374(expect_1090519481, input_1090519510[chckIndx(0, 0, (input_1090519510).length - 1)]);            }          if (Temporary1) {
          result_1090519512 = nimCopy(result_1090519512, succeed_1090519513(input_1090519510, input_1090519510[chckIndx(0, 0, (input_1090519510).length - 1)], HEX5BHEX5D_654314667(input_1090519510, HEX2EHEX2E_654314640(1, 1))), NTI1090519270);
          break BeforeRet;
          }
          
          result_1090519512 = nimCopy(result_1090519512, fail_1090519514(input_1090519510, [nsuFormatOpenArray(makeNimstrLit("character from $1..$2"), [nimCharToStr(expect_1090519481.a), nimCharToStr(expect_1090519481.b)])], input_1090519510), NTI1090519270);
        } while (false);

        return result_1090519512;

      }

  var result_1090519483 = null;

    Label1: do {
    } while (false);
    result_1090519483 = {body: HEX3Aanonymous_1090519509};

  return result_1090519483;

}

function HEX2EHEX2E_637534344(a_637534347, b_637534348) {
  var result_637534351 = ({a: 0, b: 0});

    result_637534351 = nimCopy(result_637534351, {a: a_637534347, b: b_637534348}, NTI637534749);

  return result_637534351;

}

function HEX3Aanonymous_1090520068(input_1090520069) {
  var result_1090520071 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    var succeed_1090520072 = succeedImpl_1090520053;
    var fail_1090520073 = failImpl_1090520060;
    if ((0 < (input_1090520069).length)) {
    result_1090520071 = nimCopy(result_1090520071, fail_1090520073(input_1090520069, [makeNimstrLit("EOF")], input_1090520069), NTI1090519172);
    break BeforeRet;
    }
    
    result_1090520071 = nimCopy(result_1090520071, succeed_1090520072(input_1090520069, [], []), NTI1090519172);
  } while (false);

  return result_1090520071;

}

function HEX3Aanonymous_1090520104(input_1090520105) {
  var result_1090520107 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    var succeed_1090520108 = succeedImpl_1090520089;
    var fail_1090520109 = failImpl_1090520096;
    if ((0 < (input_1090520105).length)) {
    result_1090520107 = nimCopy(result_1090520107, succeed_1090520108(input_1090520105, input_1090520105[chckIndx(0, 0, (input_1090520105).length - 1)], HEX5BHEX5D_654314667(input_1090520105, HEX2EHEX2E_654314640(1, 1))), NTI1090519270);
    break BeforeRet;
    }
    
    result_1090520107 = nimCopy(result_1090520107, fail_1090520109(input_1090520105, [makeNimstrLit("any character")], input_1090520105), NTI1090519270);
  } while (false);

  return result_1090520107;

}
Label1: do {
} while (false);
var eofImpl_1090520078 = {body: HEX3Aanonymous_1090520068};
Label2: do {
} while (false);
var anyCharImpl_1090520132 = {body: HEX3Aanonymous_1090520104};
var eof_1090520133 = eofImpl_1090520078;
var anyChar_1090520134 = anyCharImpl_1090520132;
var whitespace_1090520135 = regex_1090519554(makeNimstrLit("\\s+"));
var letter_1090520228 = HEX7C_1090520154(c_1090519479(HEX2EHEX2E_637534344(97, 122)), c_1090519479(HEX2EHEX2E_637534344(65, 90)));
var digit_1090520234 = c_1090519479(HEX2EHEX2E_637534344(48, 57));
var alphanumeric_1090520247 = HEX7C_1090520154(letter_1090520228, digit_1090520234);

function parse_620760120(p_620760122, input_620760123) {
  var result_620760124 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620760122.body == null)) {
    result_620760124 = nimCopy(result_620760124, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620760123, NTI33554439), fromInput: nimCopy(null, input_620760123, NTI33554439), value: []}, NTI620758698);
    break BeforeRet;
    }
    
    result_620760124 = nimCopy(result_620760124, p_620760122.body(input_620760123), NTI620758698);
  } while (false);

  return result_620760124;

}

function map_620760294(a_620760297, fn_620760299) {

function succeedImpl_620760311(inputInHEX60gensym54_620760312, valueInHEX60gensym54_620760313, tailInHEX60gensym54_620760314) {
  var result_620760316 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760316 = nimCopy(result_620760316, {kind: 0, value: nimCopy(null, valueInHEX60gensym54_620760313, NTI452985127), tail: nimCopy(null, tailInHEX60gensym54_620760314, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym54_620760312, NTI33554439), expected: []}, NTI620758259);

  return result_620760316;

}

function failImpl_620760318(inputInHEX60gensym54_620760319, expectedInHEX60gensym54_620760320, tailInHEX60gensym54_620760321) {
  var result_620760323 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760323 = nimCopy(result_620760323, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym54_620760320, NTI620759262), tail: nimCopy(null, tailInHEX60gensym54_620760321, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym54_620760319, NTI33554439), value: []}, NTI620758259);

  return result_620760323;

}
      
function HEX3Aanonymous_620760326(input_620760327) {
            var Temporary2;
          var Temporary3;

        var result_620760329 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620760330 = succeedImpl_620760311;
          var fail_620760331 = failImpl_620760318;
          Label1: do {
            var tempHEX60gensym24_620760344 = parse_620760120(a_620760297, input_620760327);
            if ((tempHEX60gensym24_620760344.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620760344;
            if (ConstSet9[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620760329 = nimCopy(result_620760329, {kind: 1, fromInput: nimCopy(null, input_620760327, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620760344.tail, NTI33554439), value: []}, NTI620758259);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620760350 = nimCopy(null, tempHEX60gensym24_620760344, NTI620758698);
          var Temporary3 = result1_620760350;
          if (ConstSet10[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620760329 = nimCopy(result_620760329, succeed_620760330(input_620760327, fn_620760299(Temporary3.value), result1_620760350.tail), NTI620758259);
          break BeforeRet;
        } while (false);

        return result_620760329;

      }

  var result_620760300 = null;

    Label1: do {
    } while (false);
    result_620760300 = {body: HEX3Aanonymous_620760326};

  return result_620760300;

}

function HEX26_620760162(x_620760164, y_620760165) {
  var result_620760166 = [];

    result_620760166 = new Array(chckRange(addInt((x_620760164).length, (y_620760165).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620760164).length, (y_620760165).length), 0, 2147483647) ; ++i) { result_620760166[i] = []; }    Label1: do {
      var i_620760185 = 0;
      var colontmp__620767384 = 0;
      colontmp__620767384 = subInt((x_620760164).length, 1);
      var res_620767385 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767385 <= colontmp__620767384)) break Label3;
            i_620760185 = res_620767385;
            result_620760166[chckIndx(i_620760185, 0, (result_620760166).length - 1)] = nimCopy(null, x_620760164[chckIndx(i_620760185, 0, (x_620760164).length - 1)], NTI620758253);
            res_620767385 = addInt(res_620767385, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620760193 = 0;
      var colontmp__620767388 = 0;
      colontmp__620767388 = subInt((y_620760165).length, 1);
      var res_620767389 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620767389 <= colontmp__620767388)) break Label6;
            i_620760193 = res_620767389;
            result_620760166[chckIndx(addInt(i_620760193, (x_620760164).length), 0, (result_620760166).length - 1)] = nimCopy(null, y_620760165[chckIndx(i_620760193, 0, (y_620760165).length - 1)], NTI620758253);
            res_620767389 = addInt(res_620767389, 1);
          }
      } while (false);
    } while (false);

  return result_620760166;

}

function HEX26_620760067(a_620760072, b_620760076) {

function succeedImpl_620760091(inputInHEX60gensym48_620760092, valueInHEX60gensym48_620760093, tailInHEX60gensym48_620760094) {
  var result_620760096 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760096 = nimCopy(result_620760096, {kind: 0, value: nimCopy(null, valueInHEX60gensym48_620760093, NTI620759082), tail: nimCopy(null, tailInHEX60gensym48_620760094, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym48_620760092, NTI33554439), expected: []}, NTI620758698);

  return result_620760096;

}

function failImpl_620760098(inputInHEX60gensym48_620760099, expectedInHEX60gensym48_620760100, tailInHEX60gensym48_620760101) {
  var result_620760103 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760103 = nimCopy(result_620760103, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym48_620760100, NTI620759088), tail: nimCopy(null, tailInHEX60gensym48_620760101, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym48_620760099, NTI33554439), value: []}, NTI620758698);

  return result_620760103;

}
      
function HEX3Aanonymous_620760106(input_620760107) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_620760109 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620760110 = succeedImpl_620760091;
          var fail_620760111 = failImpl_620760098;
          Label1: do {
            var tempHEX60gensym26_620760136 = parse_620760120(a_620760072, input_620760107);
            if ((tempHEX60gensym26_620760136.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_620760136;
            if (ConstSet11[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620760109 = nimCopy(result_620760109, {kind: 1, fromInput: nimCopy(null, input_620760107, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym26_620760136.tail, NTI33554439), value: []}, NTI620758698);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620760142 = nimCopy(null, tempHEX60gensym26_620760136, NTI620758698);
          Label3: do {
            var tempHEX60gensym28_620760155 = parse_620760120(b_620760076, result1_620760142.tail);
            if ((tempHEX60gensym28_620760155.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_620760155;
            if (ConstSet12[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620760109 = nimCopy(result_620760109, {kind: 1, fromInput: nimCopy(null, input_620760107, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym28_620760155.tail, NTI33554439), value: []}, NTI620758698);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620760161 = nimCopy(null, tempHEX60gensym28_620760155, NTI620758698);
          var Temporary5 = result1_620760142;
          if (ConstSet13[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          var Temporary6 = result2_620760161;
          if (ConstSet14[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1090519061)); }
          result_620760109 = nimCopy(result_620760109, succeed_620760110(input_620760107, HEX26_620760162(Temporary5.value, Temporary6.value), result2_620760161.tail), NTI620758698);
          break BeforeRet;
        } while (false);

        return result_620760109;

      }

  var result_620760080 = null;

    Label1: do {
    } while (false);
    result_620760080 = {body: HEX3Aanonymous_620760106};

  return result_620760080;

}

function parse_620759604(p_620759606, input_620759607) {
  var result_620759608 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620759606.body == null)) {
    result_620759608 = nimCopy(result_620759608, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620759607, NTI33554439), fromInput: nimCopy(null, input_620759607, NTI33554439), value: []}, NTI620758259);
    break BeforeRet;
    }
    
    result_620759608 = nimCopy(result_620759608, p_620759606.body(input_620759607), NTI620758259);
  } while (false);

  return result_620759608;

}

function map_620759830(a_620759833, fn_620759835) {

function succeedImpl_620759847(inputInHEX60gensym44_620759848, valueInHEX60gensym44_620759849, tailInHEX60gensym44_620759850) {
  var result_620759852 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759852 = nimCopy(result_620759852, {kind: 0, value: nimCopy(null, valueInHEX60gensym44_620759849, NTI620758807), tail: nimCopy(null, tailInHEX60gensym44_620759850, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym44_620759848, NTI33554439), expected: []}, NTI620758698);

  return result_620759852;

}

function failImpl_620759854(inputInHEX60gensym44_620759855, expectedInHEX60gensym44_620759856, tailInHEX60gensym44_620759857) {
  var result_620759859 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759859 = nimCopy(result_620759859, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym44_620759856, NTI620758850), tail: nimCopy(null, tailInHEX60gensym44_620759857, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym44_620759855, NTI33554439), value: []}, NTI620758698);

  return result_620759859;

}
      
function HEX3Aanonymous_620759862(input_620759863) {
            var Temporary2;
          var Temporary3;

        var result_620759865 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620759866 = succeedImpl_620759847;
          var fail_620759867 = failImpl_620759854;
          Label1: do {
            var tempHEX60gensym24_620759880 = parse_620759604(a_620759833, input_620759863);
            if ((tempHEX60gensym24_620759880.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620759880;
            if (ConstSet15[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620759865 = nimCopy(result_620759865, {kind: 1, fromInput: nimCopy(null, input_620759863, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620759880.tail, NTI33554439), value: []}, NTI620758698);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620759886 = nimCopy(null, tempHEX60gensym24_620759880, NTI620758259);
          var Temporary3 = result1_620759886;
          if (ConstSet16[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620759865 = nimCopy(result_620759865, succeed_620759866(input_620759863, fn_620759835(Temporary3.value), result1_620759886.tail), NTI620758698);
          break BeforeRet;
        } while (false);

        return result_620759865;

      }

  var result_620759836 = null;

    Label1: do {
    } while (false);
    result_620759836 = {body: HEX3Aanonymous_620759862};

  return result_620759836;

}

function nop_620759212() {

function succeedImpl_620759225(inputInHEX60gensym34_620759226, valueInHEX60gensym34_620759227, tailInHEX60gensym34_620759228) {
  var result_620759230 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759230 = nimCopy(result_620759230, {kind: 0, value: nimCopy(null, valueInHEX60gensym34_620759227, NTI620758313), tail: nimCopy(null, tailInHEX60gensym34_620759228, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym34_620759226, NTI33554439), expected: []}, NTI620758259);

  return result_620759230;

}

function failImpl_620759244(inputInHEX60gensym34_620759245, expectedInHEX60gensym34_620759246, tailInHEX60gensym34_620759247) {
  var result_620759249 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759249 = nimCopy(result_620759249, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym34_620759246, NTI620758340), tail: nimCopy(null, tailInHEX60gensym34_620759247, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym34_620759245, NTI33554439), value: []}, NTI620758259);

  return result_620759249;

}
      
function HEX3Aanonymous_620759252(input_620759253) {
        var result_620759255 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620759256 = succeedImpl_620759225;
          var fail_620759257 = failImpl_620759244;
          result_620759255 = nimCopy(result_620759255, succeed_620759256(input_620759253, [], input_620759253), NTI620758259);

        return result_620759255;

      }

  var result_620759214 = null;

    Label1: do {
    } while (false);
    result_620759214 = {body: HEX3Aanonymous_620759252};

  return result_620759214;

}

function parse_620758704(p_620758706, input_620758707) {
  var result_620758708 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620758706.body == null)) {
    result_620758708 = nimCopy(result_620758708, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620758707, NTI33554439), fromInput: nimCopy(null, input_620758707, NTI33554439), value: []}, NTI1090519172);
    break BeforeRet;
    }
    
    result_620758708 = nimCopy(result_620758708, p_620758706.body(input_620758707), NTI1090519172);
  } while (false);

  return result_620758708;

}

function map_620759340(a_620759343, fn_620759345) {

function succeedImpl_620759357(inputInHEX60gensym36_620759358, valueInHEX60gensym36_620759359, tailInHEX60gensym36_620759360) {
  var result_620759362 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759362 = nimCopy(result_620759362, {kind: 0, value: nimCopy(null, valueInHEX60gensym36_620759359, NTI1090519234), tail: nimCopy(null, tailInHEX60gensym36_620759360, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym36_620759358, NTI33554439), expected: []}, NTI620758259);

  return result_620759362;

}

function failImpl_620759364(inputInHEX60gensym36_620759365, expectedInHEX60gensym36_620759366, tailInHEX60gensym36_620759367) {
  var result_620759369 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759369 = nimCopy(result_620759369, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym36_620759366, NTI620758440), tail: nimCopy(null, tailInHEX60gensym36_620759367, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym36_620759365, NTI33554439), value: []}, NTI620758259);

  return result_620759369;

}
      
function HEX3Aanonymous_620759372(input_620759373) {
            var Temporary2;
          var Temporary3;

        var result_620759375 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620759376 = succeedImpl_620759357;
          var fail_620759377 = failImpl_620759364;
          Label1: do {
            var tempHEX60gensym24_620759390 = parse_620758704(a_620759343, input_620759373);
            if ((tempHEX60gensym24_620759390.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620759390;
            if (ConstSet17[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620759375 = nimCopy(result_620759375, {kind: 1, fromInput: nimCopy(null, input_620759373, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620759390.tail, NTI33554439), value: []}, NTI620758259);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620759396 = nimCopy(null, tempHEX60gensym24_620759390, NTI1090519172);
          var Temporary3 = result1_620759396;
          if (ConstSet18[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620759375 = nimCopy(result_620759375, succeed_620759376(input_620759373, fn_620759345(Temporary3.value), result1_620759396.tail), NTI620758259);
          break BeforeRet;
        } while (false);

        return result_620759375;

      }

  var result_620759346 = null;

    Label1: do {
    } while (false);
    result_620759346 = {body: HEX3Aanonymous_620759372};

  return result_620759346;

}

function HEX2A_620759204(a_620759206, n_620759207) {
    var Temporary1;
      
function HEX3Aanonymous_620759311(x_620759331) {
        var result_620759334 = [];

          result_620759334 = nimCopy(null, [nimCopy(null, x_620759331, NTI33554439)], NTI1090519234);

        return result_620759334;

      }

function succeedImpl_620759407(inputInHEX60gensym37_620759408, valueInHEX60gensym37_620759409, tailInHEX60gensym37_620759410) {
  var result_620759412 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759412 = nimCopy(result_620759412, {kind: 0, value: nimCopy(null, valueInHEX60gensym37_620759409, NTI620758480), tail: nimCopy(null, tailInHEX60gensym37_620759410, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym37_620759408, NTI33554439), expected: []}, NTI620758259);

  return result_620759412;

}

function failImpl_620759414(inputInHEX60gensym37_620759415, expectedInHEX60gensym37_620759416, tailInHEX60gensym37_620759417) {
  var result_620759419 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759419 = nimCopy(result_620759419, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym37_620759416, NTI620758486), tail: nimCopy(null, tailInHEX60gensym37_620759417, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym37_620759415, NTI33554439), value: []}, NTI620758259);

  return result_620759419;

}
        
function HEX3Aanonymous_620759422(input_620759423) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620759425 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620759426 = succeedImpl_620759407;
            var fail_620759427 = failImpl_620759414;
            Label1: do {
              var tempHEX60gensym38_620759440 = parse_620758704(a_620759206, input_620759423);
              if ((tempHEX60gensym38_620759440.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620759440;
              if (ConstSet19[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
              result_620759425 = nimCopy(result_620759425, {kind: 1, fromInput: nimCopy(null, input_620759423, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym38_620759440.tail, NTI33554439), value: []}, NTI620758259);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620759446 = nimCopy(null, tempHEX60gensym38_620759440, NTI1090519172);
            var Temporary3 = result1_620759446;
            if (ConstSet20[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
            var outputs_620759451 = [nimCopy(null, Temporary3.value, NTI33554439)];
            var lastTail_620759452 = nimCopy(null, result1_620759446.tail, NTI33554439);
            Label4: do {
              var i_620759458 = 0;
              var res_620767398 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620767398 <= n_620759207)) break Label6;
                    i_620759458 = res_620767398;
                    Label7: do {
                      var tempHEX60gensym40_620759471 = parse_620758704(a_620759206, result1_620759446.tail);
                      if ((tempHEX60gensym40_620759471.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620759471;
                      if (ConstSet21[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1090519061)); }
                      result_620759425 = nimCopy(result_620759425, {kind: 1, fromInput: nimCopy(null, input_620759423, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym40_620759471.tail, NTI33554439), value: []}, NTI620758259);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620759446 = nimCopy(result1_620759446, tempHEX60gensym40_620759471, NTI1090519172);
                    if (eqStrings(result1_620759446.tail, lastTail_620759452)) {
                    break Label4;
                    }
                    
                    lastTail_620759452 = nimCopy(null, result1_620759446.tail, NTI33554439);
                    var Temporary9 = result1_620759446;
                    if (ConstSet22[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1090519061)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI33554439);
                    outputs_620759451.push(Temporary10);;
                    res_620767398 = addInt(res_620767398, 1);
                  }
              } while (false);
            } while (false);
            result_620759425 = nimCopy(result_620759425, succeed_620759426(input_620759423, outputs_620759451, result1_620759446.tail), NTI620758259);
          } while (false);

          return result_620759425;

        }

  var result_620759211 = null;

  BeforeRet: do {
    switch (n_620759207) {
    case 0:
      result_620759211 = nop_620759212();
      break BeforeRet;
      break;
    case 1:
      result_620759211 = map_620759340(a_620759206, HEX3Aanonymous_620759311);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620759422};
      break;
    }
    result_620759211 = Temporary1;
  } while (false);

  return result_620759211;

}

function nop_620759675() {

function succeedImpl_620759688(inputInHEX60gensym42_620759689, valueInHEX60gensym42_620759690, tailInHEX60gensym42_620759691) {
  var result_620759693 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759693 = nimCopy(result_620759693, {kind: 0, value: nimCopy(null, valueInHEX60gensym42_620759690, NTI620758705), tail: nimCopy(null, tailInHEX60gensym42_620759691, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym42_620759689, NTI33554439), expected: []}, NTI620758698);

  return result_620759693;

}

function failImpl_620759716(inputInHEX60gensym42_620759717, expectedInHEX60gensym42_620759718, tailInHEX60gensym42_620759719) {
  var result_620759721 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759721 = nimCopy(result_620759721, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym42_620759718, NTI620758738), tail: nimCopy(null, tailInHEX60gensym42_620759719, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym42_620759717, NTI33554439), value: []}, NTI620758698);

  return result_620759721;

}
      
function HEX3Aanonymous_620759724(input_620759725) {
        var result_620759727 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620759728 = succeedImpl_620759688;
          var fail_620759729 = failImpl_620759716;
          result_620759727 = nimCopy(result_620759727, succeed_620759728(input_620759725, [], input_620759725), NTI620758698);

        return result_620759727;

      }

  var result_620759677 = null;

    Label1: do {
    } while (false);
    result_620759677 = {body: HEX3Aanonymous_620759724};

  return result_620759677;

}

function HEX2A_620759662(a_620759664, n_620759665) {
    var Temporary1;
      
function HEX3Aanonymous_620759792(x_620759821) {
        var result_620759824 = [];

          result_620759824 = nimCopy(null, [nimCopy(null, x_620759821, NTI620758253)], NTI620758807);

        return result_620759824;

      }

function succeedImpl_620759897(inputInHEX60gensym45_620759898, valueInHEX60gensym45_620759899, tailInHEX60gensym45_620759900) {
  var result_620759902 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759902 = nimCopy(result_620759902, {kind: 0, value: nimCopy(null, valueInHEX60gensym45_620759899, NTI620758890), tail: nimCopy(null, tailInHEX60gensym45_620759900, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_620759898, NTI33554439), expected: []}, NTI620758698);

  return result_620759902;

}

function failImpl_620759904(inputInHEX60gensym45_620759905, expectedInHEX60gensym45_620759906, tailInHEX60gensym45_620759907) {
  var result_620759909 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759909 = nimCopy(result_620759909, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym45_620759906, NTI620758896), tail: nimCopy(null, tailInHEX60gensym45_620759907, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym45_620759905, NTI33554439), value: []}, NTI620758698);

  return result_620759909;

}
        
function HEX3Aanonymous_620759912(input_620759913) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620759915 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620759916 = succeedImpl_620759897;
            var fail_620759917 = failImpl_620759904;
            Label1: do {
              var tempHEX60gensym38_620759930 = parse_620759604(a_620759664, input_620759913);
              if ((tempHEX60gensym38_620759930.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620759930;
              if (ConstSet23[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
              result_620759915 = nimCopy(result_620759915, {kind: 1, fromInput: nimCopy(null, input_620759913, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym38_620759930.tail, NTI33554439), value: []}, NTI620758698);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620759936 = nimCopy(null, tempHEX60gensym38_620759930, NTI620758259);
            var Temporary3 = result1_620759936;
            if (ConstSet24[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
            var outputs_620759941 = [nimCopy(null, Temporary3.value, NTI620758253)];
            var lastTail_620759942 = nimCopy(null, result1_620759936.tail, NTI33554439);
            Label4: do {
              var i_620759948 = 0;
              var res_620767407 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620767407 <= n_620759665)) break Label6;
                    i_620759948 = res_620767407;
                    Label7: do {
                      var tempHEX60gensym40_620759961 = parse_620759604(a_620759664, result1_620759936.tail);
                      if ((tempHEX60gensym40_620759961.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620759961;
                      if (ConstSet25[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1090519061)); }
                      result_620759915 = nimCopy(result_620759915, {kind: 1, fromInput: nimCopy(null, input_620759913, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym40_620759961.tail, NTI33554439), value: []}, NTI620758698);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620759936 = nimCopy(result1_620759936, tempHEX60gensym40_620759961, NTI620758259);
                    if (eqStrings(result1_620759936.tail, lastTail_620759942)) {
                    break Label4;
                    }
                    
                    lastTail_620759942 = nimCopy(null, result1_620759936.tail, NTI33554439);
                    var Temporary9 = result1_620759936;
                    if (ConstSet26[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1090519061)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI620758253);
                    outputs_620759941.push(Temporary10);;
                    res_620767407 = addInt(res_620767407, 1);
                  }
              } while (false);
            } while (false);
            result_620759915 = nimCopy(result_620759915, succeed_620759916(input_620759913, outputs_620759941, result1_620759936.tail), NTI620758698);
          } while (false);

          return result_620759915;

        }

  var result_620759674 = null;

  BeforeRet: do {
    switch (n_620759665) {
    case 0:
      result_620759674 = nop_620759675();
      break BeforeRet;
      break;
    case 1:
      result_620759674 = map_620759830(a_620759664, HEX3Aanonymous_620759792);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620759912};
      break;
    }
    result_620759674 = Temporary1;
  } while (false);

  return result_620759674;

}

function HEX7C_620759560(a_620759562, b_620759563) {

function succeedImpl_620759575(inputInHEX60gensym41_620759576, valueInHEX60gensym41_620759577, tailInHEX60gensym41_620759578) {
  var result_620759580 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759580 = nimCopy(result_620759580, {kind: 0, value: nimCopy(null, valueInHEX60gensym41_620759577, NTI620758253), tail: nimCopy(null, tailInHEX60gensym41_620759578, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym41_620759576, NTI33554439), expected: []}, NTI620758259);

  return result_620759580;

}

function failImpl_620759582(inputInHEX60gensym41_620759583, expectedInHEX60gensym41_620759584, tailInHEX60gensym41_620759585) {
  var result_620759587 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620759587 = nimCopy(result_620759587, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym41_620759584, NTI620758642), tail: nimCopy(null, tailInHEX60gensym41_620759585, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym41_620759583, NTI33554439), value: []}, NTI620758259);

  return result_620759587;

}
      
function HEX3Aanonymous_620759590(input_620759591) {
          var Temporary1;
          var Temporary2;

        var result_620759593 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620759594 = succeedImpl_620759575;
          var fail_620759595 = failImpl_620759582;
          var result1_620759620 = parse_620759604(a_620759562, input_620759591);
          if ((result1_620759620.kind == 0)) {
          result_620759593 = nimCopy(result_620759593, result1_620759620, NTI620758259);
          break BeforeRet;
          }
          
          var result2_620759637 = parse_620759604(b_620759563, input_620759591);
          if ((result2_620759637.kind == 0)) {
          result_620759593 = nimCopy(result_620759593, result2_620759637, NTI620758259);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620759620;
          if (ConstSet27[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1090519061)); }
          var Temporary2 = result2_620759637;
          if (ConstSet28[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
          result_620759593 = nimCopy(result_620759593, fail_620759595(input_620759591, HEX26_687865962(Temporary1.expected, Temporary2.expected), input_620759591), NTI620758259);
        } while (false);

        return result_620759593;

      }

  var result_620759564 = null;

    Label1: do {
    } while (false);
    result_620759564 = {body: HEX3Aanonymous_620759590};

  return result_620759564;

}

function newSeq_452985301(len_452985303) {
  var result_452985304 = [];

    result_452985304 = new Array(len_452985303); for (var i = 0 ; i < len_452985303 ; ++i) { result_452985304[i] = []; }
  return result_452985304;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function parse_620760829(p_620760831, input_620760832) {
  var result_620760833 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620760831.body == null)) {
    result_620760833 = nimCopy(result_620760833, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620760832, NTI33554439), fromInput: nimCopy(null, input_620760832, NTI33554439), value: []}, NTI620759300);
    break BeforeRet;
    }
    
    result_620760833 = nimCopy(result_620760833, p_620760831.body(input_620760832), NTI620759300);
  } while (false);

  return result_620760833;

}

function map_620761635(a_620761638, fn_620761640) {

function succeedImpl_620761652(inputInHEX60gensym81_620761653, valueInHEX60gensym81_620761654, tailInHEX60gensym81_620761655) {
  var result_620761657 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620761657 = nimCopy(result_620761657, {kind: 0, value: nimCopy(null, valueInHEX60gensym81_620761654, NTI687865860), tail: nimCopy(null, tailInHEX60gensym81_620761655, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym81_620761653, NTI33554439), expected: []}, NTI620757844);

  return result_620761657;

}

function failImpl_620761659(inputInHEX60gensym81_620761660, expectedInHEX60gensym81_620761661, tailInHEX60gensym81_620761662) {
  var result_620761664 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620761664 = nimCopy(result_620761664, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym81_620761661, NTI620760412), tail: nimCopy(null, tailInHEX60gensym81_620761662, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym81_620761660, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620761664;

}
      
function HEX3Aanonymous_620761667(input_620761668) {
            var Temporary2;
          var Temporary3;

        var result_620761670 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761671 = succeedImpl_620761652;
          var fail_620761672 = failImpl_620761659;
          Label1: do {
            var tempHEX60gensym24_620761685 = parse_620760829(a_620761638, input_620761668);
            if ((tempHEX60gensym24_620761685.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620761685;
            if (ConstSet29[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620761670 = nimCopy(result_620761670, {kind: 1, fromInput: nimCopy(null, input_620761668, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620761685.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761691 = nimCopy(null, tempHEX60gensym24_620761685, NTI620759300);
          var Temporary3 = result1_620761691;
          if (ConstSet30[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620761670 = nimCopy(result_620761670, succeed_620761671(input_620761668, fn_620761640(Temporary3.value), result1_620761691.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620761670;

      }

  var result_620761641 = null;

    Label1: do {
    } while (false);
    result_620761641 = {body: HEX3Aanonymous_620761667};

  return result_620761641;

}

function parse_620761345(p_620761347, input_620761348) {
  var result_620761349 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620761347.body == null)) {
    result_620761349 = nimCopy(result_620761349, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620761348, NTI33554439), fromInput: nimCopy(null, input_620761348, NTI33554439), value: []}, NTI620759762);
    break BeforeRet;
    }
    
    result_620761349 = nimCopy(result_620761349, p_620761347.body(input_620761348), NTI620759762);
  } while (false);

  return result_620761349;

}

function map_620761549(a_620761552, fn_620761554) {

function succeedImpl_620761566(inputInHEX60gensym80_620761567, valueInHEX60gensym80_620761568, tailInHEX60gensym80_620761569) {
  var result_620761571 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761571 = nimCopy(result_620761571, {kind: 0, value: nimCopy(null, valueInHEX60gensym80_620761568, NTI687866058), tail: nimCopy(null, tailInHEX60gensym80_620761569, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym80_620761567, NTI33554439), expected: []}, NTI620759300);

  return result_620761571;

}

function failImpl_620761573(inputInHEX60gensym80_620761574, expectedInHEX60gensym80_620761575, tailInHEX60gensym80_620761576) {
  var result_620761578 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761578 = nimCopy(result_620761578, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym80_620761575, NTI620760347), tail: nimCopy(null, tailInHEX60gensym80_620761576, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym80_620761574, NTI33554439), value: []}, NTI620759300);

  return result_620761578;

}
      
function HEX3Aanonymous_620761581(input_620761582) {
            var Temporary2;
          var Temporary3;

        var result_620761584 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761585 = succeedImpl_620761566;
          var fail_620761586 = failImpl_620761573;
          Label1: do {
            var tempHEX60gensym24_620761599 = parse_620761345(a_620761552, input_620761582);
            if ((tempHEX60gensym24_620761599.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620761599;
            if (ConstSet31[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620761584 = nimCopy(result_620761584, {kind: 1, fromInput: nimCopy(null, input_620761582, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620761599.tail, NTI33554439), value: []}, NTI620759300);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761605 = nimCopy(null, tempHEX60gensym24_620761599, NTI620759762);
          var Temporary3 = result1_620761605;
          if (ConstSet32[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620761584 = nimCopy(result_620761584, succeed_620761585(input_620761582, fn_620761554(Temporary3.value), result1_620761605.tail), NTI620759300);
          break BeforeRet;
        } while (false);

        return result_620761584;

      }

  var result_620761555 = null;

    Label1: do {
    } while (false);
    result_620761555 = {body: HEX3Aanonymous_620761581};

  return result_620761555;

}

function HEX26_620761387(x_620761389, y_620761390) {
  var result_620761391 = [];

    result_620761391 = new Array(chckRange(addInt((x_620761389).length, (y_620761390).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620761389).length, (y_620761390).length), 0, 2147483647) ; ++i) { result_620761391[i] = []; }    Label1: do {
      var i_620761410 = 0;
      var colontmp__620767424 = 0;
      colontmp__620767424 = subInt((x_620761389).length, 1);
      var res_620767425 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767425 <= colontmp__620767424)) break Label3;
            i_620761410 = res_620767425;
            result_620761391[chckIndx(i_620761410, 0, (result_620761391).length - 1)] = nimCopy(null, x_620761389[chckIndx(i_620761410, 0, (x_620761389).length - 1)], NTI620759294);
            res_620767425 = addInt(res_620767425, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620761418 = 0;
      var colontmp__620767428 = 0;
      colontmp__620767428 = subInt((y_620761390).length, 1);
      var res_620767429 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620767429 <= colontmp__620767428)) break Label6;
            i_620761418 = res_620767429;
            result_620761391[chckIndx(addInt(i_620761418, (x_620761389).length), 0, (result_620761391).length - 1)] = nimCopy(null, y_620761390[chckIndx(i_620761418, 0, (y_620761390).length - 1)], NTI620759294);
            res_620767429 = addInt(res_620767429, 1);
          }
      } while (false);
    } while (false);

  return result_620761391;

}

function HEX26_620761292(a_620761297, b_620761301) {

function succeedImpl_620761316(inputInHEX60gensym74_620761317, valueInHEX60gensym74_620761318, tailInHEX60gensym74_620761319) {
  var result_620761321 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761321 = nimCopy(result_620761321, {kind: 0, value: nimCopy(null, valueInHEX60gensym74_620761318, NTI620760146), tail: nimCopy(null, tailInHEX60gensym74_620761319, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym74_620761317, NTI33554439), expected: []}, NTI620759762);

  return result_620761321;

}

function failImpl_620761323(inputInHEX60gensym74_620761324, expectedInHEX60gensym74_620761325, tailInHEX60gensym74_620761326) {
  var result_620761328 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761328 = nimCopy(result_620761328, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym74_620761325, NTI620760152), tail: nimCopy(null, tailInHEX60gensym74_620761326, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym74_620761324, NTI33554439), value: []}, NTI620759762);

  return result_620761328;

}
      
function HEX3Aanonymous_620761331(input_620761332) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_620761334 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761335 = succeedImpl_620761316;
          var fail_620761336 = failImpl_620761323;
          Label1: do {
            var tempHEX60gensym26_620761361 = parse_620761345(a_620761297, input_620761332);
            if ((tempHEX60gensym26_620761361.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_620761361;
            if (ConstSet33[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620761334 = nimCopy(result_620761334, {kind: 1, fromInput: nimCopy(null, input_620761332, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym26_620761361.tail, NTI33554439), value: []}, NTI620759762);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761367 = nimCopy(null, tempHEX60gensym26_620761361, NTI620759762);
          Label3: do {
            var tempHEX60gensym28_620761380 = parse_620761345(b_620761301, result1_620761367.tail);
            if ((tempHEX60gensym28_620761380.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_620761380;
            if (ConstSet34[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620761334 = nimCopy(result_620761334, {kind: 1, fromInput: nimCopy(null, input_620761332, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym28_620761380.tail, NTI33554439), value: []}, NTI620759762);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620761386 = nimCopy(null, tempHEX60gensym28_620761380, NTI620759762);
          var Temporary5 = result1_620761367;
          if (ConstSet35[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          var Temporary6 = result2_620761386;
          if (ConstSet36[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1090519061)); }
          result_620761334 = nimCopy(result_620761334, succeed_620761335(input_620761332, HEX26_620761387(Temporary5.value, Temporary6.value), result2_620761386.tail), NTI620759762);
          break BeforeRet;
        } while (false);

        return result_620761334;

      }

  var result_620761305 = null;

    Label1: do {
    } while (false);
    result_620761305 = {body: HEX3Aanonymous_620761331};

  return result_620761305;

}

function map_620761055(a_620761058, fn_620761060) {

function succeedImpl_620761072(inputInHEX60gensym70_620761073, valueInHEX60gensym70_620761074, tailInHEX60gensym70_620761075) {
  var result_620761077 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761077 = nimCopy(result_620761077, {kind: 0, value: nimCopy(null, valueInHEX60gensym70_620761074, NTI620759871), tail: nimCopy(null, tailInHEX60gensym70_620761075, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym70_620761073, NTI33554439), expected: []}, NTI620759762);

  return result_620761077;

}

function failImpl_620761079(inputInHEX60gensym70_620761080, expectedInHEX60gensym70_620761081, tailInHEX60gensym70_620761082) {
  var result_620761084 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761084 = nimCopy(result_620761084, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym70_620761081, NTI620759914), tail: nimCopy(null, tailInHEX60gensym70_620761082, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym70_620761080, NTI33554439), value: []}, NTI620759762);

  return result_620761084;

}
      
function HEX3Aanonymous_620761087(input_620761088) {
            var Temporary2;
          var Temporary3;

        var result_620761090 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761091 = succeedImpl_620761072;
          var fail_620761092 = failImpl_620761079;
          Label1: do {
            var tempHEX60gensym24_620761105 = parse_620760829(a_620761058, input_620761088);
            if ((tempHEX60gensym24_620761105.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620761105;
            if (ConstSet37[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620761090 = nimCopy(result_620761090, {kind: 1, fromInput: nimCopy(null, input_620761088, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620761105.tail, NTI33554439), value: []}, NTI620759762);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761111 = nimCopy(null, tempHEX60gensym24_620761105, NTI620759300);
          var Temporary3 = result1_620761111;
          if (ConstSet38[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620761090 = nimCopy(result_620761090, succeed_620761091(input_620761088, fn_620761060(Temporary3.value), result1_620761111.tail), NTI620759762);
          break BeforeRet;
        } while (false);

        return result_620761090;

      }

  var result_620761061 = null;

    Label1: do {
    } while (false);
    result_620761061 = {body: HEX3Aanonymous_620761087};

  return result_620761061;

}

function nop_620760407() {

function succeedImpl_620760420(inputInHEX60gensym60_620760421, valueInHEX60gensym60_620760422, tailInHEX60gensym60_620760423) {
  var result_620760425 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760425 = nimCopy(result_620760425, {kind: 0, value: nimCopy(null, valueInHEX60gensym60_620760422, NTI620759354), tail: nimCopy(null, tailInHEX60gensym60_620760423, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym60_620760421, NTI33554439), expected: []}, NTI620759300);

  return result_620760425;

}

function failImpl_620760439(inputInHEX60gensym60_620760440, expectedInHEX60gensym60_620760441, tailInHEX60gensym60_620760442) {
  var result_620760444 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760444 = nimCopy(result_620760444, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym60_620760441, NTI620759381), tail: nimCopy(null, tailInHEX60gensym60_620760442, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym60_620760440, NTI33554439), value: []}, NTI620759300);

  return result_620760444;

}
      
function HEX3Aanonymous_620760447(input_620760448) {
        var result_620760450 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620760451 = succeedImpl_620760420;
          var fail_620760452 = failImpl_620760439;
          result_620760450 = nimCopy(result_620760450, succeed_620760451(input_620760448, [], input_620760448), NTI620759300);

        return result_620760450;

      }

  var result_620760409 = null;

    Label1: do {
    } while (false);
    result_620760409 = {body: HEX3Aanonymous_620760447};

  return result_620760409;

}

function parse_620760599(p_620760601, input_620760602) {
  var result_620760603 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620760601.body == null)) {
    result_620760603 = nimCopy(result_620760603, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620760602, NTI33554439), fromInput: nimCopy(null, input_620760602, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
    break BeforeRet;
    }
    
    result_620760603 = nimCopy(result_620760603, p_620760601.body(input_620760602), NTI620757844);
  } while (false);

  return result_620760603;

}

function map_620760553(a_620760556, fn_620760558) {

function succeedImpl_620760570(inputInHEX60gensym62_620760571, valueInHEX60gensym62_620760572, tailInHEX60gensym62_620760573) {
  var result_620760575 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760575 = nimCopy(result_620760575, {kind: 0, value: nimCopy(null, valueInHEX60gensym62_620760572, NTI620759450), tail: nimCopy(null, tailInHEX60gensym62_620760573, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym62_620760571, NTI33554439), expected: []}, NTI620759300);

  return result_620760575;

}

function failImpl_620760577(inputInHEX60gensym62_620760578, expectedInHEX60gensym62_620760579, tailInHEX60gensym62_620760580) {
  var result_620760582 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760582 = nimCopy(result_620760582, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym62_620760579, NTI620759493), tail: nimCopy(null, tailInHEX60gensym62_620760580, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym62_620760578, NTI33554439), value: []}, NTI620759300);

  return result_620760582;

}
      
function HEX3Aanonymous_620760585(input_620760586) {
            var Temporary2;
          var Temporary3;

        var result_620760588 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620760589 = succeedImpl_620760570;
          var fail_620760590 = failImpl_620760577;
          Label1: do {
            var tempHEX60gensym24_620760615 = parse_620760599(a_620760556, input_620760586);
            if ((tempHEX60gensym24_620760615.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620760615;
            if (ConstSet39[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620760588 = nimCopy(result_620760588, {kind: 1, fromInput: nimCopy(null, input_620760586, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620760615.tail, NTI33554439), value: []}, NTI620759300);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620760621 = nimCopy(null, tempHEX60gensym24_620760615, NTI620757844);
          var Temporary3 = result1_620760621;
          if (ConstSet40[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620760588 = nimCopy(result_620760588, succeed_620760589(input_620760586, fn_620760558(Temporary3.value), result1_620760621.tail), NTI620759300);
          break BeforeRet;
        } while (false);

        return result_620760588;

      }

  var result_620760559 = null;

    Label1: do {
    } while (false);
    result_620760559 = {body: HEX3Aanonymous_620760585};

  return result_620760559;

}

function HEX2A_620760399(a_620760401, n_620760402) {
    var Temporary1;
      
function HEX3Aanonymous_620760515(x_620760544) {
        var result_620760547 = [];

          result_620760547 = nimCopy(null, [nimCopy(null, x_620760544, NTI687865860)], NTI620759450);

        return result_620760547;

      }

function succeedImpl_620760632(inputInHEX60gensym63_620760633, valueInHEX60gensym63_620760634, tailInHEX60gensym63_620760635) {
  var result_620760637 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760637 = nimCopy(result_620760637, {kind: 0, value: nimCopy(null, valueInHEX60gensym63_620760634, NTI620759544), tail: nimCopy(null, tailInHEX60gensym63_620760635, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym63_620760633, NTI33554439), expected: []}, NTI620759300);

  return result_620760637;

}

function failImpl_620760639(inputInHEX60gensym63_620760640, expectedInHEX60gensym63_620760641, tailInHEX60gensym63_620760642) {
  var result_620760644 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760644 = nimCopy(result_620760644, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym63_620760641, NTI620759550), tail: nimCopy(null, tailInHEX60gensym63_620760642, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym63_620760640, NTI33554439), value: []}, NTI620759300);

  return result_620760644;

}
        
function HEX3Aanonymous_620760647(input_620760648) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620760650 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620760651 = succeedImpl_620760632;
            var fail_620760652 = failImpl_620760639;
            Label1: do {
              var tempHEX60gensym38_620760665 = parse_620760599(a_620760401, input_620760648);
              if ((tempHEX60gensym38_620760665.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620760665;
              if (ConstSet41[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
              result_620760650 = nimCopy(result_620760650, {kind: 1, fromInput: nimCopy(null, input_620760648, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym38_620760665.tail, NTI33554439), value: []}, NTI620759300);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620760671 = nimCopy(null, tempHEX60gensym38_620760665, NTI620757844);
            var Temporary3 = result1_620760671;
            if (ConstSet42[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
            var outputs_620760676 = [nimCopy(null, Temporary3.value, NTI687865860)];
            var lastTail_620760677 = nimCopy(null, result1_620760671.tail, NTI33554439);
            Label4: do {
              var i_620760683 = 0;
              var res_620767437 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620767437 <= n_620760402)) break Label6;
                    i_620760683 = res_620767437;
                    Label7: do {
                      var tempHEX60gensym40_620760696 = parse_620760599(a_620760401, result1_620760671.tail);
                      if ((tempHEX60gensym40_620760696.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620760696;
                      if (ConstSet43[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1090519061)); }
                      result_620760650 = nimCopy(result_620760650, {kind: 1, fromInput: nimCopy(null, input_620760648, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym40_620760696.tail, NTI33554439), value: []}, NTI620759300);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620760671 = nimCopy(result1_620760671, tempHEX60gensym40_620760696, NTI620757844);
                    if (eqStrings(result1_620760671.tail, lastTail_620760677)) {
                    break Label4;
                    }
                    
                    lastTail_620760677 = nimCopy(null, result1_620760671.tail, NTI33554439);
                    var Temporary9 = result1_620760671;
                    if (ConstSet44[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1090519061)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI687865860);
                    outputs_620760676.push(Temporary10);;
                    res_620767437 = addInt(res_620767437, 1);
                  }
              } while (false);
            } while (false);
            result_620760650 = nimCopy(result_620760650, succeed_620760651(input_620760648, outputs_620760676, result1_620760671.tail), NTI620759300);
          } while (false);

          return result_620760650;

        }

  var result_620760406 = null;

  BeforeRet: do {
    switch (n_620760402) {
    case 0:
      result_620760406 = nop_620760407();
      break BeforeRet;
      break;
    case 1:
      result_620760406 = map_620760553(a_620760401, HEX3Aanonymous_620760515);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620760647};
      break;
    }
    result_620760406 = Temporary1;
  } while (false);

  return result_620760406;

}

function nop_620760900() {

function succeedImpl_620760913(inputInHEX60gensym68_620760914, valueInHEX60gensym68_620760915, tailInHEX60gensym68_620760916) {
  var result_620760918 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760918 = nimCopy(result_620760918, {kind: 0, value: nimCopy(null, valueInHEX60gensym68_620760915, NTI620759769), tail: nimCopy(null, tailInHEX60gensym68_620760916, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym68_620760914, NTI33554439), expected: []}, NTI620759762);

  return result_620760918;

}

function failImpl_620760941(inputInHEX60gensym68_620760942, expectedInHEX60gensym68_620760943, tailInHEX60gensym68_620760944) {
  var result_620760946 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760946 = nimCopy(result_620760946, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym68_620760943, NTI620759802), tail: nimCopy(null, tailInHEX60gensym68_620760944, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym68_620760942, NTI33554439), value: []}, NTI620759762);

  return result_620760946;

}
      
function HEX3Aanonymous_620760949(input_620760950) {
        var result_620760952 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620760953 = succeedImpl_620760913;
          var fail_620760954 = failImpl_620760941;
          result_620760952 = nimCopy(result_620760952, succeed_620760953(input_620760950, [], input_620760950), NTI620759762);

        return result_620760952;

      }

  var result_620760902 = null;

    Label1: do {
    } while (false);
    result_620760902 = {body: HEX3Aanonymous_620760949};

  return result_620760902;

}

function HEX2A_620760887(a_620760889, n_620760890) {
    var Temporary1;
      
function HEX3Aanonymous_620761017(x_620761046) {
        var result_620761049 = [];

          result_620761049 = nimCopy(null, [nimCopy(null, x_620761046, NTI620759294)], NTI620759871);

        return result_620761049;

      }

function succeedImpl_620761122(inputInHEX60gensym71_620761123, valueInHEX60gensym71_620761124, tailInHEX60gensym71_620761125) {
  var result_620761127 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761127 = nimCopy(result_620761127, {kind: 0, value: nimCopy(null, valueInHEX60gensym71_620761124, NTI620759954), tail: nimCopy(null, tailInHEX60gensym71_620761125, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym71_620761123, NTI33554439), expected: []}, NTI620759762);

  return result_620761127;

}

function failImpl_620761129(inputInHEX60gensym71_620761130, expectedInHEX60gensym71_620761131, tailInHEX60gensym71_620761132) {
  var result_620761134 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761134 = nimCopy(result_620761134, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym71_620761131, NTI620759960), tail: nimCopy(null, tailInHEX60gensym71_620761132, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym71_620761130, NTI33554439), value: []}, NTI620759762);

  return result_620761134;

}
        
function HEX3Aanonymous_620761137(input_620761138) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620761140 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620761141 = succeedImpl_620761122;
            var fail_620761142 = failImpl_620761129;
            Label1: do {
              var tempHEX60gensym38_620761155 = parse_620760829(a_620760889, input_620761138);
              if ((tempHEX60gensym38_620761155.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620761155;
              if (ConstSet45[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
              result_620761140 = nimCopy(result_620761140, {kind: 1, fromInput: nimCopy(null, input_620761138, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym38_620761155.tail, NTI33554439), value: []}, NTI620759762);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620761161 = nimCopy(null, tempHEX60gensym38_620761155, NTI620759300);
            var Temporary3 = result1_620761161;
            if (ConstSet46[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
            var outputs_620761166 = [nimCopy(null, Temporary3.value, NTI620759294)];
            var lastTail_620761167 = nimCopy(null, result1_620761161.tail, NTI33554439);
            Label4: do {
              var i_620761173 = 0;
              var res_620767446 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620767446 <= n_620760890)) break Label6;
                    i_620761173 = res_620767446;
                    Label7: do {
                      var tempHEX60gensym40_620761186 = parse_620760829(a_620760889, result1_620761161.tail);
                      if ((tempHEX60gensym40_620761186.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620761186;
                      if (ConstSet47[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1090519061)); }
                      result_620761140 = nimCopy(result_620761140, {kind: 1, fromInput: nimCopy(null, input_620761138, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym40_620761186.tail, NTI33554439), value: []}, NTI620759762);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620761161 = nimCopy(result1_620761161, tempHEX60gensym40_620761186, NTI620759300);
                    if (eqStrings(result1_620761161.tail, lastTail_620761167)) {
                    break Label4;
                    }
                    
                    lastTail_620761167 = nimCopy(null, result1_620761161.tail, NTI33554439);
                    var Temporary9 = result1_620761161;
                    if (ConstSet48[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1090519061)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI620759294);
                    outputs_620761166.push(Temporary10);;
                    res_620767446 = addInt(res_620767446, 1);
                  }
              } while (false);
            } while (false);
            result_620761140 = nimCopy(result_620761140, succeed_620761141(input_620761138, outputs_620761166, result1_620761161.tail), NTI620759762);
          } while (false);

          return result_620761140;

        }

  var result_620760899 = null;

  BeforeRet: do {
    switch (n_620760890) {
    case 0:
      result_620760899 = nop_620760900();
      break BeforeRet;
      break;
    case 1:
      result_620760899 = map_620761055(a_620760889, HEX3Aanonymous_620761017);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620761137};
      break;
    }
    result_620760899 = Temporary1;
  } while (false);

  return result_620760899;

}

function HEX7C_620760785(a_620760787, b_620760788) {

function succeedImpl_620760800(inputInHEX60gensym67_620760801, valueInHEX60gensym67_620760802, tailInHEX60gensym67_620760803) {
  var result_620760805 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760805 = nimCopy(result_620760805, {kind: 0, value: nimCopy(null, valueInHEX60gensym67_620760802, NTI620759294), tail: nimCopy(null, tailInHEX60gensym67_620760803, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym67_620760801, NTI33554439), expected: []}, NTI620759300);

  return result_620760805;

}

function failImpl_620760807(inputInHEX60gensym67_620760808, expectedInHEX60gensym67_620760809, tailInHEX60gensym67_620760810) {
  var result_620760812 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620760812 = nimCopy(result_620760812, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym67_620760809, NTI620759706), tail: nimCopy(null, tailInHEX60gensym67_620760810, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym67_620760808, NTI33554439), value: []}, NTI620759300);

  return result_620760812;

}
      
function HEX3Aanonymous_620760815(input_620760816) {
          var Temporary1;
          var Temporary2;

        var result_620760818 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620760819 = succeedImpl_620760800;
          var fail_620760820 = failImpl_620760807;
          var result1_620760845 = parse_620760829(a_620760787, input_620760816);
          if ((result1_620760845.kind == 0)) {
          result_620760818 = nimCopy(result_620760818, result1_620760845, NTI620759300);
          break BeforeRet;
          }
          
          var result2_620760862 = parse_620760829(b_620760788, input_620760816);
          if ((result2_620760862.kind == 0)) {
          result_620760818 = nimCopy(result_620760818, result2_620760862, NTI620759300);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620760845;
          if (ConstSet49[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1090519061)); }
          var Temporary2 = result2_620760862;
          if (ConstSet50[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
          result_620760818 = nimCopy(result_620760818, fail_620760820(input_620760816, HEX26_687865962(Temporary1.expected, Temporary2.expected), input_620760816), NTI620759300);
        } while (false);

        return result_620760818;

      }

  var result_620760789 = null;

    Label1: do {
    } while (false);
    result_620760789 = {body: HEX3Aanonymous_620760815};

  return result_620760789;

}

function newSeq_687866191(len_687866193) {
  var result_687866194 = [];

    result_687866194 = new Array(len_687866193); for (var i = 0 ; i < len_687866193 ; ++i) { result_687866194[i] = ({rows: [], baseline: 0, width: 0, flag: 0}); }
  return result_687866194;

}

function HEX26_620761473(x_620761475, y_620761476) {
  var result_620761477 = [];

    result_620761477 = new Array(chckRange(addInt((x_620761475).length, (y_620761476).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620761475).length, (y_620761476).length), 0, 2147483647) ; ++i) { result_620761477[i] = ({rows: [], baseline: 0, width: 0, flag: 0}); }    Label1: do {
      var i_620761495 = 0;
      var colontmp__620767456 = 0;
      colontmp__620767456 = subInt((x_620761475).length, 1);
      var res_620767457 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767457 <= colontmp__620767456)) break Label3;
            i_620761495 = res_620767457;
            result_620761477[chckIndx(i_620761495, 0, (result_620761477).length - 1)] = nimCopy(result_620761477[chckIndx(i_620761495, 0, (result_620761477).length - 1)], x_620761475[chckIndx(i_620761495, 0, (x_620761475).length - 1)], NTI687865860);
            res_620767457 = addInt(res_620767457, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620761503 = 0;
      var colontmp__620767460 = 0;
      colontmp__620767460 = subInt((y_620761476).length, 1);
      var res_620767461 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620767461 <= colontmp__620767460)) break Label6;
            i_620761503 = res_620767461;
            result_620761477[chckIndx(addInt(i_620761503, (x_620761475).length), 0, (result_620761477).length - 1)] = nimCopy(result_620761477[chckIndx(addInt(i_620761503, (x_620761475).length), 0, (result_620761477).length - 1)], y_620761476[chckIndx(i_620761503, 0, (y_620761476).length - 1)], NTI687865860);
            res_620767461 = addInt(res_620767461, 1);
          }
      } while (false);
    } while (false);

  return result_620761477;

}

function height_687865900(rect_687865901) {
  var result_687865902 = 0;

    result_687865902 = chckRange((rect_687865901.rows).length, 0, 2147483647);

  return result_687865902;

}

function isEmpty_687865906(rect_687865907) {
  var result_687865908 = false;

    result_687865908 = (height_687865900(rect_687865907) == 0);

  return result_687865908;

}

function HEX3DHEX3D_687866271(x_687866273, y_687866274) {
  var result_687866275 = false;

  BeforeRet: do {
    var sameObject_687866282 = false;
    sameObject_687866282 = x_687866273 === y_687866274
    if (sameObject_687866282) {
    result_687866275 = true;
    break BeforeRet;
    }
    
    if (!(((x_687866273).length == (y_687866274).length))) {
    result_687866275 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_687866296 = 0;
      var colontmp__620767516 = 0;
      colontmp__620767516 = subInt((x_687866273).length, 1);
      var res_620767517 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767517 <= colontmp__620767516)) break Label3;
            i_687866296 = res_620767517;
            if (!(eqStrings(x_687866273[chckIndx(i_687866296, 0, (x_687866273).length - 1)], y_687866274[chckIndx(i_687866296, 0, (y_687866274).length - 1)]))) {
            result_687866275 = false;
            break BeforeRet;
            }
            
            res_620767517 = addInt(res_620767517, 1);
          }
      } while (false);
    } while (false);
    result_687866275 = true;
    break BeforeRet;
  } while (false);

  return result_687866275;

}

function HEX3DHEX3D_687866261(x_687866263, y_687866264) {
  var result_687866265 = false;

  BeforeRet: do {
    if (!(HEX3DHEX3D_687866271(x_687866263.rows, y_687866264.rows))) {
    result_687866265 = false;
    break BeforeRet;
    }
    
    if (!((x_687866263.baseline == y_687866264.baseline))) {
    result_687866265 = false;
    break BeforeRet;
    }
    
    if (!((x_687866263.width == y_687866264.width))) {
    result_687866265 = false;
    break BeforeRet;
    }
    
    if (!((x_687866263.flag == y_687866264.flag))) {
    result_687866265 = false;
    break BeforeRet;
    }
    
    result_687866265 = true;
    break BeforeRet;
  } while (false);

  return result_687866265;

}

function HEX3DHEX3D_687866235(x_687866237, y_687866238) {
  var result_687866239 = false;

  BeforeRet: do {
    var sameObject_687866246 = false;
    sameObject_687866246 = x_687866237 === y_687866238
    if (sameObject_687866246) {
    result_687866239 = true;
    break BeforeRet;
    }
    
    if (!(((x_687866237).length == (y_687866238).length))) {
    result_687866239 = false;
    break BeforeRet;
    }
    
    Label1: do {
      var i_687866260 = 0;
      var colontmp__620767512 = 0;
      colontmp__620767512 = subInt((x_687866237).length, 1);
      var res_620767513 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767513 <= colontmp__620767512)) break Label3;
            i_687866260 = res_620767513;
            if (!(HEX3DHEX3D_687866261(x_687866237[chckIndx(i_687866260, 0, (x_687866237).length - 1)], y_687866238[chckIndx(i_687866260, 0, (y_687866238).length - 1)]))) {
            result_687866239 = false;
            break BeforeRet;
            }
            
            res_620767513 = addInt(res_620767513, 1);
          }
      } while (false);
    } while (false);
    result_687866239 = true;
    break BeforeRet;
  } while (false);

  return result_687866239;

}

function extendRight_687866053(rect_687866054) {
    Label1: do {
      var row_687866058 = null;
      var row_687866058_Idx = 0;
      var i_620767521 = 0;
      var L_620767522 = (rect_687866054.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767521 < L_620767522)) break Label3;
            row_687866058 = rect_687866054.rows; row_687866058_Idx = chckIndx(i_620767521, 0, (rect_687866054.rows).length - 1);
            row_687866058[row_687866058_Idx].push.apply(row_687866058[row_687866058_Idx], makeNimstrLit(" "));;
            i_620767521 = addInt(i_620767521, 1);
            if (!(((rect_687866054.rows).length == L_620767522))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rect_687866054.width = addInt(rect_687866054.width, 1);

  
}

function extendLeft_687866008(rect_687866009) {
    Label1: do {
      var row_687866030 = null;
      var row_687866030_Idx = 0;
      var i_620767525 = 0;
      var L_620767526 = (rect_687866009.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767525 < L_620767526)) break Label3;
            row_687866030 = rect_687866009.rows; row_687866030_Idx = chckIndx(i_620767525, 0, (rect_687866009.rows).length - 1);
            row_687866030[row_687866030_Idx] = nimCopy(null, (makeNimstrLit(" ") || []).concat(row_687866030[row_687866030_Idx] || []), NTI33554439);
            i_620767525 = addInt(i_620767525, 1);
            if (!(((rect_687866009.rows).length == L_620767526))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(249, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    rect_687866009.width = addInt(rect_687866009.width, 1);

  
}

function max_687866443(x_687866445) {
  var result_687866446 = 0;

    result_687866446 = x_687866445[chckIndx(0, 0, (x_687866445).length - 1)];
    Label1: do {
      var i_687866454 = 0;
      var colontmp__620767529 = 0;
      colontmp__620767529 = (x_687866445).length - 1;
      var res_620767530 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767530 <= colontmp__620767529)) break Label3;
            i_687866454 = res_620767530;
            if ((result_687866446 < x_687866445[chckIndx(i_687866454, 0, (x_687866445).length - 1)])) {
            result_687866446 = x_687866445[chckIndx(i_687866454, 0, (x_687866445).length - 1)];
            }
            
            res_620767530 = addInt(res_620767530, 1);
          }
      } while (false);
    } while (false);

  return result_687866446;

}

function newSeq_687866417(len_687866419) {
  var result_687866420 = [];

    result_687866420 = new Array(len_687866419); for (var i = 0 ; i < len_687866419 ; ++i) { result_687866420[i] = 0; }
  return result_687866420;

}

function repeat_687865949(x_687865951, n_687865952) {
  var result_687865953 = [];

    result_687865953 = nimCopy(null, newSeq_452985301(n_687865952), NTI452985127);
    Label1: do {
      var i_687865961 = 0;
      var colontmp__620767533 = 0;
      colontmp__620767533 = n_687865952;
      var i_620767534 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767534 < colontmp__620767533)) break Label3;
            i_687865961 = i_620767534;
            result_687865953[chckIndx(i_687865961, 0, (result_687865953).length - 1)] = nimCopy(null, x_687865951, NTI33554439);
            i_620767534 = addInt(i_620767534, 1);
          }
      } while (false);
    } while (false);

  return result_687865953;

}

function nsuRepeatChar(c_704644091, count_704644092) {
  var result_704644093 = [];

    result_704644093 = nimCopy(null, mnewString(count_704644092), NTI33554439);
    Label1: do {
      var i_704644098 = 0;
      var colontmp__620767537 = 0;
      colontmp__620767537 = subInt(count_704644092, 1);
      var res_620767538 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767538 <= colontmp__620767537)) break Label3;
            i_704644098 = res_620767538;
            result_704644093[chckIndx(i_704644098, 0, (result_704644093).length - 1)] = c_704644091;
            res_620767538 = addInt(res_620767538, 1);
          }
      } while (false);
    } while (false);

  return result_704644093;

}

function extendUp_687865945(rect_687865946, num_687865947) {
  var result_687865948 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_687865948.rows = nimCopy(null, HEX26_687865962(repeat_687865949(nsuRepeatChar(32, rect_687865946.width), num_687865947), rect_687865946.rows), NTI687865915);
    result_687865948.baseline = addInt(rect_687865946.baseline, num_687865947);
    result_687865948.width = rect_687865946.width;

  return result_687865948;

}

function max_687866520(x_687866522) {
  var result_687866523 = 0;

    result_687866523 = x_687866522[chckIndx(0, 0, (x_687866522).length - 1)];
    Label1: do {
      var i_687866531 = 0;
      var colontmp__620767541 = 0;
      colontmp__620767541 = (x_687866522).length - 1;
      var res_620767542 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767542 <= colontmp__620767541)) break Label3;
            i_687866531 = res_620767542;
            if ((result_687866523 < x_687866522[chckIndx(i_687866531, 0, (x_687866522).length - 1)])) {
            result_687866523 = x_687866522[chckIndx(i_687866531, 0, (x_687866522).length - 1)];
            }
            
            res_620767542 = addInt(res_620767542, 1);
          }
      } while (false);
    } while (false);

  return result_687866523;

}

function newSeq_687866494(len_687866496) {
  var result_687866497 = [];

    result_687866497 = new Array(len_687866496); for (var i = 0 ; i < len_687866496 ; ++i) { result_687866497[i] = 0; }
  return result_687866497;

}

function extendDown_687865996(rect_687865997, num_687865998) {
  var result_687865999 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_687865999.rows = nimCopy(null, HEX26_687865962(rect_687865997.rows, repeat_687865949(nsuRepeatChar(32, rect_687865997.width), num_687865998)), NTI687865915);
    result_687865999.baseline = rect_687865997.baseline;
    result_687865999.width = rect_687865997.width;

  return result_687865999;

}

function nsuJoinSep(a_704644497, sep_704644498) {
  var result_704644499 = [];

    if ((0 < (a_704644497).length)) {
    var L_704644506 = mulInt((sep_704644498).length, subInt((a_704644497).length, 1));
    Label1: do {
      var i_704644514 = 0;
      var colontmp__620767545 = 0;
      colontmp__620767545 = (a_704644497).length - 1;
      var res_620767546 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767546 <= colontmp__620767545)) break Label3;
            i_704644514 = res_620767546;
            L_704644506 = addInt(L_704644506, (a_704644497[chckIndx(i_704644514, 0, (a_704644497).length - 1)]).length);
            res_620767546 = addInt(res_620767546, 1);
          }
      } while (false);
    } while (false);
    result_704644499 = nimCopy(null, mnewString(0), NTI33554439);
    result_704644499.push.apply(result_704644499, a_704644497[chckIndx(0, 0, (a_704644497).length - 1)]);;
    Label4: do {
      var i_704644526 = 0;
      var colontmp__620767549 = 0;
      colontmp__620767549 = (a_704644497).length - 1;
      var res_620767550 = 1;
      Label5: do {
          Label6: while (true) {
          if (!(res_620767550 <= colontmp__620767549)) break Label6;
            i_704644526 = res_620767550;
            result_704644499.push.apply(result_704644499, sep_704644498);;
            result_704644499.push.apply(result_704644499, a_704644497[chckIndx(i_704644526, 0, (a_704644497).length - 1)]);;
            res_620767550 = addInt(res_620767550, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_704644499 = nimCopy(null, [], NTI33554439);
    }
    

  return result_704644499;

}

function sum_687866660(x_687866662) {
  var result_687866663 = 0;

    Label1: do {
      var i_687866676 = 0;
      var i_620767554 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767554 < (x_687866662).length)) break Label3;
            i_687866676 = x_687866662[i_620767554];
            result_687866663 = (result_687866663 + i_687866676);
            i_620767554 += 1;
          }
      } while (false);
    } while (false);

  return result_687866663;

}

function join_687866063(rects_687866064) {
                var Temporary11;
                var Temporary12;
                var Temporary13;

  var result_687866065 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    Label1: do {
      var iHEX60gensym10_687866186 = 0;
      var resultHEX60gensym10_687866199 = newSeq_687866191(chckRange((rects_687866064).length, 0, 2147483647));
      Label2: do {
        var itHEX60gensym10_687866203 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620767466 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_620767466 < (rects_687866064).length)) break Label4;
              itHEX60gensym10_687866203 = rects_687866064[chckIndx(i_620767466, 0, (rects_687866064).length - 1)];
              resultHEX60gensym10_687866199[chckIndx(iHEX60gensym10_687866186, 0, (resultHEX60gensym10_687866199).length - 1)] = nimCopy(resultHEX60gensym10_687866199[chckIndx(iHEX60gensym10_687866186, 0, (resultHEX60gensym10_687866199).length - 1)], itHEX60gensym10_687866203, NTI687865860);
              iHEX60gensym10_687866186 = addInt(iHEX60gensym10_687866186, 1);
              i_620767466 = addInt(i_620767466, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var rects_687866208 = [nimCopy(null, resultHEX60gensym10_687866199, NTI687866058)];
    var posHEX60gensym13_687866212 = 0;
    Label5: do {
      var iHEX60gensym13_687866221 = 0;
      var colontmp__620767469 = 0;
      colontmp__620767469 = (rects_687866208[0]).length;
      var i_620767470 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(i_620767470 < colontmp__620767469)) break Label7;
            iHEX60gensym13_687866221 = i_620767470;
            var it_687866222 = nimCopy(null, rects_687866208[0][chckIndx(iHEX60gensym13_687866221, 0, (rects_687866208[0]).length - 1)], NTI687865860);
            if (!(isEmpty_687865906(it_687866222))) {
            if (!((posHEX60gensym13_687866212 == iHEX60gensym13_687866221))) {
            rects_687866208[0][chckIndx(posHEX60gensym13_687866212, 0, (rects_687866208[0]).length - 1)] = nimCopy(rects_687866208[0][chckIndx(posHEX60gensym13_687866212, 0, (rects_687866208[0]).length - 1)], rects_687866208[0][chckIndx(iHEX60gensym13_687866221, 0, (rects_687866208[0]).length - 1)], NTI687865860);
            }
            
            posHEX60gensym13_687866212 = addInt(posHEX60gensym13_687866212, 1);
            }
            
            i_620767470 = addInt(i_620767470, 1);
          }
      } while (false);
    } while (false);
    if (rects_687866208[0].length < chckRange(posHEX60gensym13_687866212, 0, 2147483647)) { for (var i = rects_687866208[0].length ; i < chckRange(posHEX60gensym13_687866212, 0, 2147483647) ; ++i) rects_687866208[0].push(({rows: [], baseline: 0, width: 0, flag: 0})); }
               else { rects_687866208[0].length = chckRange(posHEX60gensym13_687866212, 0, 2147483647); };
    if (HEX3DHEX3D_687866235(rects_687866208[0], [])) {
    break BeforeRet;
    }
    
    if (((rects_687866208[0]).length == 1)) {
    result_687866065 = nimCopy(result_687866065, rects_687866208[0][chckIndx(0, 0, (rects_687866208[0]).length - 1)], NTI687865860);
    break BeforeRet;
    }
    
    Label8: do {
      var i_687866345 = 0;
      var rect_687866346 = null;
      var i_620767474 = 0;
      var L_620767475 = (rects_687866208[0]).length;
      Label9: do {
          Label10: while (true) {
          if (!(i_620767474 < L_620767475)) break Label10;
            i_687866345 = i_620767474;
            rect_687866346 = rects_687866208[0][chckIndx(i_620767474, 0, (rects_687866208[0]).length - 1)];
            switch (rect_687866346.flag) {
            case 8:
              if (!((i_687866345 == (rects_687866208[0]).length - 1))) {
              extendRight_687866053(rect_687866346);
              }
              
              break;
            case 2:
            case 3:
              if (!((i_687866345 == (rects_687866208[0]).length - 1))) {
              extendRight_687866053(rect_687866346);
              }
              
                if (!!((i_687866345 == 0))) Temporary11 = false; else {                  Temporary11 = !((ConstSet51[rects_687866208[0][chckIndx(subInt(i_687866345, 1), 0, (rects_687866208[0]).length - 1)].flag] != undefined));                }              if (Temporary11) {
              extendLeft_687866008(rect_687866346);
              }
              
              break;
            case 4:
                if (!!((i_687866345 == (rects_687866208[0]).length - 1))) Temporary12 = false; else {                  Temporary12 = (ConstSet52[rects_687866208[0][chckIndx(addInt(i_687866345, 1), 0, (rects_687866208[0]).length - 1)].flag] != undefined);                }              if (Temporary12) {
              extendRight_687866053(rect_687866346);
              }
              
                if (!!((i_687866345 == 0))) Temporary13 = false; else {                  Temporary13 = (ConstSet53[rects_687866208[0][chckIndx(subInt(i_687866345, 1), 0, (rects_687866208[0]).length - 1)].flag] != undefined);                }              if (Temporary13) {
              extendLeft_687866008(rect_687866346);
              }
              
              break;
            default: 
              break;
            }
            i_620767474 = addInt(i_620767474, 1);
            if (!(((rects_687866208[0]).length == L_620767475))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    Label14: do {
      var iHEX60gensym25_687866413 = 0;
      var resultHEX60gensym25_687866434 = newSeq_687866417(chckRange((rects_687866208[0]).length, 0, 2147483647));
      Label15: do {
        var it_687866438 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620767480 = 0;
        var L_620767481 = (rects_687866208[0]).length;
        Label16: do {
            Label17: while (true) {
            if (!(i_620767480 < L_620767481)) break Label17;
              it_687866438 = rects_687866208[0][chckIndx(i_620767480, 0, (rects_687866208[0]).length - 1)];
              resultHEX60gensym25_687866434[chckIndx(iHEX60gensym25_687866413, 0, (resultHEX60gensym25_687866434).length - 1)] = it_687866438.baseline;
              iHEX60gensym25_687866413 = addInt(iHEX60gensym25_687866413, 1);
              i_620767480 = addInt(i_620767480, 1);
              if (!(((rects_687866208[0]).length == L_620767481))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var maxBaseline_687866455 = max_687866443(resultHEX60gensym25_687866434);
    Label18: do {
      var iHEX60gensym30_687866467 = 0;
      var colontmp__620767484 = 0;
      colontmp__620767484 = (rects_687866208[0]).length - 1;
      var res_620767485 = 0;
      Label19: do {
          Label20: while (true) {
          if (!(res_620767485 <= colontmp__620767484)) break Label20;
            iHEX60gensym30_687866467 = res_620767485;
            var it_687866468 = nimCopy(null, rects_687866208[0][chckIndx(iHEX60gensym30_687866467, 0, (rects_687866208[0]).length - 1)], NTI687865860);
            rects_687866208[0][chckIndx(iHEX60gensym30_687866467, 0, (rects_687866208[0]).length - 1)] = nimCopy(rects_687866208[0][chckIndx(iHEX60gensym30_687866467, 0, (rects_687866208[0]).length - 1)], extendUp_687865945(it_687866468, chckRange(subInt(maxBaseline_687866455, it_687866468.baseline), 0, 2147483647)), NTI687865860);
            res_620767485 = addInt(res_620767485, 1);
          }
      } while (false);
    } while (false);
    Label21: do {
      var iHEX60gensym31_687866490 = 0;
      var resultHEX60gensym31_687866511 = newSeq_687866494(chckRange((rects_687866208[0]).length, 0, 2147483647));
      Label22: do {
        var it_687866515 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620767489 = 0;
        var L_620767490 = (rects_687866208[0]).length;
        Label23: do {
            Label24: while (true) {
            if (!(i_620767489 < L_620767490)) break Label24;
              it_687866515 = rects_687866208[0][chckIndx(i_620767489, 0, (rects_687866208[0]).length - 1)];
              resultHEX60gensym31_687866511[chckIndx(iHEX60gensym31_687866490, 0, (resultHEX60gensym31_687866511).length - 1)] = height_687865900(it_687866515);
              iHEX60gensym31_687866490 = addInt(iHEX60gensym31_687866490, 1);
              i_620767489 = addInt(i_620767489, 1);
              if (!(((rects_687866208[0]).length == L_620767490))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var maxHeight_687866532 = max_687866520(resultHEX60gensym31_687866511);
    Label25: do {
      var iHEX60gensym34_687866544 = 0;
      var colontmp__620767493 = 0;
      colontmp__620767493 = (rects_687866208[0]).length - 1;
      var res_620767494 = 0;
      Label26: do {
          Label27: while (true) {
          if (!(res_620767494 <= colontmp__620767493)) break Label27;
            iHEX60gensym34_687866544 = res_620767494;
            var it_687866545 = nimCopy(null, rects_687866208[0][chckIndx(iHEX60gensym34_687866544, 0, (rects_687866208[0]).length - 1)], NTI687865860);
            rects_687866208[0][chckIndx(iHEX60gensym34_687866544, 0, (rects_687866208[0]).length - 1)] = nimCopy(rects_687866208[0][chckIndx(iHEX60gensym34_687866544, 0, (rects_687866208[0]).length - 1)], extendDown_687865996(it_687866545, chckRange(subInt(maxHeight_687866532, height_687865900(it_687866545)), 0, 2147483647)), NTI687865860);
            res_620767494 = addInt(res_620767494, 1);
          }
      } while (false);
    } while (false);
    result_687866065.rows = nimCopy(null, newSeq_452985301(height_687865900(rects_687866208[0][chckIndx(0, 0, (rects_687866208[0]).length - 1)])), NTI452985127);
    Label28: do {
      var i_687866584 = 0;
      var row_687866585 = null;
      var row_687866585_Idx = 0;
      var i_620767503 = 0;
      var L_620767504 = (result_687866065.rows).length;
      Label29: do {
          Label30: while (true) {
          if (!(i_620767503 < L_620767504)) break Label30;
            i_687866584 = i_620767503;
            row_687866585 = result_687866065.rows; row_687866585_Idx = chckIndx(i_620767503, 0, (result_687866065.rows).length - 1);
            Label31: do {
              var iHEX60gensym37_687866607 = 0;
              var resultHEX60gensym37_687866614 = newSeq_452985301(chckRange((rects_687866208[0]).length, 0, 2147483647));
              Label32: do {
                var it_687866618 = ({rows: [], baseline: 0, width: 0, flag: 0});
                var i_620767499 = 0;
                var L_620767500 = (rects_687866208[0]).length;
                Label33: do {
                    Label34: while (true) {
                    if (!(i_620767499 < L_620767500)) break Label34;
                      it_687866618 = rects_687866208[0][chckIndx(i_620767499, 0, (rects_687866208[0]).length - 1)];
                      resultHEX60gensym37_687866614[chckIndx(iHEX60gensym37_687866607, 0, (resultHEX60gensym37_687866614).length - 1)] = nimCopy(null, it_687866618.rows[chckIndx(i_687866584, 0, (it_687866618.rows).length - 1)], NTI33554439);
                      iHEX60gensym37_687866607 = addInt(iHEX60gensym37_687866607, 1);
                      i_620767499 = addInt(i_620767499, 1);
                      if (!(((rects_687866208[0]).length == L_620767500))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            row_687866585[row_687866585_Idx] = nimCopy(null, nsuJoinSep(resultHEX60gensym37_687866614, []), NTI33554439);
            i_620767503 = addInt(i_620767503, 1);
            if (!(((result_687866065.rows).length == L_620767504))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(183, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_687866065.baseline = rects_687866208[0][chckIndx(0, 0, (rects_687866208[0]).length - 1)].baseline;
    Label35: do {
      var iHEX60gensym40_687866644 = 0;
      var resultHEX60gensym40_687866651 = newSeq_687866494(chckRange((rects_687866208[0]).length, 0, 2147483647));
      Label36: do {
        var it_687866655 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620767508 = 0;
        var L_620767509 = (rects_687866208[0]).length;
        Label37: do {
            Label38: while (true) {
            if (!(i_620767508 < L_620767509)) break Label38;
              it_687866655 = rects_687866208[0][chckIndx(i_620767508, 0, (rects_687866208[0]).length - 1)];
              resultHEX60gensym40_687866651[chckIndx(iHEX60gensym40_687866644, 0, (resultHEX60gensym40_687866651).length - 1)] = it_687866655.width;
              iHEX60gensym40_687866644 = addInt(iHEX60gensym40_687866644, 1);
              i_620767508 = addInt(i_620767508, 1);
              if (!(((rects_687866208[0]).length == L_620767509))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    result_687866065.width = sum_687866660(resultHEX60gensym40_687866651);
  } while (false);

  return result_687866065;

}

function map_620761750(a_620761753, fn_620761755) {

function succeedImpl_620761767(inputInHEX60gensym82_620761768, valueInHEX60gensym82_620761769, tailInHEX60gensym82_620761770) {
  var result_620761772 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620761772 = nimCopy(result_620761772, {kind: 0, value: nimCopy(null, valueInHEX60gensym82_620761769, NTI687865860), tail: nimCopy(null, tailInHEX60gensym82_620761770, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym82_620761768, NTI33554439), expected: []}, NTI620757844);

  return result_620761772;

}

function failImpl_620761774(inputInHEX60gensym82_620761775, expectedInHEX60gensym82_620761776, tailInHEX60gensym82_620761777) {
  var result_620761779 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620761779 = nimCopy(result_620761779, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym82_620761776, NTI620760493), tail: nimCopy(null, tailInHEX60gensym82_620761777, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym82_620761775, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620761779;

}
      
function HEX3Aanonymous_620761782(input_620761783) {
            var Temporary2;
          var Temporary3;

        var result_620761785 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761786 = succeedImpl_620761767;
          var fail_620761787 = failImpl_620761774;
          Label1: do {
            var tempHEX60gensym24_620761800 = parse_1090520010(a_620761753, input_620761783);
            if ((tempHEX60gensym24_620761800.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620761800;
            if (ConstSet54[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620761785 = nimCopy(result_620761785, {kind: 1, fromInput: nimCopy(null, input_620761783, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620761800.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761806 = nimCopy(null, tempHEX60gensym24_620761800, NTI1090519270);
          var Temporary3 = result1_620761806;
          if (ConstSet55[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620761785 = nimCopy(result_620761785, succeed_620761786(input_620761783, fn_620761755(Temporary3.value), result1_620761806.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620761785;

      }

  var result_620761756 = null;

    Label1: do {
    } while (false);
    result_620761756 = {body: HEX3Aanonymous_620761782};

  return result_620761756;

}

function substrEq_704643301(s_704643302, pos_704643303, substr_704643304) {
  var result_704643305 = false;

  BeforeRet: do {
    var i_704643306 = 0;
    var length_704643307 = (substr_704643304).length;
    Label1: do {
        Label2: while (true) {
        if (!(((i_704643306 < length_704643307) && (addInt(pos_704643303, i_704643306) < (s_704643302).length)) && (s_704643302[chckIndx(addInt(pos_704643303, i_704643306), 0, (s_704643302).length - 1)] == substr_704643304[chckIndx(i_704643306, 0, (substr_704643304).length - 1)]))) break Label2;
          i_704643306 = addInt(i_704643306, 1);
        }
    } while (false);
    result_704643305 = (i_704643306 == length_704643307);
    break BeforeRet;
  } while (false);

  return result_704643305;

}

function nsuSplitString(s_704643593, sep_704643594, maxsplit_704643595) {
  var result_704643596 = [];

    if (!((0 < (sep_704643594).length))) {
    failedAssertImpl_218103864(makeNimstrLit("strutils.nim(739, 11) `sep.len > 0` "));
    }
    
    result_704643596 = nimCopy(null, [], NTI704643446);
    Label1: do {
      var xHEX60gensym72_704643607 = [];
      var lastHEX60gensym41_620763985 = 0;
      var splitsHEX60gensym41_620763986 = maxsplit_704643595;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym41_620763985 <= (s_704643593).length)) break Label3;
            var firstHEX60gensym41_620763988 = lastHEX60gensym41_620763985;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym41_620763985 < (s_704643593).length) && !(substrEq_704643301(s_704643593, lastHEX60gensym41_620763985, sep_704643594)))) break Label5;
                  lastHEX60gensym41_620763985 = addInt(lastHEX60gensym41_620763985, 1);
                }
            } while (false);
            if ((splitsHEX60gensym41_620763986 == 0)) {
            lastHEX60gensym41_620763985 = (s_704643593).length;
            }
            
            xHEX60gensym72_704643607 = substr_33557922(s_704643593, firstHEX60gensym41_620763988, subInt(lastHEX60gensym41_620763985, 1));
            var Temporary6 = nimCopy(null, xHEX60gensym72_704643607, NTI33554439);
            result_704643596.push(Temporary6);;
            if ((splitsHEX60gensym41_620763986 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym41_620763986 = subInt(splitsHEX60gensym41_620763986, 1);
            lastHEX60gensym41_620763985 = addInt(lastHEX60gensym41_620763985, (sep_704643594).length);
          }
      } while (false);
    } while (false);

  return result_704643596;

}

function nucruneLen(s_654311434) {
  var result_654311435 = 0;

    result_654311435 = 0;
    var i_654311436 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_654311436 < (s_654311434).length)) break Label2;
          if ((s_654311434[chckIndx(i_654311436, 0, (s_654311434).length - 1)] <= 127)) {
          i_654311436 = addInt(i_654311436, 1);
          }
          else {
          if (((s_654311434[chckIndx(i_654311436, 0, (s_654311434).length - 1)] >>> 5) == 6)) {
          i_654311436 = addInt(i_654311436, 2);
          }
          else {
          if (((s_654311434[chckIndx(i_654311436, 0, (s_654311434).length - 1)] >>> 4) == 14)) {
          i_654311436 = addInt(i_654311436, 3);
          }
          else {
          if (((s_654311434[chckIndx(i_654311436, 0, (s_654311434).length - 1)] >>> 3) == 30)) {
          i_654311436 = addInt(i_654311436, 4);
          }
          else {
          if (((s_654311434[chckIndx(i_654311436, 0, (s_654311434).length - 1)] >>> 2) == 62)) {
          i_654311436 = addInt(i_654311436, 5);
          }
          else {
          if (((s_654311434[chckIndx(i_654311436, 0, (s_654311434).length - 1)] >>> 1) == 126)) {
          i_654311436 = addInt(i_654311436, 6);
          }
          else {
          i_654311436 = addInt(i_654311436, 1);
          }
          }}}}}
          result_654311435 = addInt(result_654311435, 1);
        }
    } while (false);

  return result_654311435;

}

function toTextRect_687865909(s_687865910, baseline_687865911, flag_687865912) {
  var result_687865913 = ({rows: [], baseline: 0, width: 0, flag: 0});

  BeforeRet: do {
    if (eqStrings(s_687865910, [])) {
    break BeforeRet;
    }
    
    result_687865913.rows = nimCopy(null, nsuSplitString(s_687865910, makeNimstrLit("\x0A"), -1), NTI704643434);
    result_687865913.width = chckRange(nucruneLen(result_687865913.rows[chckIndx(0, 0, (result_687865913.rows).length - 1)]), 0, 2147483647);
    Label1: do {
      var row_687865934 = [];
      var i_620763979 = 0;
      var L_620763980 = (result_687865913.rows).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620763979 < L_620763980)) break Label3;
            row_687865934 = result_687865913.rows[chckIndx(i_620763979, 0, (result_687865913.rows).length - 1)];
            if (!((nucruneLen(row_687865934) == result_687865913.width))) {
            raiseException({message: makeNimstrLit("All rows of a TextRect must be the same width"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            i_620763979 = addInt(i_620763979, 1);
            if (!(((result_687865913.rows).length == L_620763980))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_687865913.baseline = baseline_687865911;
    result_687865913.flag = flag_687865912;
  } while (false);

  return result_687865913;

}

function HEX7C_620762766(a_620762768, b_620762769) {

function succeedImpl_620762781(inputInHEX60gensym103_620762782, valueInHEX60gensym103_620762783, tailInHEX60gensym103_620762784) {
  var result_620762786 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620762786 = nimCopy(result_620762786, {kind: 0, value: nimCopy(null, valueInHEX60gensym103_620762783, NTI687865860), tail: nimCopy(null, tailInHEX60gensym103_620762784, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym103_620762782, NTI33554439), expected: []}, NTI620757844);

  return result_620762786;

}

function failImpl_620762788(inputInHEX60gensym103_620762789, expectedInHEX60gensym103_620762790, tailInHEX60gensym103_620762791) {
  var result_620762793 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620762793 = nimCopy(result_620762793, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym103_620762790, NTI620761276), tail: nimCopy(null, tailInHEX60gensym103_620762791, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym103_620762789, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620762793;

}
      
function HEX3Aanonymous_620762796(input_620762797) {
          var Temporary1;
          var Temporary2;

        var result_620762799 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762800 = succeedImpl_620762781;
          var fail_620762801 = failImpl_620762788;
          var result1_620762814 = parse_620760599(a_620762768, input_620762797);
          if ((result1_620762814.kind == 0)) {
          result_620762799 = nimCopy(result_620762799, result1_620762814, NTI620757844);
          break BeforeRet;
          }
          
          var result2_620762831 = parse_620760599(b_620762769, input_620762797);
          if ((result2_620762831.kind == 0)) {
          result_620762799 = nimCopy(result_620762799, result2_620762831, NTI620757844);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620762814;
          if (ConstSet56[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1090519061)); }
          var Temporary2 = result2_620762831;
          if (ConstSet57[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
          result_620762799 = nimCopy(result_620762799, fail_620762801(input_620762797, HEX26_687865962(Temporary1.expected, Temporary2.expected), input_620762797), NTI620757844);
        } while (false);

        return result_620762799;

      }

  var result_620762770 = null;

    Label1: do {
    } while (false);
    result_620762770 = {body: HEX3Aanonymous_620762796};

  return result_620762770;

}

function HEX3CHEX3DHEX25_33555429(x_33555430, y_33555431) {
  var result_33555432 = false;

    result_33555432 = ((x_33555430 >>> 0) <= (y_33555431 >>> 0));

  return result_33555432;

}

function nuctoUTF8(c_654311765) {
  var result_654311766 = [];

    result_654311766 = nimCopy(null, [], NTI33554439);
    var iHEX60gensym49_654311768 = c_654311765;
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_654311768, 127)) {
    (result_654311766.length = 1);
    result_654311766[chckIndx(0, 0, (result_654311766).length - 1)] = chckRange(iHEX60gensym49_654311768, 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_654311768, 2047)) {
    (result_654311766.length = 2);
    result_654311766[chckIndx(0, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 >> 6) | 192), 0, 255);
    result_654311766[chckIndx(1, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_654311768, 65535)) {
    (result_654311766.length = 3);
    result_654311766[chckIndx(0, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 >> 12) | 224), 0, 255);
    result_654311766[chckIndx(1, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 6) & 63) | 128), 0, 255);
    result_654311766[chckIndx(2, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_654311768, 2097151)) {
    (result_654311766.length = 4);
    result_654311766[chckIndx(0, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 >> 18) | 240), 0, 255);
    result_654311766[chckIndx(1, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 12) & 63) | 128), 0, 255);
    result_654311766[chckIndx(2, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 6) & 63) | 128), 0, 255);
    result_654311766[chckIndx(3, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_654311768, 67108863)) {
    (result_654311766.length = 5);
    result_654311766[chckIndx(0, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 >> 24) | 248), 0, 255);
    result_654311766[chckIndx(1, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 18) & 63) | 128), 0, 255);
    result_654311766[chckIndx(2, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 12) & 63) | 128), 0, 255);
    result_654311766[chckIndx(3, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 6) & 63) | 128), 0, 255);
    result_654311766[chckIndx(4, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_33555429(iHEX60gensym49_654311768, 2147483647)) {
    (result_654311766.length = 6);
    result_654311766[chckIndx(0, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 >> 30) | 252), 0, 255);
    result_654311766[chckIndx(1, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 24) & 63) | 128), 0, 255);
    result_654311766[chckIndx(2, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 18) & 63) | 128), 0, 255);
    result_654311766[chckIndx(3, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 12) & 63) | 128), 0, 255);
    result_654311766[chckIndx(4, 0, (result_654311766).length - 1)] = chckRange((((iHEX60gensym49_654311768 >> 6) & 63) | 128), 0, 255);
    result_654311766[chckIndx(5, 0, (result_654311766).length - 1)] = chckRange(((iHEX60gensym49_654311768 & 63) | 128), 0, 255);
    }
    else {
    }
    }}}}}

  return result_654311766;

}

function HEX24_654312015(rune_654312016) {
  var result_654312017 = [];

    result_654312017 = nimCopy(null, nuctoUTF8(rune_654312016), NTI33554439);

  return result_654312017;

}

function inFont_637534317(letter_637534318, font_637534319) {
    var Temporary4;

  var result_637534320 = [];

  BeforeRet: do {
    Label1: do {
      var lhs_637534342 = 0;
      var rhs_637534343 = [];
      var colontmp__620767560 = [];
      colontmp__620767560 = fontExceptions_637534244[chckIndx(font_637534319, 0, (fontExceptions_637534244).length - 1)];
      var i_620767562 = 0;
      var L_620767563 = (colontmp__620767560).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767562 < L_620767563)) break Label3;
            lhs_637534342 = colontmp__620767560[chckIndx(i_620767562, 0, (colontmp__620767560).length - 1)]["Field0"];
            rhs_637534343 = colontmp__620767560[chckIndx(i_620767562, 0, (colontmp__620767560).length - 1)]["Field1"];
            if ((letter_637534318 == lhs_637534342)) {
            result_637534320 = nimCopy(null, rhs_637534343, NTI33554439);
            break BeforeRet;
            }
            
            i_620767562 = addInt(i_620767562, 1);
            if (!(((colontmp__620767560).length == L_620767563))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if (contains_637534374(HEX2EHEX2E_637534344(65, 90), letter_637534318)) {
    Temporary4 = 65;
    }
    else {
    Temporary4 = 71;
    }
    
    var shift_637534381 = Temporary4;
    result_637534320 = nimCopy(null, HEX24_654312015(((subInt(addInt(fontStarts_637534223[chckIndx(font_637534319, 0, (fontStarts_637534223).length - 1)], letter_637534318), shift_637534381)) | 0)), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_637534320;

}

function map_620762702(s_620762705, op_620762707) {
  var result_620762708 = [];

    result_620762708 = new Array(chckRange((s_620762705).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_620762705).length, 0, 2147483647) ; ++i) { result_620762708[i] = null; }    Label1: do {
      var i_620762724 = 0;
      var colontmp__620767566 = 0;
      colontmp__620767566 = (s_620762705).length;
      var i_620767567 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767567 < colontmp__620767566)) break Label3;
            i_620762724 = i_620767567;
            result_620762708[chckIndx(i_620762724, 0, (result_620762708).length - 1)] = op_620762707(s_620762705[chckIndx(i_620762724, 0, (s_620762705).length - 1)]);
            i_620767567 = addInt(i_620767567, 1);
          }
      } while (false);
    } while (false);

  return result_620762708;

}

function HEX3CHEX3C_620762221(a_620762224, b_620762225) {

function succeedImpl_620762237(inputInHEX60gensym87_620762238, valueInHEX60gensym87_620762239, tailInHEX60gensym87_620762240) {
  var result_620762242 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620762242 = nimCopy(result_620762242, {kind: 0, value: valueInHEX60gensym87_620762239, tail: nimCopy(null, tailInHEX60gensym87_620762240, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym87_620762238, NTI33554439), expected: []}, NTI1090519270);

  return result_620762242;

}

function failImpl_620762244(inputInHEX60gensym87_620762245, expectedInHEX60gensym87_620762246, tailInHEX60gensym87_620762247) {
  var result_620762249 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620762249 = nimCopy(result_620762249, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym87_620762246, NTI620760822), tail: nimCopy(null, tailInHEX60gensym87_620762247, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym87_620762245, NTI33554439), value: 0}, NTI1090519270);

  return result_620762249;

}
      
function HEX3Aanonymous_620762252(input_620762253) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620762255 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762256 = succeedImpl_620762237;
          var fail_620762257 = failImpl_620762244;
          Label1: do {
            var tempHEX60gensym30_620762270 = parse_1090520010(a_620762224, input_620762253);
            if ((tempHEX60gensym30_620762270.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620762270;
            if (ConstSet58[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620762255 = nimCopy(result_620762255, {kind: 1, fromInput: nimCopy(null, input_620762253, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym30_620762270.tail, NTI33554439), value: 0}, NTI1090519270);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620762276 = nimCopy(null, tempHEX60gensym30_620762270, NTI1090519270);
          Label3: do {
            var tempHEX60gensym32_620762289 = parse_1090520010(b_620762225, result1_620762276.tail);
            if ((tempHEX60gensym32_620762289.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620762289;
            if (ConstSet59[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620762255 = nimCopy(result_620762255, {kind: 1, fromInput: nimCopy(null, input_620762253, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym32_620762289.tail, NTI33554439), value: 0}, NTI1090519270);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620762295 = nimCopy(null, tempHEX60gensym32_620762289, NTI1090519270);
          var Temporary5 = result1_620762276;
          if (ConstSet60[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620762255 = nimCopy(result_620762255, succeed_620762256(input_620762253, Temporary5.value, result2_620762295.tail), NTI1090519270);
          break BeforeRet;
        } while (false);

        return result_620762255;

      }

  var result_620762226 = null;

    Label1: do {
    } while (false);
    result_620762226 = {body: HEX3Aanonymous_620762252};

  return result_620762226;

}

function HEX3CHEX3C_620762138(a_620762141, b_620762142) {

function succeedImpl_620762154(inputInHEX60gensym86_620762155, valueInHEX60gensym86_620762156, tailInHEX60gensym86_620762157) {
  var result_620762159 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620762159 = nimCopy(result_620762159, {kind: 0, value: valueInHEX60gensym86_620762156, tail: nimCopy(null, tailInHEX60gensym86_620762157, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym86_620762155, NTI33554439), expected: []}, NTI1090519270);

  return result_620762159;

}

function failImpl_620762161(inputInHEX60gensym86_620762162, expectedInHEX60gensym86_620762163, tailInHEX60gensym86_620762164) {
  var result_620762166 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620762166 = nimCopy(result_620762166, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym86_620762163, NTI620760761), tail: nimCopy(null, tailInHEX60gensym86_620762164, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym86_620762162, NTI33554439), value: 0}, NTI1090519270);

  return result_620762166;

}
      
function HEX3Aanonymous_620762169(input_620762170) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620762172 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762173 = succeedImpl_620762154;
          var fail_620762174 = failImpl_620762161;
          Label1: do {
            var tempHEX60gensym30_620762187 = parse_1090520010(a_620762141, input_620762170);
            if ((tempHEX60gensym30_620762187.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620762187;
            if (ConstSet61[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620762172 = nimCopy(result_620762172, {kind: 1, fromInput: nimCopy(null, input_620762170, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym30_620762187.tail, NTI33554439), value: 0}, NTI1090519270);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620762193 = nimCopy(null, tempHEX60gensym30_620762187, NTI1090519270);
          Label3: do {
            var tempHEX60gensym32_620762206 = parse_620759604(b_620762142, result1_620762193.tail);
            if ((tempHEX60gensym32_620762206.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620762206;
            if (ConstSet62[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620762172 = nimCopy(result_620762172, {kind: 1, fromInput: nimCopy(null, input_620762170, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym32_620762206.tail, NTI33554439), value: 0}, NTI1090519270);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620762212 = nimCopy(null, tempHEX60gensym32_620762206, NTI620758259);
          var Temporary5 = result1_620762193;
          if (ConstSet63[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620762172 = nimCopy(result_620762172, succeed_620762173(input_620762170, Temporary5.value, result2_620762212.tail), NTI1090519270);
          break BeforeRet;
        } while (false);

        return result_620762172;

      }

  var result_620762143 = null;

    Label1: do {
    } while (false);
    result_620762143 = {body: HEX3Aanonymous_620762169};

  return result_620762143;

}

function HEX3EHEX3E_620761959(a_620761962, b_620761963) {

function succeedImpl_620761975(inputInHEX60gensym84_620761976, valueInHEX60gensym84_620761977, tailInHEX60gensym84_620761978) {
  var result_620761980 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620761980 = nimCopy(result_620761980, {kind: 0, value: valueInHEX60gensym84_620761977, tail: nimCopy(null, tailInHEX60gensym84_620761978, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym84_620761976, NTI33554439), expected: []}, NTI1090519270);

  return result_620761980;

}

function failImpl_620761982(inputInHEX60gensym84_620761983, expectedInHEX60gensym84_620761984, tailInHEX60gensym84_620761985) {
  var result_620761987 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620761987 = nimCopy(result_620761987, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym84_620761984, NTI620760634), tail: nimCopy(null, tailInHEX60gensym84_620761985, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym84_620761983, NTI33554439), value: 0}, NTI1090519270);

  return result_620761987;

}
      
function HEX3Aanonymous_620761990(input_620761991) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620761993 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761994 = succeedImpl_620761975;
          var fail_620761995 = failImpl_620761982;
          Label1: do {
            var tempHEX60gensym34_620762008 = parse_620759604(a_620761962, input_620761991);
            if ((tempHEX60gensym34_620762008.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620762008;
            if (ConstSet64[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620761993 = nimCopy(result_620761993, {kind: 1, fromInput: nimCopy(null, input_620761991, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym34_620762008.tail, NTI33554439), value: 0}, NTI1090519270);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620762014 = nimCopy(null, tempHEX60gensym34_620762008, NTI620758259);
          Label3: do {
            var tempHEX60gensym36_620762027 = parse_1090520010(b_620761963, result1_620762014.tail);
            if ((tempHEX60gensym36_620762027.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620762027;
            if (ConstSet65[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620761993 = nimCopy(result_620761993, {kind: 1, fromInput: nimCopy(null, input_620761991, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym36_620762027.tail, NTI33554439), value: 0}, NTI1090519270);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620762033 = nimCopy(null, tempHEX60gensym36_620762027, NTI1090519270);
          var Temporary5 = result2_620762033;
          if (ConstSet66[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620761993 = nimCopy(result_620761993, succeed_620761994(input_620761991, Temporary5.value, result2_620762033.tail), NTI1090519270);
          break BeforeRet;
        } while (false);

        return result_620761993;

      }

  var result_620761964 = null;

    Label1: do {
    } while (false);
    result_620761964 = {body: HEX3Aanonymous_620761990};

  return result_620761964;

}

function HEX3EHEX3E_620762042(a_620762045, b_620762046) {

function succeedImpl_620762058(inputInHEX60gensym85_620762059, valueInHEX60gensym85_620762060, tailInHEX60gensym85_620762061) {
  var result_620762063 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762063 = nimCopy(result_620762063, {kind: 0, value: nimCopy(null, valueInHEX60gensym85_620762060, NTI620758253), tail: nimCopy(null, tailInHEX60gensym85_620762061, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym85_620762059, NTI33554439), expected: []}, NTI620758259);

  return result_620762063;

}

function failImpl_620762065(inputInHEX60gensym85_620762066, expectedInHEX60gensym85_620762067, tailInHEX60gensym85_620762068) {
  var result_620762070 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620762070 = nimCopy(result_620762070, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym85_620762067, NTI620760695), tail: nimCopy(null, tailInHEX60gensym85_620762068, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym85_620762066, NTI33554439), value: []}, NTI620758259);

  return result_620762070;

}
      
function HEX3Aanonymous_620762073(input_620762074) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620762076 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762077 = succeedImpl_620762058;
          var fail_620762078 = failImpl_620762065;
          Label1: do {
            var tempHEX60gensym34_620762091 = parse_1090520010(a_620762045, input_620762074);
            if ((tempHEX60gensym34_620762091.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620762091;
            if (ConstSet67[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620762076 = nimCopy(result_620762076, {kind: 1, fromInput: nimCopy(null, input_620762074, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym34_620762091.tail, NTI33554439), value: []}, NTI620758259);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620762097 = nimCopy(null, tempHEX60gensym34_620762091, NTI1090519270);
          Label3: do {
            var tempHEX60gensym36_620762110 = parse_620759604(b_620762046, result1_620762097.tail);
            if ((tempHEX60gensym36_620762110.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620762110;
            if (ConstSet68[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620762076 = nimCopy(result_620762076, {kind: 1, fromInput: nimCopy(null, input_620762074, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym36_620762110.tail, NTI33554439), value: []}, NTI620758259);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620762116 = nimCopy(null, tempHEX60gensym36_620762110, NTI620758259);
          var Temporary5 = result2_620762116;
          if (ConstSet69[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620762076 = nimCopy(result_620762076, succeed_620762077(input_620762074, Temporary5.value, result2_620762116.tail), NTI620758259);
          break BeforeRet;
        } while (false);

        return result_620762076;

      }

  var result_620762047 = null;

    Label1: do {
    } while (false);
    result_620762047 = {body: HEX3Aanonymous_620762073};

  return result_620762047;

}

function HEX3EHEX3E_620761876(a_620761879, b_620761880) {

function succeedImpl_620761892(inputInHEX60gensym83_620761893, valueInHEX60gensym83_620761894, tailInHEX60gensym83_620761895) {
  var result_620761897 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761897 = nimCopy(result_620761897, {kind: 0, value: nimCopy(null, valueInHEX60gensym83_620761894, NTI620758253), tail: nimCopy(null, tailInHEX60gensym83_620761895, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym83_620761893, NTI33554439), expected: []}, NTI620758259);

  return result_620761897;

}

function failImpl_620761899(inputInHEX60gensym83_620761900, expectedInHEX60gensym83_620761901, tailInHEX60gensym83_620761902) {
  var result_620761904 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620761904 = nimCopy(result_620761904, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym83_620761901, NTI620760573), tail: nimCopy(null, tailInHEX60gensym83_620761902, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym83_620761900, NTI33554439), value: []}, NTI620758259);

  return result_620761904;

}
      
function HEX3Aanonymous_620761907(input_620761908) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620761910 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620761911 = succeedImpl_620761892;
          var fail_620761912 = failImpl_620761899;
          Label1: do {
            var tempHEX60gensym34_620761925 = parse_620758704(a_620761879, input_620761908);
            if ((tempHEX60gensym34_620761925.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620761925;
            if (ConstSet70[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620761910 = nimCopy(result_620761910, {kind: 1, fromInput: nimCopy(null, input_620761908, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym34_620761925.tail, NTI33554439), value: []}, NTI620758259);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620761931 = nimCopy(null, tempHEX60gensym34_620761925, NTI1090519172);
          Label3: do {
            var tempHEX60gensym36_620761944 = parse_620759604(b_620761880, result1_620761931.tail);
            if ((tempHEX60gensym36_620761944.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620761944;
            if (ConstSet71[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620761910 = nimCopy(result_620761910, {kind: 1, fromInput: nimCopy(null, input_620761908, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym36_620761944.tail, NTI33554439), value: []}, NTI620758259);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620761950 = nimCopy(null, tempHEX60gensym36_620761944, NTI620758259);
          var Temporary5 = result2_620761950;
          if (ConstSet72[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620761910 = nimCopy(result_620761910, succeed_620761911(input_620761908, Temporary5.value, result2_620761950.tail), NTI620758259);
          break BeforeRet;
        } while (false);

        return result_620761910;

      }

  var result_620761881 = null;

    Label1: do {
    } while (false);
    result_620761881 = {body: HEX3Aanonymous_620761907};

  return result_620761881;

}

function nsuStartsWith(s_704644385, prefix_704644386) {
            var Temporary3;

  var result_704644387 = false;

  BeforeRet: do {
    var prefixLenHEX60gensym141_704644392 = (prefix_704644386).length;
    var sLenHEX60gensym141_704644393 = (s_704644385).length;
    var iHEX60gensym141_704644394 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym141_704644392 <= iHEX60gensym141_704644394)) {
          result_704644387 = true;
          break BeforeRet;
          }
          
            if ((sLenHEX60gensym141_704644393 <= iHEX60gensym141_704644394)) Temporary3 = true; else {              Temporary3 = !((s_704644385[chckIndx(iHEX60gensym141_704644394, 0, (s_704644385).length - 1)] == prefix_704644386[chckIndx(iHEX60gensym141_704644394, 0, (prefix_704644386).length - 1)]));            }          if (Temporary3) {
          result_704644387 = false;
          break BeforeRet;
          }
          
          iHEX60gensym141_704644394 = addInt(iHEX60gensym141_704644394, 1);
        }
    } while (false);
  } while (false);

  return result_704644387;

}

function s_1090519151(expect_1090519152) {

function succeedImpl_1090519173(inputInHEX60gensym2_1090519174, valueInHEX60gensym2_1090519175, tailInHEX60gensym2_1090519176) {
  var result_1090519178 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1090519178 = nimCopy(result_1090519178, {kind: 0, value: nimCopy(null, valueInHEX60gensym2_1090519175, NTI33554439), tail: nimCopy(null, tailInHEX60gensym2_1090519176, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym2_1090519174, NTI33554439), expected: []}, NTI1090519172);

  return result_1090519178;

}

function failImpl_1090519201(inputInHEX60gensym2_1090519202, expectedInHEX60gensym2_1090519203, tailInHEX60gensym2_1090519204) {
  var result_1090519206 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_1090519206 = nimCopy(result_1090519206, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym2_1090519203, NTI1090519206), tail: nimCopy(null, tailInHEX60gensym2_1090519204, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym2_1090519202, NTI33554439), value: []}, NTI1090519172);

  return result_1090519206;

}
      expect_1090519152 = nimCopy(null, expect_1090519152, NTI33554439);
      
function HEX3Aanonymous_1090519209(input_1090519210) {
        var result_1090519212 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1090519213 = succeedImpl_1090519173;
          var fail_1090519214 = failImpl_1090519201;
          if (nsuStartsWith(input_1090519210, expect_1090519152)) {
          result_1090519212 = nimCopy(result_1090519212, succeed_1090519213(input_1090519210, expect_1090519152, HEX5BHEX5D_654314667(input_1090519210, HEX2EHEX2E_654314640((expect_1090519152).length, 1))), NTI1090519172);
          break BeforeRet;
          }
          
          result_1090519212 = nimCopy(result_1090519212, fail_1090519214(input_1090519210, [nsuFormatSingleElem(makeNimstrLit("\'$1\'"), expect_1090519152)], input_1090519210), NTI1090519172);
        } while (false);

        return result_1090519212;

      }

  var result_1090519162 = null;

    Label1: do {
    } while (false);
    result_1090519162 = {body: HEX3Aanonymous_1090519209};

  return result_1090519162;

}

function c_1090519273(expect_1090519274) {

function succeedImpl_1090519295(inputInHEX60gensym5_1090519296, valueInHEX60gensym5_1090519297, tailInHEX60gensym5_1090519298) {
  var result_1090519300 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1090519300 = nimCopy(result_1090519300, {kind: 0, value: valueInHEX60gensym5_1090519297, tail: nimCopy(null, tailInHEX60gensym5_1090519298, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym5_1090519296, NTI33554439), expected: []}, NTI1090519270);

  return result_1090519300;

}

function failImpl_1090519314(inputInHEX60gensym5_1090519315, expectedInHEX60gensym5_1090519316, tailInHEX60gensym5_1090519317) {
  var result_1090519319 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_1090519319 = nimCopy(result_1090519319, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym5_1090519316, NTI1090519298), tail: nimCopy(null, tailInHEX60gensym5_1090519317, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym5_1090519315, NTI33554439), value: 0}, NTI1090519270);

  return result_1090519319;

}
      
function HEX3Aanonymous_1090519322(input_1090519323) {
            var Temporary1;

        var result_1090519325 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_1090519326 = succeedImpl_1090519295;
          var fail_1090519327 = failImpl_1090519314;
            if (!(0 < (input_1090519323).length)) Temporary1 = false; else {              Temporary1 = (input_1090519323[chckIndx(0, 0, (input_1090519323).length - 1)] == expect_1090519274);            }          if (Temporary1) {
          result_1090519325 = nimCopy(result_1090519325, succeed_1090519326(input_1090519323, expect_1090519274, HEX5BHEX5D_654314667(input_1090519323, HEX2EHEX2E_654314640(1, 1))), NTI1090519270);
          break BeforeRet;
          }
          
          result_1090519325 = nimCopy(result_1090519325, fail_1090519327(input_1090519323, [nsuFormatSingleElem(makeNimstrLit("\'$1\'"), nimCharToStr(expect_1090519274))], input_1090519323), NTI1090519270);
        } while (false);

        return result_1090519325;

      }

  var result_1090519284 = null;

    Label1: do {
    } while (false);
    result_1090519284 = {body: HEX3Aanonymous_1090519322};

  return result_1090519284;

}

function map_620759045(a_620759048, fn_620759050) {

function succeedImpl_620759062(inputInHEX60gensym29_620759063, valueInHEX60gensym29_620759064, tailInHEX60gensym29_620759065) {
  var result_620759067 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620759067 = nimCopy(result_620759067, {kind: 0, value: nimCopy(null, valueInHEX60gensym29_620759064, NTI687865860), tail: nimCopy(null, tailInHEX60gensym29_620759065, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym29_620759063, NTI33554439), expected: []}, NTI620757844);

  return result_620759067;

}

function failImpl_620759081(inputInHEX60gensym29_620759082, expectedInHEX60gensym29_620759083, tailInHEX60gensym29_620759084) {
  var result_620759086 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620759086 = nimCopy(result_620759086, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym29_620759083, NTI620758196), tail: nimCopy(null, tailInHEX60gensym29_620759084, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym29_620759082, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620759086;

}
      
function HEX3Aanonymous_620759089(input_620759090) {
            var Temporary2;
          var Temporary3;

        var result_620759092 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620759093 = succeedImpl_620759062;
          var fail_620759094 = failImpl_620759081;
          Label1: do {
            var tempHEX60gensym24_620759107 = parse_620758704(a_620759048, input_620759090);
            if ((tempHEX60gensym24_620759107.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620759107;
            if (ConstSet73[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620759092 = nimCopy(result_620759092, {kind: 1, fromInput: nimCopy(null, input_620759090, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620759107.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620759113 = nimCopy(null, tempHEX60gensym24_620759107, NTI1090519172);
          var Temporary3 = result1_620759113;
          if (ConstSet74[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620759092 = nimCopy(result_620759092, succeed_620759093(input_620759090, fn_620759050(Temporary3.value), result1_620759113.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620759092;

      }

  var result_620759051 = null;

    Label1: do {
    } while (false);
    result_620759051 = {body: HEX3Aanonymous_620759089};

  return result_620759051;

}

function map_620758881(s_620758884, op_620758886) {
  var result_620758887 = [];

    result_620758887 = new Array(chckRange((s_620758884).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_620758884).length, 0, 2147483647) ; ++i) { result_620758887[i] = null; }    Label1: do {
      var i_620758902 = 0;
      var colontmp__620767599 = 0;
      colontmp__620767599 = (s_620758884).length;
      var i_620767600 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767600 < colontmp__620767599)) break Label3;
            i_620758902 = i_620767600;
            result_620758887[chckIndx(i_620758902, 0, (result_620758887).length - 1)] = op_620758886(s_620758884[chckIndx(i_620758902, 0, (s_620758884).length - 1)]);
            i_620767600 = addInt(i_620767600, 1);
          }
      } while (false);
    } while (false);

  return result_620758887;

}

function map_620758777(a_620758780, fn_620758782) {

function succeedImpl_620758794(inputInHEX60gensym22_620758795, valueInHEX60gensym22_620758796, tailInHEX60gensym22_620758797) {
  var result_620758799 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758799 = nimCopy(result_620758799, {kind: 0, value: nimCopy(null, valueInHEX60gensym22_620758796, NTI33554439), tail: nimCopy(null, tailInHEX60gensym22_620758797, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym22_620758795, NTI33554439), expected: []}, NTI1090519172);

  return result_620758799;

}

function failImpl_620758801(inputInHEX60gensym22_620758802, expectedInHEX60gensym22_620758803, tailInHEX60gensym22_620758804) {
  var result_620758806 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758806 = nimCopy(result_620758806, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym22_620758803, NTI620758015), tail: nimCopy(null, tailInHEX60gensym22_620758804, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym22_620758802, NTI33554439), value: []}, NTI1090519172);

  return result_620758806;

}
      
function HEX3Aanonymous_620758809(input_620758810) {
            var Temporary2;
          var Temporary3;

        var result_620758812 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620758813 = succeedImpl_620758794;
          var fail_620758814 = failImpl_620758801;
          Label1: do {
            var tempHEX60gensym24_620758827 = parse_620758704(a_620758780, input_620758810);
            if ((tempHEX60gensym24_620758827.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620758827;
            if (ConstSet75[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620758812 = nimCopy(result_620758812, {kind: 1, fromInput: nimCopy(null, input_620758810, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620758827.tail, NTI33554439), value: []}, NTI1090519172);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620758833 = nimCopy(null, tempHEX60gensym24_620758827, NTI1090519172);
          var Temporary3 = result1_620758833;
          if (ConstSet76[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620758812 = nimCopy(result_620758812, succeed_620758813(input_620758810, fn_620758782(Temporary3.value), result1_620758833.tail), NTI1090519172);
          break BeforeRet;
        } while (false);

        return result_620758812;

      }

  var result_620758783 = null;

    Label1: do {
    } while (false);
    result_620758783 = {body: HEX3Aanonymous_620758809};

  return result_620758783;

}

function HEX3CHEX3C_620758659(a_620758662, b_620758663) {

function succeedImpl_620758675(inputInHEX60gensym20_620758676, valueInHEX60gensym20_620758677, tailInHEX60gensym20_620758678) {
  var result_620758680 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758680 = nimCopy(result_620758680, {kind: 0, value: nimCopy(null, valueInHEX60gensym20_620758677, NTI33554439), tail: nimCopy(null, tailInHEX60gensym20_620758678, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_620758676, NTI33554439), expected: []}, NTI1090519172);

  return result_620758680;

}

function failImpl_620758682(inputInHEX60gensym20_620758683, expectedInHEX60gensym20_620758684, tailInHEX60gensym20_620758685) {
  var result_620758687 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758687 = nimCopy(result_620758687, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym20_620758684, NTI620757925), tail: nimCopy(null, tailInHEX60gensym20_620758685, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym20_620758683, NTI33554439), value: []}, NTI1090519172);

  return result_620758687;

}
      
function HEX3Aanonymous_620758690(input_620758691) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620758693 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620758694 = succeedImpl_620758675;
          var fail_620758695 = failImpl_620758682;
          Label1: do {
            var tempHEX60gensym30_620758720 = parse_620758704(a_620758662, input_620758691);
            if ((tempHEX60gensym30_620758720.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620758720;
            if (ConstSet77[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620758693 = nimCopy(result_620758693, {kind: 1, fromInput: nimCopy(null, input_620758691, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym30_620758720.tail, NTI33554439), value: []}, NTI1090519172);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620758726 = nimCopy(null, tempHEX60gensym30_620758720, NTI1090519172);
          Label3: do {
            var tempHEX60gensym32_620758739 = parse_1090520010(b_620758663, result1_620758726.tail);
            if ((tempHEX60gensym32_620758739.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620758739;
            if (ConstSet78[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620758693 = nimCopy(result_620758693, {kind: 1, fromInput: nimCopy(null, input_620758691, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym32_620758739.tail, NTI33554439), value: []}, NTI1090519172);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620758745 = nimCopy(null, tempHEX60gensym32_620758739, NTI1090519270);
          var Temporary5 = result1_620758726;
          if (ConstSet79[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620758693 = nimCopy(result_620758693, succeed_620758694(input_620758691, Temporary5.value, result2_620758745.tail), NTI1090519172);
          break BeforeRet;
        } while (false);

        return result_620758693;

      }

  var result_620758664 = null;

    Label1: do {
    } while (false);
    result_620758664 = {body: HEX3Aanonymous_620758690};

  return result_620758664;

}

function HEX21_620758602(a_620758604) {

function succeedImpl_620758616(inputInHEX60gensym19_620758617, valueInHEX60gensym19_620758618, tailInHEX60gensym19_620758619) {
  var result_620758621 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620758621 = nimCopy(result_620758621, {kind: 0, value: valueInHEX60gensym19_620758618, tail: nimCopy(null, tailInHEX60gensym19_620758619, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym19_620758617, NTI33554439), expected: []}, NTI1090519270);

  return result_620758621;

}

function failImpl_620758623(inputInHEX60gensym19_620758624, expectedInHEX60gensym19_620758625, tailInHEX60gensym19_620758626) {
  var result_620758628 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620758628 = nimCopy(result_620758628, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym19_620758625, NTI620757880), tail: nimCopy(null, tailInHEX60gensym19_620758626, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym19_620758624, NTI33554439), value: 0}, NTI1090519270);

  return result_620758628;

}
      
function HEX3Aanonymous_620758631(input_620758632) {
        var result_620758634 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620758635 = succeedImpl_620758616;
          var fail_620758636 = failImpl_620758623;
          var result1_620758649 = parse_1090520010(a_620758604, input_620758632);
          switch (result1_620758649.kind) {
          case 0:
            result_620758634 = nimCopy(result_620758634, fail_620758636(input_620758632, [makeNimstrLit("successful negative lookahead")], input_620758632), NTI1090519270);
            break BeforeRet;
            break;
          case 1:
            result_620758634 = nimCopy(result_620758634, succeed_620758635(input_620758632, 0, input_620758632), NTI1090519270);
            break BeforeRet;
            break;
          }
        } while (false);

        return result_620758634;

      }

  var result_620758605 = null;

    Label1: do {
    } while (false);
    result_620758605 = {body: HEX3Aanonymous_620758631};

  return result_620758605;

}

function HEX7C_620758944(a_620758946, b_620758947) {

function succeedImpl_620758959(inputInHEX60gensym28_620758960, valueInHEX60gensym28_620758961, tailInHEX60gensym28_620758962) {
  var result_620758964 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758964 = nimCopy(result_620758964, {kind: 0, value: nimCopy(null, valueInHEX60gensym28_620758961, NTI33554439), tail: nimCopy(null, tailInHEX60gensym28_620758962, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym28_620758960, NTI33554439), expected: []}, NTI1090519172);

  return result_620758964;

}

function failImpl_620758966(inputInHEX60gensym28_620758967, expectedInHEX60gensym28_620758968, tailInHEX60gensym28_620758969) {
  var result_620758971 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620758971 = nimCopy(result_620758971, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym28_620758968, NTI620758124), tail: nimCopy(null, tailInHEX60gensym28_620758969, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym28_620758967, NTI33554439), value: []}, NTI1090519172);

  return result_620758971;

}
      
function HEX3Aanonymous_620758974(input_620758975) {
          var Temporary1;
          var Temporary2;

        var result_620758977 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620758978 = succeedImpl_620758959;
          var fail_620758979 = failImpl_620758966;
          var result1_620758992 = parse_620758704(a_620758946, input_620758975);
          if ((result1_620758992.kind == 0)) {
          result_620758977 = nimCopy(result_620758977, result1_620758992, NTI1090519172);
          break BeforeRet;
          }
          
          var result2_620759009 = parse_620758704(b_620758947, input_620758975);
          if ((result2_620759009.kind == 0)) {
          result_620758977 = nimCopy(result_620758977, result2_620759009, NTI1090519172);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620758992;
          if (ConstSet80[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1090519061)); }
          var Temporary2 = result2_620759009;
          if (ConstSet81[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
          result_620758977 = nimCopy(result_620758977, fail_620758979(input_620758975, HEX26_687865962(Temporary1.expected, Temporary2.expected), input_620758975), NTI1090519172);
        } while (false);

        return result_620758977;

      }

  var result_620758948 = null;

    Label1: do {
    } while (false);
    result_620758948 = {body: HEX3Aanonymous_620758974};

  return result_620758948;

}

function lookupTableParser_620758564(table_620758565, flag_620758566) {
    
function HEX3Aanonymous_620758577(entry_620758580) {
        var Temporary1;
        
function HEX3Aanonymous_620758756(x_620758772) {
          var result_620758775 = [];

            result_620758775 = nimCopy(null, val_620758585, NTI33554439);

          return result_620758775;

        }
          
function HEX3Aanonymous_620758844(x_620758860) {
            var result_620758863 = [];

              result_620758863 = nimCopy(null, val_620758585, NTI33554439);

            return result_620758863;

          }

      var result_620758583 = null;

        var colontmp__620767602 = nimCopy(null, entry_620758580, NTI620757833);
        var key_620758584 = nimCopy(null, colontmp__620767602["Field0"], NTI33554439);
        var val_620758585 = nimCopy(null, colontmp__620767602["Field1"], NTI33554439);
        if ((key_620758584[chckIndx(0, 0, (key_620758584).length - 1)] == 92)) {
        Temporary1 = map_620758777(HEX3CHEX3C_620758659(s_1090519151(key_620758584), HEX21_620758602(letter_1090520228)), HEX3Aanonymous_620758756);
        }
        else {
        Temporary1 = map_620758777(s_1090519151(key_620758584), HEX3Aanonymous_620758844);
        }
        
        result_620758583 = Temporary1;

      return result_620758583;

    }
    
function HEX3Aanonymous_620759026(s_620759041) {
      var result_620759044 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_620759044 = nimCopy(result_620759044, toTextRect_687865909(s_620759041, 0, flag_620758566), NTI687865860);

      return result_620759044;

    }

  var result_620758576 = null;

    var sHEX60gensym24_620758916 = map_620758881(table_620758565, HEX3Aanonymous_620758577);
    var nHEX60gensym24_620758921 = (sHEX60gensym24_620758916).length;
    if (!((0 < nHEX60gensym24_620758921))) {
    failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym24 > 0` Can\'t fold empty sequences"));
    }
    
    var resultHEX60gensym24_620758927 = sHEX60gensym24_620758916[chckIndx(subInt(nHEX60gensym24_620758921, 1), 0, (sHEX60gensym24_620758916).length - 1)];
    Label1: do {
      var iHEX60gensym24_620758933 = 0;
      var colontmp__620767593 = 0;
      colontmp__620767593 = subInt(nHEX60gensym24_620758921, 2);
      var res_620767594 = colontmp__620767593;
      Label2: do {
          Label3: while (true) {
          if (!(0 <= res_620767594)) break Label3;
            iHEX60gensym24_620758933 = res_620767594;
            var a_620758934 = sHEX60gensym24_620758916[chckIndx(iHEX60gensym24_620758933, 0, (sHEX60gensym24_620758916).length - 1)];
            var b_620758935 = resultHEX60gensym24_620758927;
            resultHEX60gensym24_620758927 = HEX7C_620758944(a_620758934, b_620758935);
            res_620767594 = subInt(res_620767594, 1);
          }
      } while (false);
    } while (false);
    result_620758576 = map_620759045(resultHEX60gensym24_620758927, HEX3Aanonymous_620759026);

  return result_620758576;

}

function map_620763155(s_620763158, op_620763160) {
  var result_620763161 = [];

    result_620763161 = new Array(chckRange((s_620763158).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_620763158).length, 0, 2147483647) ; ++i) { result_620763161[i] = null; }    Label1: do {
      var i_620763177 = 0;
      var colontmp__620767611 = 0;
      colontmp__620767611 = (s_620763158).length;
      var i_620767612 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767612 < colontmp__620767611)) break Label3;
            i_620763177 = i_620767612;
            result_620763161[chckIndx(i_620763177, 0, (result_620763161).length - 1)] = op_620763160(s_620763158[chckIndx(i_620763177, 0, (s_620763158).length - 1)]);
            i_620767612 = addInt(i_620767612, 1);
          }
      } while (false);
    } while (false);

  return result_620763161;

}

function map_620763088(a_620763091, fn_620763093) {

function succeedImpl_620763105(inputInHEX60gensym106_620763106, valueInHEX60gensym106_620763107, tailInHEX60gensym106_620763108) {
  var result_620763110 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620763110 = nimCopy(result_620763110, {kind: 0, value: nimCopy(null, valueInHEX60gensym106_620763107, NTI687865860), tail: nimCopy(null, tailInHEX60gensym106_620763108, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym106_620763106, NTI33554439), expected: []}, NTI620757844);

  return result_620763110;

}

function failImpl_620763112(inputInHEX60gensym106_620763113, expectedInHEX60gensym106_620763114, tailInHEX60gensym106_620763115) {
  var result_620763117 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620763117 = nimCopy(result_620763117, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym106_620763114, NTI620761490), tail: nimCopy(null, tailInHEX60gensym106_620763115, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym106_620763113, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620763117;

}
      
function HEX3Aanonymous_620763120(input_620763121) {
            var Temporary2;
          var Temporary3;

        var result_620763123 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763124 = succeedImpl_620763105;
          var fail_620763125 = failImpl_620763112;
          Label1: do {
            var tempHEX60gensym24_620763138 = parse_620760599(a_620763091, input_620763121);
            if ((tempHEX60gensym24_620763138.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620763138;
            if (ConstSet82[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620763123 = nimCopy(result_620763123, {kind: 1, fromInput: nimCopy(null, input_620763121, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620763138.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620763144 = nimCopy(null, tempHEX60gensym24_620763138, NTI620757844);
          var Temporary3 = result1_620763144;
          if (ConstSet83[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620763123 = nimCopy(result_620763123, succeed_620763124(input_620763121, fn_620763093(Temporary3.value), result1_620763144.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620763123;

      }

  var result_620763094 = null;

    Label1: do {
    } while (false);
    result_620763094 = {body: HEX3Aanonymous_620763120};

  return result_620763094;

}

function HEX3EHEX3E_620762984(a_620762987, b_620762988) {

function succeedImpl_620763000(inputInHEX60gensym105_620763001, valueInHEX60gensym105_620763002, tailInHEX60gensym105_620763003) {
  var result_620763005 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620763005 = nimCopy(result_620763005, {kind: 0, value: nimCopy(null, valueInHEX60gensym105_620763002, NTI687865860), tail: nimCopy(null, tailInHEX60gensym105_620763003, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym105_620763001, NTI33554439), expected: []}, NTI620757844);

  return result_620763005;

}

function failImpl_620763007(inputInHEX60gensym105_620763008, expectedInHEX60gensym105_620763009, tailInHEX60gensym105_620763010) {
  var result_620763012 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620763012 = nimCopy(result_620763012, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym105_620763009, NTI620761411), tail: nimCopy(null, tailInHEX60gensym105_620763010, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym105_620763008, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620763012;

}
      
function HEX3Aanonymous_620763015(input_620763016) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620763018 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763019 = succeedImpl_620763000;
          var fail_620763020 = failImpl_620763007;
          Label1: do {
            var tempHEX60gensym34_620763033 = parse_620759604(a_620762987, input_620763016);
            if ((tempHEX60gensym34_620763033.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620763033;
            if (ConstSet84[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620763018 = nimCopy(result_620763018, {kind: 1, fromInput: nimCopy(null, input_620763016, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym34_620763033.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620763039 = nimCopy(null, tempHEX60gensym34_620763033, NTI620758259);
          Label3: do {
            var tempHEX60gensym36_620763052 = parse_620760599(b_620762988, result1_620763039.tail);
            if ((tempHEX60gensym36_620763052.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620763052;
            if (ConstSet85[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620763018 = nimCopy(result_620763018, {kind: 1, fromInput: nimCopy(null, input_620763016, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym36_620763052.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620763058 = nimCopy(null, tempHEX60gensym36_620763052, NTI620757844);
          var Temporary5 = result2_620763058;
          if (ConstSet86[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620763018 = nimCopy(result_620763018, succeed_620763019(input_620763016, Temporary5.value, result2_620763058.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620763018;

      }

  var result_620762989 = null;

    Label1: do {
    } while (false);
    result_620762989 = {body: HEX3Aanonymous_620763015};

  return result_620762989;

}

function HEX3EHEX3E_620762888(a_620762891, b_620762892) {

function succeedImpl_620762904(inputInHEX60gensym104_620762905, valueInHEX60gensym104_620762906, tailInHEX60gensym104_620762907) {
  var result_620762909 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620762909 = nimCopy(result_620762909, {kind: 0, value: valueInHEX60gensym104_620762906, tail: nimCopy(null, tailInHEX60gensym104_620762907, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym104_620762905, NTI33554439), expected: []}, NTI1090519270);

  return result_620762909;

}

function failImpl_620762911(inputInHEX60gensym104_620762912, expectedInHEX60gensym104_620762913, tailInHEX60gensym104_620762914) {
  var result_620762916 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

    result_620762916 = nimCopy(result_620762916, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym104_620762913, NTI620761345), tail: nimCopy(null, tailInHEX60gensym104_620762914, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym104_620762912, NTI33554439), value: 0}, NTI1090519270);

  return result_620762916;

}
      
function HEX3Aanonymous_620762919(input_620762920) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620762922 = ({kind: 0, value: 0, expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620762923 = succeedImpl_620762904;
          var fail_620762924 = failImpl_620762911;
          Label1: do {
            var tempHEX60gensym34_620762937 = parse_620758704(a_620762891, input_620762920);
            if ((tempHEX60gensym34_620762937.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620762937;
            if (ConstSet87[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620762922 = nimCopy(result_620762922, {kind: 1, fromInput: nimCopy(null, input_620762920, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym34_620762937.tail, NTI33554439), value: 0}, NTI1090519270);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620762943 = nimCopy(null, tempHEX60gensym34_620762937, NTI1090519172);
          Label3: do {
            var tempHEX60gensym36_620762956 = parse_1090520010(b_620762892, result1_620762943.tail);
            if ((tempHEX60gensym36_620762956.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620762956;
            if (ConstSet88[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620762922 = nimCopy(result_620762922, {kind: 1, fromInput: nimCopy(null, input_620762920, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym36_620762956.tail, NTI33554439), value: 0}, NTI1090519270);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620762962 = nimCopy(null, tempHEX60gensym36_620762956, NTI1090519270);
          var Temporary5 = result2_620762962;
          if (ConstSet89[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620762922 = nimCopy(result_620762922, succeed_620762923(input_620762920, Temporary5.value, result2_620762962.tail), NTI1090519270);
          break BeforeRet;
        } while (false);

        return result_620762922;

      }

  var result_620762893 = null;

    Label1: do {
    } while (false);
    result_620762893 = {body: HEX3Aanonymous_620762919};

  return result_620762893;

}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function nucRepeatRune(c_654317799, count_654317800) {
  var result_654317801 = [];

    var s_654317802 = HEX24_654312015(c_654317799);
    result_654317801 = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_654317807 = 0;
      var colontmp__620767635 = 0;
      colontmp__620767635 = count_654317800;
      var i_620767636 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767636 < colontmp__620767635)) break Label3;
            i_654317807 = i_620767636;
            result_654317801.push.apply(result_654317801, s_654317802);;
            i_620767636 = addInt(i_620767636, 1);
          }
      } while (false);
    } while (false);

  return result_654317801;

}

function center_687866726(s_687866727, width_687866728, padding_687866729) {
    var Temporary1;

  var result_687866730 = [];

    var sLen_687866731 = nucruneLen(s_687866727);
    if ((width_687866728 <= sLen_687866731)) {
    Temporary1 = s_687866727;
    }
    else {
      var diff_687866732 = subInt(width_687866728, sLen_687866731);
      var left_687866733 = divInt(diff_687866732, 2);
      var right_687866734 = subInt(diff_687866732, left_687866733);
    Temporary1 = (nucRepeatRune(padding_687866729, chckRange(left_687866733, 0, 2147483647)) || []).concat(s_687866727 || [],nucRepeatRune(padding_687866729, chckRange(right_687866734, 0, 2147483647)) || []);
    }
    
    result_687866730 = nimCopy(null, Temporary1, NTI33554439);

  return result_687866730;

}

function HEX3Aanonymous_687866753(s_687866754, width_687866755) {
  var result_687866756 = [];

    result_687866756 = nimCopy(null, center_687866726(s_687866754, chckRange(width_687866755, 0, 2147483647), 32), NTI33554439);

  return result_687866756;

}

function alignLeft_654317821(s_654317822, count_654317823, padding_654317824) {
  var result_654317825 = [];

    var sLen_654317826 = nucruneLen(s_654317822);
    if ((sLen_654317826 < count_654317823)) {
    var padStr_654317827 = HEX24_654312015(padding_654317824);
    result_654317825 = nimCopy(null, mnewString(0), NTI33554439);
    result_654317825.push.apply(result_654317825, s_654317822);;
    Label1: do {
      var i_654317832 = 0;
      var colontmp__620767639 = 0;
      colontmp__620767639 = count_654317823;
      var i_620767640 = sLen_654317826;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767640 < colontmp__620767639)) break Label3;
            i_654317832 = i_620767640;
            result_654317825.push.apply(result_654317825, padStr_654317827);;
            i_620767640 = addInt(i_620767640, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_654317825 = nimCopy(null, s_654317822, NTI33554439);
    }
    

  return result_654317825;

}

function HEX3Aanonymous_687866757(s_687866758, width_687866759) {
  var result_687866760 = [];

    result_687866760 = nimCopy(null, alignLeft_654317821(s_687866758, chckRange(width_687866759, 0, 2147483647), 32), NTI33554439);

  return result_687866760;

}

function nucAlignString(s_654317809, count_654317810, padding_654317811) {
  var result_654317812 = [];

    var sLen_654317813 = nucruneLen(s_654317809);
    if ((sLen_654317813 < count_654317810)) {
    var padStr_654317814 = HEX24_654312015(padding_654317811);
    result_654317812 = nimCopy(null, mnewString(0), NTI33554439);
    var spaces_654317815 = subInt(count_654317810, sLen_654317813);
    Label1: do {
      var i_654317820 = 0;
      var i_620767643 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767643 < spaces_654317815)) break Label3;
            i_654317820 = i_620767643;
            result_654317812.push.apply(result_654317812, padStr_654317814);;
            i_620767643 = addInt(i_620767643, 1);
          }
      } while (false);
    } while (false);
    result_654317812.push.apply(result_654317812, s_654317809);;
    }
    else {
      result_654317812 = nimCopy(null, s_654317809, NTI33554439);
    }
    

  return result_654317812;

}

function HEX3Aanonymous_687866761(s_687866762, width_687866763) {
  var result_687866764 = [];

    result_687866764 = nimCopy(null, nucAlignString(s_687866762, chckRange(width_687866763, 0, 2147483647), 32), NTI33554439);

  return result_687866764;

}

function stack_687866775(rects_687866776, baseline_687866777, alignment_687866778) {
  var result_687866779 = ({rows: [], baseline: 0, width: 0, flag: 0});

    Label1: do {
      var iHEX60gensym44_687866801 = 0;
      var resultHEX60gensym44_687866808 = newSeq_687866494(chckRange((rects_687866776).length, 0, 2147483647));
      Label2: do {
        var it_687866812 = ({rows: [], baseline: 0, width: 0, flag: 0});
        var i_620767625 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_620767625 < (rects_687866776).length)) break Label4;
              it_687866812 = rects_687866776[chckIndx(i_620767625, 0, (rects_687866776).length - 1)];
              resultHEX60gensym44_687866808[chckIndx(iHEX60gensym44_687866801, 0, (resultHEX60gensym44_687866808).length - 1)] = it_687866812.width;
              iHEX60gensym44_687866801 = addInt(iHEX60gensym44_687866801, 1);
              i_620767625 = addInt(i_620767625, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var width_687866820 = max_687866520(resultHEX60gensym44_687866808);
    var alignFunc_687866821 = alignFuncs_687866765[chckIndx(alignment_687866778, 0, (alignFuncs_687866765).length - 1)];
    Label5: do {
      var rect_687866825 = ({rows: [], baseline: 0, width: 0, flag: 0});
      var i_620767632 = 0;
      Label6: do {
          Label7: while (true) {
          if (!(i_620767632 < (rects_687866776).length)) break Label7;
            rect_687866825 = rects_687866776[chckIndx(i_620767632, 0, (rects_687866776).length - 1)];
            Label8: do {
              var row_687866829 = [];
              var i_620767629 = 0;
              var L_620767630 = (rect_687866825.rows).length;
              Label9: do {
                  Label10: while (true) {
                  if (!(i_620767629 < L_620767630)) break Label10;
                    row_687866829 = rect_687866825.rows[chckIndx(i_620767629, 0, (rect_687866825.rows).length - 1)];
                    result_687866779.rows.push(alignFunc_687866821(row_687866829, width_687866820));;
                    i_620767629 = addInt(i_620767629, 1);
                    if (!(((rect_687866825.rows).length == L_620767630))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            i_620767632 = addInt(i_620767632, 1);
          }
      } while (false);
    } while (false);
    result_687866779.baseline = baseline_687866777;
    result_687866779.width = width_687866820;

  return result_687866779;

}

function HEX3EHEX3E_620763552(a_620763555, b_620763556) {

function succeedImpl_620763568(inputInHEX60gensym115_620763569, valueInHEX60gensym115_620763570, tailInHEX60gensym115_620763571) {
  var result_620763573 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620763573 = nimCopy(result_620763573, {kind: 0, value: nimCopy(null, valueInHEX60gensym115_620763570, NTI687865860), tail: nimCopy(null, tailInHEX60gensym115_620763571, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym115_620763569, NTI33554439), expected: []}, NTI620757844);

  return result_620763573;

}

function failImpl_620763575(inputInHEX60gensym115_620763576, expectedInHEX60gensym115_620763577, tailInHEX60gensym115_620763578) {
  var result_620763580 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620763580 = nimCopy(result_620763580, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym115_620763577, NTI620761847), tail: nimCopy(null, tailInHEX60gensym115_620763578, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym115_620763576, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620763580;

}
      
function HEX3Aanonymous_620763583(input_620763584) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620763586 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763587 = succeedImpl_620763568;
          var fail_620763588 = failImpl_620763575;
          Label1: do {
            var tempHEX60gensym34_620763601 = parse_620758704(a_620763555, input_620763584);
            if ((tempHEX60gensym34_620763601.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620763601;
            if (ConstSet90[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620763586 = nimCopy(result_620763586, {kind: 1, fromInput: nimCopy(null, input_620763584, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym34_620763601.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620763607 = nimCopy(null, tempHEX60gensym34_620763601, NTI1090519172);
          Label3: do {
            var tempHEX60gensym36_620763620 = parse_620760599(b_620763556, result1_620763607.tail);
            if ((tempHEX60gensym36_620763620.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620763620;
            if (ConstSet91[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620763586 = nimCopy(result_620763586, {kind: 1, fromInput: nimCopy(null, input_620763584, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym36_620763620.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620763626 = nimCopy(null, tempHEX60gensym36_620763620, NTI620757844);
          var Temporary5 = result2_620763626;
          if (ConstSet92[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620763586 = nimCopy(result_620763586, succeed_620763587(input_620763584, Temporary5.value, result2_620763626.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620763586;

      }

  var result_620763557 = null;

    Label1: do {
    } while (false);
    result_620763557 = {body: HEX3Aanonymous_620763583};

  return result_620763557;

}

function HEX26_620763378(a_620763383, b_620763387) {

function succeedImpl_620763402(inputInHEX60gensym114_620763403, valueInHEX60gensym114_620763404, tailInHEX60gensym114_620763405) {
  var result_620763407 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763407 = nimCopy(result_620763407, {kind: 0, value: nimCopy(null, valueInHEX60gensym114_620763404, NTI620761732), tail: nimCopy(null, tailInHEX60gensym114_620763405, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym114_620763403, NTI33554439), expected: []}, NTI620759300);

  return result_620763407;

}

function failImpl_620763409(inputInHEX60gensym114_620763410, expectedInHEX60gensym114_620763411, tailInHEX60gensym114_620763412) {
  var result_620763414 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620763414 = nimCopy(result_620763414, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym114_620763411, NTI620761738), tail: nimCopy(null, tailInHEX60gensym114_620763412, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym114_620763410, NTI33554439), value: []}, NTI620759300);

  return result_620763414;

}
      
function HEX3Aanonymous_620763417(input_620763418) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_620763420 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620763421 = succeedImpl_620763402;
          var fail_620763422 = failImpl_620763409;
          Label1: do {
            var tempHEX60gensym26_620763435 = parse_620760829(a_620763383, input_620763418);
            if ((tempHEX60gensym26_620763435.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_620763435;
            if (ConstSet93[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620763420 = nimCopy(result_620763420, {kind: 1, fromInput: nimCopy(null, input_620763418, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym26_620763435.tail, NTI33554439), value: []}, NTI620759300);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620763441 = nimCopy(null, tempHEX60gensym26_620763435, NTI620759300);
          Label3: do {
            var tempHEX60gensym28_620763454 = parse_620760829(b_620763387, result1_620763441.tail);
            if ((tempHEX60gensym28_620763454.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_620763454;
            if (ConstSet94[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620763420 = nimCopy(result_620763420, {kind: 1, fromInput: nimCopy(null, input_620763418, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym28_620763454.tail, NTI33554439), value: []}, NTI620759300);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620763460 = nimCopy(null, tempHEX60gensym28_620763454, NTI620759300);
          var Temporary5 = result1_620763441;
          if (ConstSet95[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          var Temporary6 = result2_620763460;
          if (ConstSet96[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1090519061)); }
          result_620763420 = nimCopy(result_620763420, succeed_620763421(input_620763418, HEX26_620761473(Temporary5.value, Temporary6.value), result2_620763460.tail), NTI620759300);
          break BeforeRet;
        } while (false);

        return result_620763420;

      }

  var result_620763391 = null;

    Label1: do {
    } while (false);
    result_620763391 = {body: HEX3Aanonymous_620763417};

  return result_620763391;

}

function max_620763482(x_620763484, y_620763485) {
    var Temporary1;

  var result_620763486 = 0;

    if ((y_620763485 <= x_620763484)) {
    Temporary1 = x_620763484;
    }
    else {
    Temporary1 = y_620763485;
    }
    
    result_620763486 = Temporary1;

  return result_620763486;

}

function nsuRepeatStr(s_704644100, n_704644101) {
  var result_704644102 = [];

    result_704644102 = nimCopy(null, mnewString(0), NTI33554439);
    Label1: do {
      var i_704644107 = 0;
      var colontmp__620767652 = 0;
      colontmp__620767652 = n_704644101;
      var res_620767653 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767653 <= colontmp__620767652)) break Label3;
            i_704644107 = res_620767653;
            result_704644102.push.apply(result_704644102, s_704644100);;
            res_620767653 = addInt(res_620767653, 1);
          }
      } while (false);
    } while (false);

  return result_704644102;

}

function withFlag_687866861(rect_687866862, flag_687866863) {
  var result_687866864 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_687866864 = nimCopy(result_687866864, rect_687866862, NTI687865860);
    result_687866864.flag = flag_687866863;

  return result_687866864;

}

function HEX5BHEX5DHEX3D_620758398(s_620758400, i_620758401, x_620758402) {
    s_620758400[chckIndx(subInt((s_620758400).length, i_620758401), 0, (s_620758400).length - 1)] = nimCopy(null, x_620758402, NTI33554439);

  
}

function imul_1140850978(a_1140850979, b_1140850980) {
  var result_1140850981 = 0;

    var mask_1140850982 = 65535;
    var aHi_1140850987 = ((a_1140850979 >>> 16) & mask_1140850982);
    var aLo_1140850988 = (a_1140850979 & mask_1140850982);
    var bHi_1140850993 = ((b_1140850980 >>> 16) & mask_1140850982);
    var bLo_1140850994 = (b_1140850980 & mask_1140850982);
    result_1140850981 = ((((aLo_1140850988 * bLo_1140850994) >>> 0) + (((((aHi_1140850987 * bLo_1140850994) >>> 0) + ((aLo_1140850988 * bHi_1140850993) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_1140850981;

}

function rotl32_1140850999(x_1140851000, r_1140851001) {
  var result_1140851002 = 0;

    result_1140851002 = ((x_1140851000 << r_1140851001) | (x_1140851000 >>> subInt(32, r_1140851001)));

  return result_1140851002;

}

function murmurHash_1140851011(x_1140851012) {
  var result_1140851013 = 0;

  BeforeRet: do {
    var size_1140851022 = (x_1140851012).length;
    var stepSize_1140851023 = 4;
    var n_1140851024 = divInt(size_1140851022, stepSize_1140851023);
    var h1_1140851025 = 0;
    var i_1140851026 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_1140851026 < mulInt(n_1140851024, stepSize_1140851023))) break Label2;
          var k1_1140851027 = 0;
          var j_1140851028 = stepSize_1140851023;
          Label3: do {
              Label4: while (true) {
              if (!(0 < j_1140851028)) break Label4;
                j_1140851028 = subInt(j_1140851028, 1);
                k1_1140851027 = ((k1_1140851027 << 8) | x_1140851012[chckIndx(addInt(i_1140851026, j_1140851028), 0, (x_1140851012).length - 1)]);
              }
          } while (false);
          i_1140851026 = addInt(i_1140851026, stepSize_1140851023);
          k1_1140851027 = imul_1140850978(k1_1140851027, 3432918353);
          k1_1140851027 = rotl32_1140850999(k1_1140851027, 15);
          k1_1140851027 = imul_1140850978(k1_1140851027, 461845907);
          h1_1140851025 = (h1_1140851025 ^ k1_1140851027);
          h1_1140851025 = rotl32_1140850999(h1_1140851025, 13);
          h1_1140851025 = ((((h1_1140851025 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while (false);
    var k1_1140851045 = 0;
    var rem_1140851046 = modInt(size_1140851022, stepSize_1140851023);
    Label5: do {
        Label6: while (true) {
        if (!(0 < rem_1140851046)) break Label6;
          rem_1140851046 = subInt(rem_1140851046, 1);
          k1_1140851045 = ((k1_1140851045 << 8) | x_1140851012[chckIndx(addInt(i_1140851026, rem_1140851046), 0, (x_1140851012).length - 1)]);
        }
    } while (false);
    k1_1140851045 = imul_1140850978(k1_1140851045, 3432918353);
    k1_1140851045 = rotl32_1140850999(k1_1140851045, 15);
    k1_1140851045 = imul_1140850978(k1_1140851045, 461845907);
    h1_1140851025 = (h1_1140851025 ^ k1_1140851045);
    h1_1140851025 = (h1_1140851025 ^ size_1140851022);
    h1_1140851025 = (h1_1140851025 ^ (h1_1140851025 >>> 16));
    h1_1140851025 = imul_1140850978(h1_1140851025, 2246822507);
    h1_1140851025 = (h1_1140851025 ^ (h1_1140851025 >>> 13));
    h1_1140851025 = imul_1140850978(h1_1140851025, 3266489909);
    h1_1140851025 = (h1_1140851025 ^ (h1_1140851025 >>> 16));
    result_1140851013 = (h1_1140851025 | 0);
    break BeforeRet;
  } while (false);

  return result_1140851013;

}

function hash_1140851110(x_1140851111) {
  var result_1140851112 = 0;

    result_1140851112 = murmurHash_1140851011((x_1140851111.slice(0, (x_1140851111).length - 1 + 1)));

  return result_1140851112;

}

function isFilled_1124073503(hcode_1124073504) {
  var result_1124073505 = false;

    result_1124073505 = !((hcode_1124073504 == 0));

  return result_1124073505;

}

function nextTry_1124073506(h_1124073507, maxHash_1124073508) {
  var result_1124073509 = 0;

    result_1124073509 = (addInt(h_1124073507, 1) & maxHash_1124073508);

  return result_1124073509;

}

function rawGet_620757153(t_620757156, key_620757157, hc_620757158, hc_620757158_Idx) {
            var Temporary3;

  var result_620757159 = 0;

  BeforeRet: do {
    hc_620757158[hc_620757158_Idx] = hash_1140851110(key_620757157);
    if ((hc_620757158[hc_620757158_Idx] == 0)) {
    hc_620757158[hc_620757158_Idx] = 314159265;
    }
    
    if (((t_620757156.data).length == 0)) {
    result_620757159 = -1;
    break BeforeRet;
    }
    
    var h_620757210 = (hc_620757158[hc_620757158_Idx] & (t_620757156.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_1124073503(t_620757156.data[chckIndx(h_620757210, 0, (t_620757156.data).length - 1)].Field0)) break Label2;
            if (!(t_620757156.data[chckIndx(h_620757210, 0, (t_620757156.data).length - 1)].Field0 == hc_620757158[hc_620757158_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_620757156.data[chckIndx(h_620757210, 0, (t_620757156.data).length - 1)].Field1, key_620757157);            }          if (Temporary3) {
          result_620757159 = h_620757210;
          break BeforeRet;
          }
          
          h_620757210 = nextTry_1124073506(h_620757210, (t_620757156.data).length - 1);
        }
    } while (false);
    result_620757159 = subInt(-1, h_620757210);
  } while (false);

  return result_620757159;

}

function raiseKeyError_1107298023(key_1107298025) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_1107298025 || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_620758481(t_620758484, key_620758485) {
  var result_620758486 = {Field0: [], Field1: [], Field2: []};

    var hcHEX60gensym20_620758487 = [0];
    var indexHEX60gensym20_620758494 = rawGet_620757153(t_620758484, key_620758485, hcHEX60gensym20_620758487, 0);
    if ((0 <= indexHEX60gensym20_620758494)) {
    result_620758486 = nimCopy(result_620758486, t_620758484.data[chckIndx(indexHEX60gensym20_620758494, 0, (t_620758484.data).length - 1)].Field2, NTI620756998);
    }
    else {
    raiseKeyError_1107298023(key_620758485);
    }
    

  return result_620758486;

}

function bigDelimiter_620757000(delimiter_620757001, height_620757002, baseline_620757003) {
  var result_620757004 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620757004.rows = nimCopy(null, newSeq_452985301(height_620757002), NTI452985127);
    result_620757004.width = 1;
    result_620757004.baseline = baseline_620757003;
    switch (toJSStr(delimiter_620757001)) {
    case "{":
      if ((height_620757002 == 2)) {
      result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB0"), NTI33554439);
      result_620757004.rows[chckIndx(1, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB1"), NTI33554439);
      }
      else {
        result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xA7"), NTI33554439);
        Label1: do {
          var i_620758397 = 0;
          var colontmp__620767656 = 0;
          colontmp__620767656 = subInt(height_620757002, 1);
          var i_620767657 = 1;
          Label2: do {
              Label3: while (true) {
              if (!(i_620767657 < colontmp__620767656)) break Label3;
                i_620758397 = i_620767657;
                result_620757004.rows[chckIndx(i_620758397, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAA"), NTI33554439);
                i_620767657 = addInt(i_620767657, 1);
              }
          } while (false);
        } while (false);
        result_620757004.rows[chckIndx(divInt(height_620757002, 2), 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xA8"), NTI33554439);
        HEX5BHEX5DHEX3D_620758398(result_620757004.rows, 1, makeNimstrLit("\xE2\x8E\xA9"));
      }
      
      break;
    case "}":
      if ((height_620757002 == 2)) {
      result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB1"), NTI33554439);
      result_620757004.rows[chckIndx(1, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xB0"), NTI33554439);
      }
      else {
        result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAB"), NTI33554439);
        Label4: do {
          var i_620758410 = 0;
          var colontmp__620767660 = 0;
          colontmp__620767660 = subInt(height_620757002, 1);
          var i_620767661 = 1;
          Label5: do {
              Label6: while (true) {
              if (!(i_620767661 < colontmp__620767660)) break Label6;
                i_620758410 = i_620767661;
                result_620757004.rows[chckIndx(i_620758410, 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAA"), NTI33554439);
                i_620767661 = addInt(i_620767661, 1);
              }
          } while (false);
        } while (false);
        result_620757004.rows[chckIndx(divInt(height_620757002, 2), 0, (result_620757004.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x8E\xAC"), NTI33554439);
        HEX5BHEX5DHEX3D_620758398(result_620757004.rows, 1, makeNimstrLit("\xE2\x8E\xAD"));
      }
      
      break;
    case "⟨":
      result_620757004.width = chckRange(divInt(addInt(height_620757002, 1), 2), 0, 2147483647);
      var widthDec_620758416 = subInt(result_620757004.width, 1);
      if ((modInt(height_620757002, 2) == 1)) {
      result_620757004.rows[chckIndx(divInt(height_620757002, 2), 0, (result_620757004.rows).length - 1)] = nimCopy(null, (makeNimstrLit("\xE2\x9F\xA8") || []).concat(nsuRepeatStr(makeNimstrLit(" "), chckRange(divInt(height_620757002, 2), 0, 2147483647)) || []), NTI33554439);
      }
      
      Label7: do {
        var i_620758421 = 0;
        var colontmp__620767664 = 0;
        colontmp__620767664 = divInt(height_620757002, 2);
        var i_620767665 = 0;
        Label8: do {
            Label9: while (true) {
            if (!(i_620767665 < colontmp__620767664)) break Label9;
              i_620758421 = i_620767665;
              result_620757004.rows[chckIndx(i_620758421, 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_620758416, i_620758421), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB1") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(i_620758421, 0, 2147483647)) || []), NTI33554439);
              result_620757004.rows[chckIndx(subInt(subInt(height_620757002, 1), i_620758421), 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_620758416, i_620758421), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB2") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(i_620758421, 0, 2147483647)) || []), NTI33554439);
              i_620767665 = addInt(i_620767665, 1);
            }
        } while (false);
      } while (false);
      break;
    case "⟩":
      result_620757004.width = chckRange(divInt(addInt(height_620757002, 1), 2), 0, 2147483647);
      var widthDec_620758422 = subInt(result_620757004.width, 1);
      if ((modInt(height_620757002, 2) == 1)) {
      result_620757004.rows[chckIndx(divInt(height_620757002, 2), 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(divInt(height_620757002, 2), 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x9F\xA9") || []), NTI33554439);
      }
      
      Label10: do {
        var i_620758427 = 0;
        var colontmp__620767668 = 0;
        colontmp__620767668 = divInt(height_620757002, 2);
        var i_620767669 = 0;
        Label11: do {
            Label12: while (true) {
            if (!(i_620767669 < colontmp__620767668)) break Label12;
              i_620758427 = i_620767669;
              result_620757004.rows[chckIndx(i_620758427, 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(i_620758427, 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB2") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_620758422, i_620758427), 0, 2147483647)) || []), NTI33554439);
              result_620757004.rows[chckIndx(subInt(subInt(height_620757002, 1), i_620758427), 0, (result_620757004.rows).length - 1)] = nimCopy(null, (nsuRepeatStr(makeNimstrLit(" "), chckRange(i_620758427, 0, 2147483647)) || []).concat(makeNimstrLit("\xE2\x95\xB1") || [],nsuRepeatStr(makeNimstrLit(" "), chckRange(subInt(widthDec_620758422, i_620758427), 0, 2147483647)) || []), NTI33554439);
              i_620767669 = addInt(i_620767669, 1);
            }
        } while (false);
      } while (false);
      break;
    default: 
      var colontmp__620767675 = HEX5BHEX5D_620758481(delimiterParts_620758385, delimiter_620757001);
      var top_620758551 = nimCopy(null, colontmp__620767675["Field0"], NTI33554439);
      var mid_620758552 = nimCopy(null, colontmp__620767675["Field1"], NTI33554439);
      var bottom_620758553 = nimCopy(null, colontmp__620767675["Field2"], NTI33554439);
      result_620757004.rows[chckIndx(0, 0, (result_620757004.rows).length - 1)] = nimCopy(null, top_620758551, NTI33554439);
      Label13: do {
        var i_620758558 = 0;
        var colontmp__620767672 = 0;
        colontmp__620767672 = subInt(height_620757002, 1);
        var i_620767673 = 1;
        Label14: do {
            Label15: while (true) {
            if (!(i_620767673 < colontmp__620767672)) break Label15;
              i_620758558 = i_620767673;
              result_620757004.rows[chckIndx(i_620758558, 0, (result_620757004.rows).length - 1)] = nimCopy(null, mid_620758552, NTI33554439);
              i_620767673 = addInt(i_620767673, 1);
            }
        } while (false);
      } while (false);
      HEX5BHEX5DHEX3D_620758398(result_620757004.rows, 1, bottom_620758553);
      break;
    }

  return result_620757004;

}

function HEX3EHEX3E_620764598(a_620764601, b_620764602) {

function succeedImpl_620764614(inputInHEX60gensym146_620764615, valueInHEX60gensym146_620764616, tailInHEX60gensym146_620764617) {
  var result_620764619 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620764619 = nimCopy(result_620764619, {kind: 0, value: nimCopy(null, valueInHEX60gensym146_620764616, NTI620761708), tail: nimCopy(null, tailInHEX60gensym146_620764617, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym146_620764615, NTI33554439), expected: []}, NTI620759300);

  return result_620764619;

}

function failImpl_620764621(inputInHEX60gensym146_620764622, expectedInHEX60gensym146_620764623, tailInHEX60gensym146_620764624) {
  var result_620764626 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620764626 = nimCopy(result_620764626, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym146_620764623, NTI620762736), tail: nimCopy(null, tailInHEX60gensym146_620764624, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym146_620764622, NTI33554439), value: []}, NTI620759300);

  return result_620764626;

}
      
function HEX3Aanonymous_620764629(input_620764630) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620764632 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764633 = succeedImpl_620764614;
          var fail_620764634 = failImpl_620764621;
          Label1: do {
            var tempHEX60gensym34_620764647 = parse_620759604(a_620764601, input_620764630);
            if ((tempHEX60gensym34_620764647.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620764647;
            if (ConstSet97[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620764632 = nimCopy(result_620764632, {kind: 1, fromInput: nimCopy(null, input_620764630, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym34_620764647.tail, NTI33554439), value: []}, NTI620759300);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620764653 = nimCopy(null, tempHEX60gensym34_620764647, NTI620758259);
          Label3: do {
            var tempHEX60gensym36_620764666 = parse_620760829(b_620764602, result1_620764653.tail);
            if ((tempHEX60gensym36_620764666.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620764666;
            if (ConstSet98[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620764632 = nimCopy(result_620764632, {kind: 1, fromInput: nimCopy(null, input_620764630, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym36_620764666.tail, NTI33554439), value: []}, NTI620759300);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620764672 = nimCopy(null, tempHEX60gensym36_620764666, NTI620759300);
          var Temporary5 = result2_620764672;
          if (ConstSet99[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620764632 = nimCopy(result_620764632, succeed_620764633(input_620764630, Temporary5.value, result2_620764672.tail), NTI620759300);
          break BeforeRet;
        } while (false);

        return result_620764632;

      }

  var result_620764603 = null;

    Label1: do {
    } while (false);
    result_620764603 = {body: HEX3Aanonymous_620764629};

  return result_620764603;

}

function HEX3CHEX3C_620764806(a_620764809, b_620764810) {

function succeedImpl_620764822(inputInHEX60gensym150_620764823, valueInHEX60gensym150_620764824, tailInHEX60gensym150_620764825) {
  var result_620764827 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620764827 = nimCopy(result_620764827, {kind: 0, value: nimCopy(null, valueInHEX60gensym150_620764824, NTI687865860), tail: nimCopy(null, tailInHEX60gensym150_620764825, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym150_620764823, NTI33554439), expected: []}, NTI620757844);

  return result_620764827;

}

function failImpl_620764829(inputInHEX60gensym150_620764830, expectedInHEX60gensym150_620764831, tailInHEX60gensym150_620764832) {
  var result_620764834 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620764834 = nimCopy(result_620764834, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym150_620764831, NTI620762883), tail: nimCopy(null, tailInHEX60gensym150_620764832, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym150_620764830, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620764834;

}
      
function HEX3Aanonymous_620764837(input_620764838) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620764840 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764841 = succeedImpl_620764822;
          var fail_620764842 = failImpl_620764829;
          Label1: do {
            var tempHEX60gensym30_620764855 = parse_620760599(a_620764809, input_620764838);
            if ((tempHEX60gensym30_620764855.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620764855;
            if (ConstSet100[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620764840 = nimCopy(result_620764840, {kind: 1, fromInput: nimCopy(null, input_620764838, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym30_620764855.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620764861 = nimCopy(null, tempHEX60gensym30_620764855, NTI620757844);
          Label3: do {
            var tempHEX60gensym32_620764874 = parse_1090520010(b_620764810, result1_620764861.tail);
            if ((tempHEX60gensym32_620764874.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620764874;
            if (ConstSet101[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620764840 = nimCopy(result_620764840, {kind: 1, fromInput: nimCopy(null, input_620764838, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym32_620764874.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620764880 = nimCopy(null, tempHEX60gensym32_620764874, NTI1090519270);
          var Temporary5 = result1_620764861;
          if (ConstSet102[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620764840 = nimCopy(result_620764840, succeed_620764841(input_620764838, Temporary5.value, result2_620764880.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620764840;

      }

  var result_620764811 = null;

    Label1: do {
    } while (false);
    result_620764811 = {body: HEX3Aanonymous_620764837};

  return result_620764811;

}

function HEX3EHEX3E_620764723(a_620764726, b_620764727) {

function succeedImpl_620764739(inputInHEX60gensym149_620764740, valueInHEX60gensym149_620764741, tailInHEX60gensym149_620764742) {
  var result_620764744 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620764744 = nimCopy(result_620764744, {kind: 0, value: nimCopy(null, valueInHEX60gensym149_620764741, NTI687865860), tail: nimCopy(null, tailInHEX60gensym149_620764742, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym149_620764740, NTI33554439), expected: []}, NTI620757844);

  return result_620764744;

}

function failImpl_620764746(inputInHEX60gensym149_620764747, expectedInHEX60gensym149_620764748, tailInHEX60gensym149_620764749) {
  var result_620764751 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620764751 = nimCopy(result_620764751, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym149_620764748, NTI620762822), tail: nimCopy(null, tailInHEX60gensym149_620764749, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym149_620764747, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620764751;

}
      
function HEX3Aanonymous_620764754(input_620764755) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620764757 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620764758 = succeedImpl_620764739;
          var fail_620764759 = failImpl_620764746;
          Label1: do {
            var tempHEX60gensym34_620764772 = parse_1090520010(a_620764726, input_620764755);
            if ((tempHEX60gensym34_620764772.kind == 1)) {
            var Temporary2 = tempHEX60gensym34_620764772;
            if (ConstSet103[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620764757 = nimCopy(result_620764757, {kind: 1, fromInput: nimCopy(null, input_620764755, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym34_620764772.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620764778 = nimCopy(null, tempHEX60gensym34_620764772, NTI1090519270);
          Label3: do {
            var tempHEX60gensym36_620764791 = parse_620760599(b_620764727, result1_620764778.tail);
            if ((tempHEX60gensym36_620764791.kind == 1)) {
            var Temporary4 = tempHEX60gensym36_620764791;
            if (ConstSet104[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620764757 = nimCopy(result_620764757, {kind: 1, fromInput: nimCopy(null, input_620764755, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym36_620764791.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620764797 = nimCopy(null, tempHEX60gensym36_620764791, NTI620757844);
          var Temporary5 = result2_620764797;
          if (ConstSet105[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620764757 = nimCopy(result_620764757, succeed_620764758(input_620764755, Temporary5.value, result2_620764797.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620764757;

      }

  var result_620764728 = null;

    Label1: do {
    } while (false);
    result_620764728 = {body: HEX3Aanonymous_620764754};

  return result_620764728;

}

function HEX3CHEX3C_620765070(a_620765073, b_620765074) {

function succeedImpl_620765086(inputInHEX60gensym151_620765087, valueInHEX60gensym151_620765088, tailInHEX60gensym151_620765089) {
  var result_620765091 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620765091 = nimCopy(result_620765091, {kind: 0, value: nimCopy(null, valueInHEX60gensym151_620765088, NTI687865860), tail: nimCopy(null, tailInHEX60gensym151_620765089, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym151_620765087, NTI33554439), expected: []}, NTI620757844);

  return result_620765091;

}

function failImpl_620765093(inputInHEX60gensym151_620765094, expectedInHEX60gensym151_620765095, tailInHEX60gensym151_620765096) {
  var result_620765098 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620765098 = nimCopy(result_620765098, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym151_620765095, NTI620763034), tail: nimCopy(null, tailInHEX60gensym151_620765096, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym151_620765094, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620765098;

}
      
function HEX3Aanonymous_620765101(input_620765102) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620765104 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620765105 = succeedImpl_620765086;
          var fail_620765106 = failImpl_620765093;
          Label1: do {
            var tempHEX60gensym30_620765119 = parse_620760599(a_620765073, input_620765102);
            if ((tempHEX60gensym30_620765119.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620765119;
            if (ConstSet106[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620765104 = nimCopy(result_620765104, {kind: 1, fromInput: nimCopy(null, input_620765102, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym30_620765119.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620765125 = nimCopy(null, tempHEX60gensym30_620765119, NTI620757844);
          Label3: do {
            var tempHEX60gensym32_620765138 = parse_620759604(b_620765074, result1_620765125.tail);
            if ((tempHEX60gensym32_620765138.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620765138;
            if (ConstSet107[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620765104 = nimCopy(result_620765104, {kind: 1, fromInput: nimCopy(null, input_620765102, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym32_620765138.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620765144 = nimCopy(null, tempHEX60gensym32_620765138, NTI620758259);
          var Temporary5 = result1_620765125;
          if (ConstSet108[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620765104 = nimCopy(result_620765104, succeed_620765105(input_620765102, Temporary5.value, result2_620765144.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620765104;

      }

  var result_620765075 = null;

    Label1: do {
    } while (false);
    result_620765075 = {body: HEX3Aanonymous_620765101};

  return result_620765075;

}

function parse_620765669(p_620765671, input_620765672) {
  var result_620765673 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620765671.body == null)) {
    result_620765673 = nimCopy(result_620765673, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620765672, NTI33554439), fromInput: nimCopy(null, input_620765672, NTI33554439), value: []}, NTI620763109);
    break BeforeRet;
    }
    
    result_620765673 = nimCopy(result_620765673, p_620765671.body(input_620765672), NTI620763109);
  } while (false);

  return result_620765673;

}

function map_620766487(a_620766490, fn_620766492) {

function succeedImpl_620766504(inputInHEX60gensym176_620766505, valueInHEX60gensym176_620766506, tailInHEX60gensym176_620766507) {
  var result_620766509 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766509 = nimCopy(result_620766509, {kind: 0, value: nimCopy(null, valueInHEX60gensym176_620766506, NTI687865860), tail: nimCopy(null, tailInHEX60gensym176_620766507, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym176_620766505, NTI33554439), expected: []}, NTI620757844);

  return result_620766509;

}

function failImpl_620766511(inputInHEX60gensym176_620766512, expectedInHEX60gensym176_620766513, tailInHEX60gensym176_620766514) {
  var result_620766516 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766516 = nimCopy(result_620766516, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym176_620766513, NTI620764210), tail: nimCopy(null, tailInHEX60gensym176_620766514, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym176_620766512, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620766516;

}
      
function HEX3Aanonymous_620766519(input_620766520) {
            var Temporary2;
          var Temporary3;

        var result_620766522 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620766523 = succeedImpl_620766504;
          var fail_620766524 = failImpl_620766511;
          Label1: do {
            var tempHEX60gensym24_620766537 = parse_620765669(a_620766490, input_620766520);
            if ((tempHEX60gensym24_620766537.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620766537;
            if (ConstSet109[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620766522 = nimCopy(result_620766522, {kind: 1, fromInput: nimCopy(null, input_620766520, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620766537.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620766543 = nimCopy(null, tempHEX60gensym24_620766537, NTI620763109);
          var Temporary3 = result1_620766543;
          if (ConstSet110[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620766522 = nimCopy(result_620766522, succeed_620766523(input_620766520, fn_620766492(Temporary3.value), result1_620766543.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620766522;

      }

  var result_620766493 = null;

    Label1: do {
    } while (false);
    result_620766493 = {body: HEX3Aanonymous_620766519};

  return result_620766493;

}

function parse_620766185(p_620766187, input_620766188) {
  var result_620766189 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

  BeforeRet: do {
    if ((p_620766187.body == null)) {
    result_620766189 = nimCopy(result_620766189, {kind: 1, expected: [makeNimstrLit("forward-declared parser to be initialized with .become(Parser)")], tail: nimCopy(null, input_620766188, NTI33554439), fromInput: nimCopy(null, input_620766188, NTI33554439), value: []}, NTI620763555);
    break BeforeRet;
    }
    
    result_620766189 = nimCopy(result_620766189, p_620766187.body(input_620766188), NTI620763555);
  } while (false);

  return result_620766189;

}

function map_620766395(a_620766398, fn_620766400) {

function succeedImpl_620766412(inputInHEX60gensym175_620766413, valueInHEX60gensym175_620766414, tailInHEX60gensym175_620766415) {
  var result_620766417 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620766417 = nimCopy(result_620766417, {kind: 0, value: nimCopy(null, valueInHEX60gensym175_620766414, NTI620764049), tail: nimCopy(null, tailInHEX60gensym175_620766415, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym175_620766413, NTI33554439), expected: []}, NTI620763109);

  return result_620766417;

}

function failImpl_620766419(inputInHEX60gensym175_620766420, expectedInHEX60gensym175_620766421, tailInHEX60gensym175_620766422) {
  var result_620766424 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620766424 = nimCopy(result_620766424, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym175_620766421, NTI620764143), tail: nimCopy(null, tailInHEX60gensym175_620766422, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym175_620766420, NTI33554439), value: []}, NTI620763109);

  return result_620766424;

}
      
function HEX3Aanonymous_620766427(input_620766428) {
            var Temporary2;
          var Temporary3;

        var result_620766430 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620766431 = succeedImpl_620766412;
          var fail_620766432 = failImpl_620766419;
          Label1: do {
            var tempHEX60gensym24_620766445 = parse_620766185(a_620766398, input_620766428);
            if ((tempHEX60gensym24_620766445.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620766445;
            if (ConstSet111[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620766430 = nimCopy(result_620766430, {kind: 1, fromInput: nimCopy(null, input_620766428, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620766445.tail, NTI33554439), value: []}, NTI620763109);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620766451 = nimCopy(null, tempHEX60gensym24_620766445, NTI620763555);
          var Temporary3 = result1_620766451;
          if (ConstSet112[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620766430 = nimCopy(result_620766430, succeed_620766431(input_620766428, fn_620766400(Temporary3.value), result1_620766451.tail), NTI620763109);
          break BeforeRet;
        } while (false);

        return result_620766430;

      }

  var result_620766401 = null;

    Label1: do {
    } while (false);
    result_620766401 = {body: HEX3Aanonymous_620766427};

  return result_620766401;

}

function HEX26_620766227(x_620766229, y_620766230) {
  var result_620766231 = [];

    result_620766231 = new Array(chckRange(addInt((x_620766229).length, (y_620766230).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620766229).length, (y_620766230).length), 0, 2147483647) ; ++i) { result_620766231[i] = []; }    Label1: do {
      var i_620766250 = 0;
      var colontmp__620767722 = 0;
      colontmp__620767722 = subInt((x_620766229).length, 1);
      var res_620767723 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767723 <= colontmp__620767722)) break Label3;
            i_620766250 = res_620767723;
            result_620766231[chckIndx(i_620766250, 0, (result_620766231).length - 1)] = nimCopy(null, x_620766229[chckIndx(i_620766250, 0, (x_620766229).length - 1)], NTI620763103);
            res_620767723 = addInt(res_620767723, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620766258 = 0;
      var colontmp__620767726 = 0;
      colontmp__620767726 = subInt((y_620766230).length, 1);
      var res_620767727 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620767727 <= colontmp__620767726)) break Label6;
            i_620766258 = res_620767727;
            result_620766231[chckIndx(addInt(i_620766258, (x_620766229).length), 0, (result_620766231).length - 1)] = nimCopy(null, y_620766230[chckIndx(i_620766258, 0, (y_620766230).length - 1)], NTI620763103);
            res_620767727 = addInt(res_620767727, 1);
          }
      } while (false);
    } while (false);

  return result_620766231;

}

function HEX26_620766132(a_620766137, b_620766141) {

function succeedImpl_620766156(inputInHEX60gensym169_620766157, valueInHEX60gensym169_620766158, tailInHEX60gensym169_620766159) {
  var result_620766161 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620766161 = nimCopy(result_620766161, {kind: 0, value: nimCopy(null, valueInHEX60gensym169_620766158, NTI620763939), tail: nimCopy(null, tailInHEX60gensym169_620766159, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym169_620766157, NTI33554439), expected: []}, NTI620763555);

  return result_620766161;

}

function failImpl_620766163(inputInHEX60gensym169_620766164, expectedInHEX60gensym169_620766165, tailInHEX60gensym169_620766166) {
  var result_620766168 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620766168 = nimCopy(result_620766168, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym169_620766165, NTI620763945), tail: nimCopy(null, tailInHEX60gensym169_620766166, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym169_620766164, NTI33554439), value: []}, NTI620763555);

  return result_620766168;

}
      
function HEX3Aanonymous_620766171(input_620766172) {
            var Temporary2;
            var Temporary4;
          var Temporary5;
          var Temporary6;

        var result_620766174 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620766175 = succeedImpl_620766156;
          var fail_620766176 = failImpl_620766163;
          Label1: do {
            var tempHEX60gensym26_620766201 = parse_620766185(a_620766137, input_620766172);
            if ((tempHEX60gensym26_620766201.kind == 1)) {
            var Temporary2 = tempHEX60gensym26_620766201;
            if (ConstSet113[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620766174 = nimCopy(result_620766174, {kind: 1, fromInput: nimCopy(null, input_620766172, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym26_620766201.tail, NTI33554439), value: []}, NTI620763555);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620766207 = nimCopy(null, tempHEX60gensym26_620766201, NTI620763555);
          Label3: do {
            var tempHEX60gensym28_620766220 = parse_620766185(b_620766141, result1_620766207.tail);
            if ((tempHEX60gensym28_620766220.kind == 1)) {
            var Temporary4 = tempHEX60gensym28_620766220;
            if (ConstSet114[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620766174 = nimCopy(result_620766174, {kind: 1, fromInput: nimCopy(null, input_620766172, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym28_620766220.tail, NTI33554439), value: []}, NTI620763555);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620766226 = nimCopy(null, tempHEX60gensym28_620766220, NTI620763555);
          var Temporary5 = result1_620766207;
          if (ConstSet115[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          var Temporary6 = result2_620766226;
          if (ConstSet116[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1090519061)); }
          result_620766174 = nimCopy(result_620766174, succeed_620766175(input_620766172, HEX26_620766227(Temporary5.value, Temporary6.value), result2_620766226.tail), NTI620763555);
          break BeforeRet;
        } while (false);

        return result_620766174;

      }

  var result_620766145 = null;

    Label1: do {
    } while (false);
    result_620766145 = {body: HEX3Aanonymous_620766171};

  return result_620766145;

}

function map_620765895(a_620765898, fn_620765900) {

function succeedImpl_620765912(inputInHEX60gensym165_620765913, valueInHEX60gensym165_620765914, tailInHEX60gensym165_620765915) {
  var result_620765917 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765917 = nimCopy(result_620765917, {kind: 0, value: nimCopy(null, valueInHEX60gensym165_620765914, NTI620763664), tail: nimCopy(null, tailInHEX60gensym165_620765915, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym165_620765913, NTI33554439), expected: []}, NTI620763555);

  return result_620765917;

}

function failImpl_620765919(inputInHEX60gensym165_620765920, expectedInHEX60gensym165_620765921, tailInHEX60gensym165_620765922) {
  var result_620765924 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765924 = nimCopy(result_620765924, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym165_620765921, NTI620763707), tail: nimCopy(null, tailInHEX60gensym165_620765922, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym165_620765920, NTI33554439), value: []}, NTI620763555);

  return result_620765924;

}
      
function HEX3Aanonymous_620765927(input_620765928) {
            var Temporary2;
          var Temporary3;

        var result_620765930 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620765931 = succeedImpl_620765912;
          var fail_620765932 = failImpl_620765919;
          Label1: do {
            var tempHEX60gensym24_620765945 = parse_620765669(a_620765898, input_620765928);
            if ((tempHEX60gensym24_620765945.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620765945;
            if (ConstSet117[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620765930 = nimCopy(result_620765930, {kind: 1, fromInput: nimCopy(null, input_620765928, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620765945.tail, NTI33554439), value: []}, NTI620763555);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620765951 = nimCopy(null, tempHEX60gensym24_620765945, NTI620763109);
          var Temporary3 = result1_620765951;
          if (ConstSet118[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620765930 = nimCopy(result_620765930, succeed_620765931(input_620765928, fn_620765900(Temporary3.value), result1_620765951.tail), NTI620763555);
          break BeforeRet;
        } while (false);

        return result_620765930;

      }

  var result_620765901 = null;

    Label1: do {
    } while (false);
    result_620765901 = {body: HEX3Aanonymous_620765927};

  return result_620765901;

}

function nop_620765250() {

function succeedImpl_620765263(inputInHEX60gensym155_620765264, valueInHEX60gensym155_620765265, tailInHEX60gensym155_620765266) {
  var result_620765268 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765268 = nimCopy(result_620765268, {kind: 0, value: nimCopy(null, valueInHEX60gensym155_620765265, NTI620763152), tail: nimCopy(null, tailInHEX60gensym155_620765266, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym155_620765264, NTI33554439), expected: []}, NTI620763109);

  return result_620765268;

}

function failImpl_620765291(inputInHEX60gensym155_620765292, expectedInHEX60gensym155_620765293, tailInHEX60gensym155_620765294) {
  var result_620765296 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765296 = nimCopy(result_620765296, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym155_620765293, NTI620763185), tail: nimCopy(null, tailInHEX60gensym155_620765294, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym155_620765292, NTI33554439), value: []}, NTI620763109);

  return result_620765296;

}
      
function HEX3Aanonymous_620765299(input_620765300) {
        var result_620765302 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620765303 = succeedImpl_620765263;
          var fail_620765304 = failImpl_620765291;
          result_620765302 = nimCopy(result_620765302, succeed_620765303(input_620765300, [], input_620765300), NTI620763109);

        return result_620765302;

      }

  var result_620765252 = null;

    Label1: do {
    } while (false);
    result_620765252 = {body: HEX3Aanonymous_620765299};

  return result_620765252;

}

function map_620765405(a_620765408, fn_620765410) {

function succeedImpl_620765422(inputInHEX60gensym157_620765423, valueInHEX60gensym157_620765424, tailInHEX60gensym157_620765425) {
  var result_620765427 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765427 = nimCopy(result_620765427, {kind: 0, value: nimCopy(null, valueInHEX60gensym157_620765424, NTI620763254), tail: nimCopy(null, tailInHEX60gensym157_620765425, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym157_620765423, NTI33554439), expected: []}, NTI620763109);

  return result_620765427;

}

function failImpl_620765429(inputInHEX60gensym157_620765430, expectedInHEX60gensym157_620765431, tailInHEX60gensym157_620765432) {
  var result_620765434 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765434 = nimCopy(result_620765434, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym157_620765431, NTI620763297), tail: nimCopy(null, tailInHEX60gensym157_620765432, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym157_620765430, NTI33554439), value: []}, NTI620763109);

  return result_620765434;

}
      
function HEX3Aanonymous_620765437(input_620765438) {
            var Temporary2;
          var Temporary3;

        var result_620765440 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620765441 = succeedImpl_620765422;
          var fail_620765442 = failImpl_620765429;
          Label1: do {
            var tempHEX60gensym24_620765455 = parse_1090520010(a_620765408, input_620765438);
            if ((tempHEX60gensym24_620765455.kind == 1)) {
            var Temporary2 = tempHEX60gensym24_620765455;
            if (ConstSet119[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620765440 = nimCopy(result_620765440, {kind: 1, fromInput: nimCopy(null, input_620765438, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym24_620765455.tail, NTI33554439), value: []}, NTI620763109);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620765461 = nimCopy(null, tempHEX60gensym24_620765455, NTI1090519270);
          var Temporary3 = result1_620765461;
          if (ConstSet120[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
          result_620765440 = nimCopy(result_620765440, succeed_620765441(input_620765438, fn_620765410(Temporary3.value), result1_620765461.tail), NTI620763109);
          break BeforeRet;
        } while (false);

        return result_620765440;

      }

  var result_620765411 = null;

    Label1: do {
    } while (false);
    result_620765411 = {body: HEX3Aanonymous_620765437};

  return result_620765411;

}

function HEX2A_620765242(a_620765244, n_620765245) {
    var Temporary1;
      
function HEX3Aanonymous_620765367(x_620765396) {
        var result_620765399 = [];

          result_620765399 = nimCopy(null, [x_620765396], NTI620763254);

        return result_620765399;

      }

function succeedImpl_620765472(inputInHEX60gensym158_620765473, valueInHEX60gensym158_620765474, tailInHEX60gensym158_620765475) {
  var result_620765477 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765477 = nimCopy(result_620765477, {kind: 0, value: nimCopy(null, valueInHEX60gensym158_620765474, NTI620763337), tail: nimCopy(null, tailInHEX60gensym158_620765475, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym158_620765473, NTI33554439), expected: []}, NTI620763109);

  return result_620765477;

}

function failImpl_620765479(inputInHEX60gensym158_620765480, expectedInHEX60gensym158_620765481, tailInHEX60gensym158_620765482) {
  var result_620765484 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765484 = nimCopy(result_620765484, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym158_620765481, NTI620763343), tail: nimCopy(null, tailInHEX60gensym158_620765482, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym158_620765480, NTI33554439), value: []}, NTI620763109);

  return result_620765484;

}
        
function HEX3Aanonymous_620765487(input_620765488) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620765490 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620765491 = succeedImpl_620765472;
            var fail_620765492 = failImpl_620765479;
            Label1: do {
              var tempHEX60gensym38_620765505 = parse_1090520010(a_620765244, input_620765488);
              if ((tempHEX60gensym38_620765505.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620765505;
              if (ConstSet121[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
              result_620765490 = nimCopy(result_620765490, {kind: 1, fromInput: nimCopy(null, input_620765488, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym38_620765505.tail, NTI33554439), value: []}, NTI620763109);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620765511 = nimCopy(null, tempHEX60gensym38_620765505, NTI1090519270);
            var Temporary3 = result1_620765511;
            if (ConstSet122[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
            var outputs_620765516 = [Temporary3.value];
            var lastTail_620765517 = nimCopy(null, result1_620765511.tail, NTI33554439);
            Label4: do {
              var i_620765523 = 0;
              var res_620767735 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620767735 <= n_620765245)) break Label6;
                    i_620765523 = res_620767735;
                    Label7: do {
                      var tempHEX60gensym40_620765536 = parse_1090520010(a_620765244, result1_620765511.tail);
                      if ((tempHEX60gensym40_620765536.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620765536;
                      if (ConstSet123[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1090519061)); }
                      result_620765490 = nimCopy(result_620765490, {kind: 1, fromInput: nimCopy(null, input_620765488, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym40_620765536.tail, NTI33554439), value: []}, NTI620763109);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620765511 = nimCopy(result1_620765511, tempHEX60gensym40_620765536, NTI1090519270);
                    if (eqStrings(result1_620765511.tail, lastTail_620765517)) {
                    break Label4;
                    }
                    
                    lastTail_620765517 = nimCopy(null, result1_620765511.tail, NTI33554439);
                    var Temporary9 = result1_620765511;
                    if (ConstSet124[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1090519061)); }
                    outputs_620765516.push(Temporary9.value);;
                    res_620767735 = addInt(res_620767735, 1);
                  }
              } while (false);
            } while (false);
            result_620765490 = nimCopy(result_620765490, succeed_620765491(input_620765488, outputs_620765516, result1_620765511.tail), NTI620763109);
          } while (false);

          return result_620765490;

        }

  var result_620765249 = null;

  BeforeRet: do {
    switch (n_620765245) {
    case 0:
      result_620765249 = nop_620765250();
      break BeforeRet;
      break;
    case 1:
      result_620765249 = map_620765405(a_620765244, HEX3Aanonymous_620765367);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620765487};
      break;
    }
    result_620765249 = Temporary1;
  } while (false);

  return result_620765249;

}

function nop_620765740() {

function succeedImpl_620765753(inputInHEX60gensym163_620765754, valueInHEX60gensym163_620765755, tailInHEX60gensym163_620765756) {
  var result_620765758 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765758 = nimCopy(result_620765758, {kind: 0, value: nimCopy(null, valueInHEX60gensym163_620765755, NTI620763562), tail: nimCopy(null, tailInHEX60gensym163_620765756, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym163_620765754, NTI33554439), expected: []}, NTI620763555);

  return result_620765758;

}

function failImpl_620765781(inputInHEX60gensym163_620765782, expectedInHEX60gensym163_620765783, tailInHEX60gensym163_620765784) {
  var result_620765786 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765786 = nimCopy(result_620765786, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym163_620765783, NTI620763595), tail: nimCopy(null, tailInHEX60gensym163_620765784, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym163_620765782, NTI33554439), value: []}, NTI620763555);

  return result_620765786;

}
      
function HEX3Aanonymous_620765789(input_620765790) {
        var result_620765792 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          var succeed_620765793 = succeedImpl_620765753;
          var fail_620765794 = failImpl_620765781;
          result_620765792 = nimCopy(result_620765792, succeed_620765793(input_620765790, [], input_620765790), NTI620763555);

        return result_620765792;

      }

  var result_620765742 = null;

    Label1: do {
    } while (false);
    result_620765742 = {body: HEX3Aanonymous_620765789};

  return result_620765742;

}

function HEX2A_620765727(a_620765729, n_620765730) {
    var Temporary1;
      
function HEX3Aanonymous_620765857(x_620765886) {
        var result_620765889 = [];

          result_620765889 = nimCopy(null, [nimCopy(null, x_620765886, NTI620763103)], NTI620763664);

        return result_620765889;

      }

function succeedImpl_620765962(inputInHEX60gensym166_620765963, valueInHEX60gensym166_620765964, tailInHEX60gensym166_620765965) {
  var result_620765967 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765967 = nimCopy(result_620765967, {kind: 0, value: nimCopy(null, valueInHEX60gensym166_620765964, NTI620763747), tail: nimCopy(null, tailInHEX60gensym166_620765965, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym166_620765963, NTI33554439), expected: []}, NTI620763555);

  return result_620765967;

}

function failImpl_620765969(inputInHEX60gensym166_620765970, expectedInHEX60gensym166_620765971, tailInHEX60gensym166_620765972) {
  var result_620765974 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765974 = nimCopy(result_620765974, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym166_620765971, NTI620763753), tail: nimCopy(null, tailInHEX60gensym166_620765972, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym166_620765970, NTI33554439), value: []}, NTI620763555);

  return result_620765974;

}
        
function HEX3Aanonymous_620765977(input_620765978) {
              var Temporary2;
            var Temporary3;
                      var Temporary8;
                    var Temporary9;

          var result_620765980 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

          BeforeRet: do {
            var succeed_620765981 = succeedImpl_620765962;
            var fail_620765982 = failImpl_620765969;
            Label1: do {
              var tempHEX60gensym38_620765995 = parse_620765669(a_620765729, input_620765978);
              if ((tempHEX60gensym38_620765995.kind == 1)) {
              var Temporary2 = tempHEX60gensym38_620765995;
              if (ConstSet125[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
              result_620765980 = nimCopy(result_620765980, {kind: 1, fromInput: nimCopy(null, input_620765978, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym38_620765995.tail, NTI33554439), value: []}, NTI620763555);
              break BeforeRet;
              }
              
            } while (false);
            var result1_620766001 = nimCopy(null, tempHEX60gensym38_620765995, NTI620763109);
            var Temporary3 = result1_620766001;
            if (ConstSet126[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519061)); }
            var outputs_620766006 = [nimCopy(null, Temporary3.value, NTI620763103)];
            var lastTail_620766007 = nimCopy(null, result1_620766001.tail, NTI33554439);
            Label4: do {
              var i_620766013 = 0;
              var res_620767744 = 2;
              Label5: do {
                  Label6: while (true) {
                  if (!(res_620767744 <= n_620765730)) break Label6;
                    i_620766013 = res_620767744;
                    Label7: do {
                      var tempHEX60gensym40_620766026 = parse_620765669(a_620765729, result1_620766001.tail);
                      if ((tempHEX60gensym40_620766026.kind == 1)) {
                      var Temporary8 = tempHEX60gensym40_620766026;
                      if (ConstSet127[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1090519061)); }
                      result_620765980 = nimCopy(result_620765980, {kind: 1, fromInput: nimCopy(null, input_620765978, NTI33554439), expected: nimCopy(null, Temporary8.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym40_620766026.tail, NTI33554439), value: []}, NTI620763555);
                      break BeforeRet;
                      }
                      
                    } while (false);
                    result1_620766001 = nimCopy(result1_620766001, tempHEX60gensym40_620766026, NTI620763109);
                    if (eqStrings(result1_620766001.tail, lastTail_620766007)) {
                    break Label4;
                    }
                    
                    lastTail_620766007 = nimCopy(null, result1_620766001.tail, NTI33554439);
                    var Temporary9 = result1_620766001;
                    if (ConstSet128[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1090519061)); }
                    var Temporary10 = nimCopy(null, Temporary9.value, NTI620763103);
                    outputs_620766006.push(Temporary10);;
                    res_620767744 = addInt(res_620767744, 1);
                  }
              } while (false);
            } while (false);
            result_620765980 = nimCopy(result_620765980, succeed_620765981(input_620765978, outputs_620766006, result1_620766001.tail), NTI620763555);
          } while (false);

          return result_620765980;

        }

  var result_620765739 = null;

  BeforeRet: do {
    switch (n_620765730) {
    case 0:
      result_620765739 = nop_620765740();
      break BeforeRet;
      break;
    case 1:
      result_620765739 = map_620765895(a_620765729, HEX3Aanonymous_620765857);
      break BeforeRet;
      break;
    default: 
      Label2: do {
      } while (false);
      Temporary1 = {body: HEX3Aanonymous_620765977};
      break;
    }
    result_620765739 = Temporary1;
  } while (false);

  return result_620765739;

}

function HEX7C_620765625(a_620765627, b_620765628) {

function succeedImpl_620765640(inputInHEX60gensym162_620765641, valueInHEX60gensym162_620765642, tailInHEX60gensym162_620765643) {
  var result_620765645 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765645 = nimCopy(result_620765645, {kind: 0, value: nimCopy(null, valueInHEX60gensym162_620765642, NTI620763103), tail: nimCopy(null, tailInHEX60gensym162_620765643, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym162_620765641, NTI33554439), expected: []}, NTI620763109);

  return result_620765645;

}

function failImpl_620765647(inputInHEX60gensym162_620765648, expectedInHEX60gensym162_620765649, tailInHEX60gensym162_620765650) {
  var result_620765652 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

    result_620765652 = nimCopy(result_620765652, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym162_620765649, NTI620763499), tail: nimCopy(null, tailInHEX60gensym162_620765650, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym162_620765648, NTI33554439), value: []}, NTI620763109);

  return result_620765652;

}
      
function HEX3Aanonymous_620765655(input_620765656) {
          var Temporary1;
          var Temporary2;

        var result_620765658 = ({kind: 0, value: [], expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620765659 = succeedImpl_620765640;
          var fail_620765660 = failImpl_620765647;
          var result1_620765685 = parse_620765669(a_620765627, input_620765656);
          if ((result1_620765685.kind == 0)) {
          result_620765658 = nimCopy(result_620765658, result1_620765685, NTI620763109);
          break BeforeRet;
          }
          
          var result2_620765702 = parse_620765669(b_620765628, input_620765656);
          if ((result2_620765702.kind == 0)) {
          result_620765658 = nimCopy(result_620765658, result2_620765702, NTI620763109);
          break BeforeRet;
          }
          
          var Temporary1 = result1_620765685;
          if (ConstSet129[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1090519061)); }
          var Temporary2 = result2_620765702;
          if (ConstSet130[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
          result_620765658 = nimCopy(result_620765658, fail_620765660(input_620765656, HEX26_687865962(Temporary1.expected, Temporary2.expected), input_620765656), NTI620763109);
        } while (false);

        return result_620765658;

      }

  var result_620765629 = null;

    Label1: do {
    } while (false);
    result_620765629 = {body: HEX3Aanonymous_620765655};

  return result_620765629;

}

function newSeq_620766283(len_620766285) {
  var result_620766286 = [];

    result_620766286 = new Array(len_620766285); for (var i = 0 ; i < len_620766285 ; ++i) { result_620766286[i] = 0; }
  return result_620766286;

}

function HEX26_620766318(x_620766320, y_620766321) {
  var result_620766322 = [];

    result_620766322 = new Array(chckRange(addInt((x_620766320).length, (y_620766321).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_620766320).length, (y_620766321).length), 0, 2147483647) ; ++i) { result_620766322[i] = 0; }    Label1: do {
      var i_620766341 = 0;
      var colontmp__620767754 = 0;
      colontmp__620767754 = subInt((x_620766320).length, 1);
      var res_620767755 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_620767755 <= colontmp__620767754)) break Label3;
            i_620766341 = res_620767755;
            result_620766322[chckIndx(i_620766341, 0, (result_620766322).length - 1)] = x_620766320[chckIndx(i_620766341, 0, (x_620766320).length - 1)];
            res_620767755 = addInt(res_620767755, 1);
          }
      } while (false);
    } while (false);
    Label4: do {
      var i_620766349 = 0;
      var colontmp__620767758 = 0;
      colontmp__620767758 = subInt((y_620766321).length, 1);
      var res_620767759 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_620767759 <= colontmp__620767758)) break Label6;
            i_620766349 = res_620767759;
            result_620766322[chckIndx(addInt(i_620766349, (x_620766320).length), 0, (result_620766322).length - 1)] = y_620766321[chckIndx(i_620766349, 0, (y_620766321).length - 1)];
            res_620767759 = addInt(res_620767759, 1);
          }
      } while (false);
    } while (false);

  return result_620766322;

}

function nop_620766607() {

function succeedImpl_620766620(inputInHEX60gensym178_620766621, valueInHEX60gensym178_620766622, tailInHEX60gensym178_620766623) {
  var result_620766625 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766625 = nimCopy(result_620766625, {kind: 0, value: nimCopy(null, valueInHEX60gensym178_620766622, NTI687865860), tail: nimCopy(null, tailInHEX60gensym178_620766623, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym178_620766621, NTI33554439), expected: []}, NTI620757844);

  return result_620766625;

}

function failImpl_620766627(inputInHEX60gensym178_620766628, expectedInHEX60gensym178_620766629, tailInHEX60gensym178_620766630) {
  var result_620766632 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620766632 = nimCopy(result_620766632, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym178_620766629, NTI620764288), tail: nimCopy(null, tailInHEX60gensym178_620766630, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym178_620766628, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620766632;

}
      
function HEX3Aanonymous_620766635(input_620766636) {
        var result_620766638 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

          var succeed_620766639 = succeedImpl_620766620;
          var fail_620766640 = failImpl_620766627;
          result_620766638 = nimCopy(result_620766638, succeed_620766639(input_620766636, ({rows: [], baseline: 0, width: 0, flag: 0}), input_620766636), NTI620757844);

        return result_620766638;

      }

  var result_620766609 = null;

    Label1: do {
    } while (false);
    result_620766609 = {body: HEX3Aanonymous_620766635};

  return result_620766609;

}

function HEX26_687866713(left_687866714, right_687866715) {
  var result_687866716 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_687866716 = nimCopy(result_687866716, join_687866063([nimCopy(null, left_687866714, NTI687865860), nimCopy(null, right_687866715, NTI687865860)]), NTI687865860);

  return result_687866716;

}

function HEX3CHEX3C_620767194(a_620767197, b_620767198) {

function succeedImpl_620767210(inputInHEX60gensym196_620767211, valueInHEX60gensym196_620767212, tailInHEX60gensym196_620767213) {
  var result_620767215 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620767215 = nimCopy(result_620767215, {kind: 0, value: nimCopy(null, valueInHEX60gensym196_620767212, NTI687865860), tail: nimCopy(null, tailInHEX60gensym196_620767213, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym196_620767211, NTI33554439), expected: []}, NTI620757844);

  return result_620767215;

}

function failImpl_620767217(inputInHEX60gensym196_620767218, expectedInHEX60gensym196_620767219, tailInHEX60gensym196_620767220) {
  var result_620767222 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

    result_620767222 = nimCopy(result_620767222, {kind: 1, expected: nimCopy(null, expectedInHEX60gensym196_620767219, NTI620764823), tail: nimCopy(null, tailInHEX60gensym196_620767220, NTI33554439), fromInput: nimCopy(null, inputInHEX60gensym196_620767218, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);

  return result_620767222;

}
      
function HEX3Aanonymous_620767225(input_620767226) {
            var Temporary2;
            var Temporary4;
          var Temporary5;

        var result_620767228 = ({kind: 0, value: ({rows: [], baseline: 0, width: 0, flag: 0}), expected: [], tail: [], fromInput: []});

        BeforeRet: do {
          var succeed_620767229 = succeedImpl_620767210;
          var fail_620767230 = failImpl_620767217;
          Label1: do {
            var tempHEX60gensym30_620767243 = parse_620760599(a_620767197, input_620767226);
            if ((tempHEX60gensym30_620767243.kind == 1)) {
            var Temporary2 = tempHEX60gensym30_620767243;
            if (ConstSet134[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
            result_620767228 = nimCopy(result_620767228, {kind: 1, fromInput: nimCopy(null, input_620767226, NTI33554439), expected: nimCopy(null, Temporary2.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym30_620767243.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result1_620767249 = nimCopy(null, tempHEX60gensym30_620767243, NTI620757844);
          Label3: do {
            var tempHEX60gensym32_620767262 = parse_620758704(b_620767198, result1_620767249.tail);
            if ((tempHEX60gensym32_620767262.kind == 1)) {
            var Temporary4 = tempHEX60gensym32_620767262;
            if (ConstSet135[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'expected\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519061)); }
            result_620767228 = nimCopy(result_620767228, {kind: 1, fromInput: nimCopy(null, input_620767226, NTI33554439), expected: nimCopy(null, Temporary4.expected, NTI1090519075), tail: nimCopy(null, tempHEX60gensym32_620767262.tail, NTI33554439), value: ({rows: [], baseline: 0, width: 0, flag: 0})}, NTI620757844);
            break BeforeRet;
            }
            
          } while (false);
          var result2_620767268 = nimCopy(null, tempHEX60gensym32_620767262, NTI1090519172);
          var Temporary5 = result1_620767249;
          if (ConstSet136[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519061)); }
          result_620767228 = nimCopy(result_620767228, succeed_620767229(input_620767226, Temporary5.value, result2_620767268.tail), NTI620757844);
          break BeforeRet;
        } while (false);

        return result_620767228;

      }

  var result_620767199 = null;

    Label1: do {
    } while (false);
    result_620767199 = {body: HEX3Aanonymous_620767225};

  return result_620767199;

}

function HEX3Aanonymous_620760010(x_620760030) {
  var result_620760033 = [];

    result_620760033 = nimCopy(null, [nimCopy(null, x_620760030, NTI620758302)], NTI620758807);

  return result_620760033;

}

function HEX3Aanonymous_620759514(x_620759534) {
  var result_620759537 = [];

    result_620759537 = nimCopy(null, [nimCopy(null, x_620759534, NTI33554439)], NTI1090519234);

  return result_620759537;

}

function HEX3Aanonymous_620760209(x_620760270) {
  var result_620760273 = [];

    var resultHEX60gensym53_620760282 = newSeq_452985301(0);
    Label1: do {
      var xHEX60gensym53_620760286 = [];
      var i_620767413 = 0;
      var L_620767414 = (x_620760270).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767413 < L_620767414)) break Label3;
            xHEX60gensym53_620760286 = x_620760270[chckIndx(i_620767413, 0, (x_620760270).length - 1)];
            var a_620760287 = nimCopy(null, resultHEX60gensym53_620760282, NTI452985127);
            var b_620760288 = nimCopy(null, xHEX60gensym53_620760286, NTI620758253);
            resultHEX60gensym53_620760282 = nimCopy(null, HEX26_687865962(a_620760287, b_620760288), NTI687865915);
            i_620767413 = addInt(i_620767413, 1);
            if (!(((x_620760270).length == L_620767414))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_620760273 = nimCopy(null, resultHEX60gensym53_620760282, NTI452985127);

  return result_620760273;

}

function HEX3Aanonymous_620761235(x_620761255) {
  var result_620761258 = [];

    result_620761258 = nimCopy(null, [nimCopy(null, x_620761255, NTI620759343)], NTI620759871);

  return result_620761258;

}

function HEX3Aanonymous_620760739(x_620760759) {
  var result_620760762 = [];

    result_620760762 = nimCopy(null, [nimCopy(null, x_620760759, NTI687865860)], NTI620759450);

  return result_620760762;

}

function HEX3Aanonymous_620761434(x_620761525) {
  var result_620761528 = [];

    var resultHEX60gensym79_620761537 = newSeq_687866191(0);
    Label1: do {
      var xHEX60gensym79_620761541 = [];
      var i_620767452 = 0;
      var L_620767453 = (x_620761525).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767452 < L_620767453)) break Label3;
            xHEX60gensym79_620761541 = x_620761525[chckIndx(i_620767452, 0, (x_620761525).length - 1)];
            var a_620761542 = nimCopy(null, resultHEX60gensym79_620761537, NTI687866058);
            var b_620761543 = nimCopy(null, xHEX60gensym79_620761541, NTI620759294);
            resultHEX60gensym79_620761537 = nimCopy(null, HEX26_620761473(a_620761542, b_620761543), NTI620760276);
            i_620767452 = addInt(i_620767452, 1);
            if (!(((x_620761525).length == L_620767453))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_620761528 = nimCopy(null, resultHEX60gensym79_620761537, NTI687866058);

  return result_620761528;

}

function HEX3Aanonymous_620761614(atoms_620761630) {
  var result_620761633 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620761633 = nimCopy(result_620761633, join_687866063(atoms_620761630), NTI687865860);

  return result_620761633;

}

function HEX3Aanonymous_620761729(ch_620761745) {
  var result_620761748 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620761748 = nimCopy(result_620761748, toTextRect_687865909(nimCharToStr(ch_620761745), 0, 1), NTI687865860);

  return result_620761748;

}

function HEX3Aanonymous_620761816(letter_620761832) {
  var result_620761835 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620761835 = nimCopy(result_620761835, toTextRect_687865909(inFont_637534317(letter_620761832, 0), 0, 1), NTI687865860);

  return result_620761835;

}

function HEX3Aanonymous_620761859(pair_620761862) {
    
function HEX3Aanonymous_620762473(x_620762493) {
      var result_620762496 = [];

        result_620762496 = nimCopy(null, [nimCopy(null, x_620762493, NTI620758302)], NTI620758807);

      return result_620762496;

    }
    
function HEX3Aanonymous_620762370(x_620762390) {
      var result_620762393 = [];

        result_620762393 = nimCopy(null, [nimCopy(null, x_620762390, NTI33554439)], NTI1090519234);

      return result_620762393;

    }
    
function HEX3Aanonymous_620762555(x_620762590) {
      var result_620762593 = [];

        var resultHEX60gensym98_620762602 = newSeq_452985301(0);
        Label1: do {
          var xHEX60gensym98_620762606 = [];
          var i_620767589 = 0;
          var L_620767590 = (x_620762590).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_620767589 < L_620767590)) break Label3;
                xHEX60gensym98_620762606 = x_620762590[chckIndx(i_620767589, 0, (x_620762590).length - 1)];
                var a_620762607 = nimCopy(null, resultHEX60gensym98_620762602, NTI452985127);
                var b_620762608 = nimCopy(null, xHEX60gensym98_620762606, NTI620758253);
                resultHEX60gensym98_620762602 = nimCopy(null, HEX26_687865962(a_620762607, b_620762608), NTI687865915);
                i_620767589 = addInt(i_620767589, 1);
                if (!(((x_620762590).length == L_620767590))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_620762593 = nimCopy(null, resultHEX60gensym98_620762602, NTI452985127);

      return result_620762593;

    }
    
function HEX3Aanonymous_620762658(letter_620762673) {
      var result_620762676 = ({rows: [], baseline: 0, width: 0, flag: 0});

        result_620762676 = nimCopy(result_620762676, toTextRect_687865909(inFont_637534317(letter_620762673, font_620761867), 0, 1), NTI687865860);

      return result_620762676;

    }

  var result_620761865 = null;

    var colontmp__620767569 = nimCopy(null, pair_620761862, NTI637534600);
    var name_620761866 = nimCopy(null, colontmp__620767569["Field0"], NTI33554439);
    var font_620761867 = colontmp__620767569["Field1"];
    result_620761865 = map_620761750(HEX7C_1090520154(HEX3CHEX3C_620762221(HEX3CHEX3C_620762138(HEX3EHEX3E_620761959(HEX3EHEX3E_620762042(HEX3EHEX3E_620761959(HEX3EHEX3E_620761876(s_1090519151(name_620761866), ws_620760351), c_1090519273(123)), ws_620760351), alpha_620761715), ws_620760351), c_1090519273(125)), HEX3EHEX3E_620761959(HEX3EHEX3E_620761876(s_1090519151(name_620761866), map_620760294(HEX26_620760067(map_620759830(HEX2A_620759204(whitespace_1090520135, HEX2EHEX2E_654312275(1, 2147483647).a), HEX3Aanonymous_620762473), HEX2A_620759662(HEX7C_620759560(map_620759340(whitespace_1090520135, HEX3Aanonymous_620762370), nop_620759212()), subInt(HEX2EHEX2E_654312275(1, 2147483647).b, HEX2EHEX2E_654312275(1, 2147483647).a))), HEX3Aanonymous_620762555)), alpha_620761715)), HEX3Aanonymous_620762658);

  return result_620761865;

}

function HEX3Aanonymous_620762860(entry_620762863) {
    
function HEX3Aanonymous_620763067(rect_620763083) {
        var Temporary1;
          var Temporary2;

      var result_620763086 = ({rows: [], baseline: 0, width: 0, flag: 0});

        var rect_620763087 = nimCopy(null, rect_620763083, NTI687865860);
          if (!(rect_620763087.width == 1)) Temporary2 = false; else {            Temporary2 = (height_687865900(rect_620763087) == 1);          }        if (Temporary2) {
        rect_620763087.rows[chckIndx(0, 0, (rect_620763087.rows).length - 1)].push.apply(rect_620763087.rows[chckIndx(0, 0, (rect_620763087.rows).length - 1)], val_620762868.Field0);;
        Temporary1 = rect_620763087;
        }
        else {
        Temporary1 = stack_687866775([toTextRect_687865909(val_620762868.Field1, 0, 0), nimCopy(null, rect_620763087, NTI687865860)], addInt(1, rect_620763087.baseline), 0);
        }
        
        result_620763086 = nimCopy(result_620763086, Temporary1, NTI687865860);

      return result_620763086;

    }

  var result_620762866 = null;

    var colontmp__620767614 = nimCopy(null, entry_620762863, NTI637534909);
    var key_620762867 = nimCopy(null, colontmp__620767614["Field0"], NTI33554439);
    var val_620762868 = nimCopy(null, colontmp__620767614["Field1"], NTI637534910);
    result_620762866 = map_620763088(HEX3EHEX3E_620762984(HEX3EHEX3E_620762042(HEX3EHEX3E_620762888(s_1090519151(key_620762867), HEX21_620758602(letter_1090520228)), ws_620760351), atom_620760354[0]), HEX3Aanonymous_620763067);

  return result_620762866;

}

function HEX3Aanonymous_620763274(x_620763294) {
  var result_620763297 = [];

    result_620763297 = nimCopy(null, [nimCopy(null, x_620763294, NTI687865860)], NTI620759450);

  return result_620763297;

}

function HEX3Aanonymous_620763329(x_620763349) {
  var result_620763352 = [];

    result_620763352 = nimCopy(null, [nimCopy(null, x_620763349, NTI687865860)], NTI620759450);

  return result_620763352;

}

function HEX3Aanonymous_620763473(fraction_620763516) {
      var Temporary1;
      var Temporary2;
        var Temporary3;

  var result_620763519 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var numerator_620763520 = nimCopy(null, fraction_620763516[chckIndx(0, 0, (fraction_620763516).length - 1)], NTI687865860);
    var denominator_620763521 = nimCopy(null, fraction_620763516[chckIndx(1, 0, (fraction_620763516).length - 1)], NTI687865860);
    var width_620763526 = max_620763482(numerator_620763520.width, denominator_620763521.width);
    var fractionLine_620763527 = nsuRepeatStr(makeNimstrLit("\xE2\x94\x80"), width_620763526);
    var flag_620763528 = 5;
      if (!(numerator_620763520.flag == 5)) Temporary2 = false; else {        Temporary2 = (numerator_620763520.width == width_620763526);      }      if (Temporary2) Temporary1 = true; else {        if (!(denominator_620763521.flag == 5)) Temporary3 = false; else {          Temporary3 = (denominator_620763521.width == width_620763526);        }        Temporary1 = Temporary3;      }    if (Temporary1) {
    fractionLine_620763527 = nimCopy(null, (makeNimstrLit("\xE2\x95\xB6") || []).concat(fractionLine_620763527 || [],makeNimstrLit("\xE2\x95\xB4") || []), NTI33554439);
    flag_620763528 = 0;
    }
    
    result_620763519 = nimCopy(result_620763519, withFlag_687866861(stack_687866775([nimCopy(null, numerator_620763520, NTI687865860), toTextRect_687865909(fractionLine_620763527, 0, 0), nimCopy(null, denominator_620763521, NTI687865860)], height_687865900(numerator_620763520), 0), flag_620763528), NTI687865860);

  return result_620763519;

}

function HEX3Aanonymous_620763688(x_620763708) {
  var result_620763711 = [];

    result_620763711 = nimCopy(null, [nimCopy(null, x_620763708, NTI687865860)], NTI620759450);

  return result_620763711;

}

function HEX3Aanonymous_620763743(x_620763763) {
  var result_620763766 = [];

    result_620763766 = nimCopy(null, [nimCopy(null, x_620763763, NTI687865860)], NTI620759450);

  return result_620763766;

}

function HEX3Aanonymous_620763813(nk_620763832) {
  var result_620763835 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var n_620763836 = nimCopy(null, nk_620763832[chckIndx(0, 0, (nk_620763832).length - 1)], NTI687865860);
    var k_620763837 = nimCopy(null, nk_620763832[chckIndx(1, 0, (nk_620763832).length - 1)], NTI687865860);
    var inside_620763838 = stack_687866775([nimCopy(null, n_620763836, NTI687865860), nimCopy(null, k_620763837, NTI687865860)], height_687865900(n_620763836), 0);
    result_620763835 = nimCopy(result_620763835, join_687866063([bigDelimiter_620757000(makeNimstrLit("("), height_687865900(inside_620763838), chckRange(inside_620763838.baseline, 0, 2147483647)), nimCopy(null, inside_620763838, NTI687865860), bigDelimiter_620757000(makeNimstrLit(")"), height_687865900(inside_620763838), chckRange(inside_620763838.baseline, 0, 2147483647))]), NTI687865860);

  return result_620763835;

}

function HEX3Aanonymous_620763868(arg_620763910) {
  var result_620763913 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var horizontal_620763914 = toTextRect_687865909(nsuRepeatStr(makeNimstrLit("\xE2\x94\x80"), arg_620763910.width), 0, 0);
    var sandwich_620763915 = stack_687866775([nimCopy(null, horizontal_620763914, NTI687865860), nimCopy(null, arg_620763910, NTI687865860), nimCopy(null, horizontal_620763914, NTI687865860)], addInt(arg_620763910.baseline, 1), 1);
    var left_620763916 = ({rows: [], baseline: 0, width: 0, flag: 0});
    left_620763916.rows = nimCopy(null, newSeq_452985301(height_687865900(sandwich_620763915)), NTI452985127);
    left_620763916.width = 1;
    left_620763916.baseline = sandwich_620763915.baseline;
    Label1: do {
      var i_620763928 = 0;
      var colontmp__620767680 = 0;
      colontmp__620767680 = subInt(height_687865900(sandwich_620763915), 1);
      var i_620767681 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767681 < colontmp__620767680)) break Label3;
            i_620763928 = i_620767681;
            left_620763916.rows[chckIndx(i_620763928, 0, (left_620763916.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x82"), NTI33554439);
            i_620767681 = addInt(i_620767681, 1);
          }
      } while (false);
    } while (false);
    var right_620763929 = nimCopy(null, left_620763916, NTI687865860);
    left_620763916.rows[chckIndx(0, 0, (left_620763916.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x8C"), NTI33554439);
    HEX5BHEX5DHEX3D_620758398(left_620763916.rows, 1, makeNimstrLit("\xE2\x94\x94"));
    right_620763929.rows[chckIndx(0, 0, (right_620763929.rows).length - 1)] = nimCopy(null, makeNimstrLit("\xE2\x94\x90"), NTI33554439);
    HEX5BHEX5DHEX3D_620758398(right_620763929.rows, 1, makeNimstrLit("\xE2\x94\x98"));
    result_620763913 = nimCopy(result_620763913, join_687866063([nimCopy(null, left_620763916, NTI687865860), nimCopy(null, sandwich_620763915, NTI687865860), nimCopy(null, right_620763929, NTI687865860)]), NTI687865860);

  return result_620763913;

}

function HEX3Aanonymous_620763969(arg_620764153) {
    var Temporary1;

  var result_620764156 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var overbar_620764157 = toTextRect_687865909(nsuRepeatStr(makeNimstrLit("_"), arg_620764153.width), 0, 0);
    if ((height_687865900(arg_620764153) == 1)) {
    Temporary1 = {rows: [makeNimstrLit("\xE2\x88\x9A")], baseline: 0, width: 1, flag: 0};
    }
    else {
      Label2: do {
        var resultHEX60gensym133_620764172 = [];
        Label3: do {
          var xHEX60gensym133_620764173 = 0;
          var colontmp__620767685 = 0;
          colontmp__620767685 = divInt(height_687865900(arg_620764153), 2);
          var res_620767686 = colontmp__620767685;
          Label4: do {
              Label5: while (true) {
              if (!(1 <= res_620767686)) break Label5;
                xHEX60gensym133_620764173 = res_620767686;
                resultHEX60gensym133_620764172.push(xHEX60gensym133_620764173);;
                res_620767686 = subInt(res_620767686, 1);
              }
          } while (false);
        } while (false);
        var HEX3Atmp_620764197 = nimCopy(null, resultHEX60gensym133_620764172, NTI620762358);
        var iHEX60gensym134_620764200 = 0;
        var resultHEX60gensym134_620764207 = newSeq_687866191(chckRange((HEX3Atmp_620764197).length, 0, 2147483647));
        Label6: do {
          var it_620764211 = 0;
          var i_620767690 = 0;
          var L_620767691 = (HEX3Atmp_620764197).length;
          Label7: do {
              Label8: while (true) {
              if (!(i_620767690 < L_620767691)) break Label8;
                it_620764211 = HEX3Atmp_620764197[chckIndx(i_620767690, 0, (HEX3Atmp_620764197).length - 1)];
                resultHEX60gensym134_620764207[chckIndx(iHEX60gensym134_620764200, 0, (resultHEX60gensym134_620764207).length - 1)] = nimCopy(resultHEX60gensym134_620764207[chckIndx(iHEX60gensym134_620764200, 0, (resultHEX60gensym134_620764207).length - 1)], toTextRect_687865909(makeNimstrLit("\xE2\x95\xB2"), addInt(subInt(arg_620764153.baseline, height_687865900(arg_620764153)), it_620764211), 0), NTI687865860);
                iHEX60gensym134_620764200 = addInt(iHEX60gensym134_620764200, 1);
                i_620767690 = addInt(i_620767690, 1);
                if (!(((HEX3Atmp_620764197).length == L_620767691))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
      Label9: do {
        var resultHEX60gensym137_620764230 = [];
        Label10: do {
          var xHEX60gensym137_620764231 = 0;
          var colontmp__620767695 = 0;
          colontmp__620767695 = height_687865900(arg_620764153);
          var res_620767696 = 1;
          Label11: do {
              Label12: while (true) {
              if (!(res_620767696 <= colontmp__620767695)) break Label12;
                xHEX60gensym137_620764231 = res_620767696;
                resultHEX60gensym137_620764230.push(xHEX60gensym137_620764231);;
                res_620767696 = addInt(res_620767696, 1);
              }
          } while (false);
        } while (false);
        var HEX3Atmp_620764255 = nimCopy(null, resultHEX60gensym137_620764230, NTI620762413);
        var iHEX60gensym138_620764258 = 0;
        var resultHEX60gensym138_620764265 = newSeq_687866191(chckRange((HEX3Atmp_620764255).length, 0, 2147483647));
        Label13: do {
          var it_620764269 = 0;
          var i_620767699 = 0;
          var L_620767700 = (HEX3Atmp_620764255).length;
          Label14: do {
              Label15: while (true) {
              if (!(i_620767699 < L_620767700)) break Label15;
                it_620764269 = HEX3Atmp_620764255[chckIndx(i_620767699, 0, (HEX3Atmp_620764255).length - 1)];
                resultHEX60gensym138_620764265[chckIndx(iHEX60gensym138_620764258, 0, (resultHEX60gensym138_620764265).length - 1)] = nimCopy(resultHEX60gensym138_620764265[chckIndx(iHEX60gensym138_620764258, 0, (resultHEX60gensym138_620764265).length - 1)], toTextRect_687865909(makeNimstrLit("\xE2\x95\xB1"), addInt(subInt(arg_620764153.baseline, height_687865900(arg_620764153)), it_620764269), 0), NTI687865860);
                iHEX60gensym138_620764258 = addInt(iHEX60gensym138_620764258, 1);
                i_620767699 = addInt(i_620767699, 1);
                if (!(((HEX3Atmp_620764255).length == L_620767700))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
      } while (false);
    Temporary1 = join_687866063(HEX26_620761473(resultHEX60gensym134_620764207, resultHEX60gensym138_620764265));
    }
    
    var symbol_620764278 = nimCopy(null, Temporary1, NTI687865860);
    result_620764156 = nimCopy(result_620764156, join_687866063([nimCopy(null, symbol_620764278, NTI687865860), stack_687866775([nimCopy(null, overbar_620764157, NTI687865860), nimCopy(null, arg_620764153, NTI687865860)], addInt(arg_620764153.baseline, 1), 1)]), NTI687865860);

  return result_620764156;

}

function HEX3Aanonymous_620764350(x_620764370) {
  var result_620764373 = [];

    result_620764373 = nimCopy(null, [nimCopy(null, x_620764370, NTI687865860)], NTI620759450);

  return result_620764373;

}

function HEX3Aanonymous_620764405(x_620764425) {
  var result_620764428 = [];

    result_620764428 = nimCopy(null, [nimCopy(null, x_620764425, NTI687865860)], NTI620759450);

  return result_620764428;

}

function HEX3Aanonymous_620764528(x_620764548) {
  var result_620764551 = [];

    result_620764551 = nimCopy(null, [nimCopy(null, x_620764548, NTI687865860)], NTI620759450);

  return result_620764551;

}

function HEX3Aanonymous_620764681(things_620764700) {
  var result_620764703 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var inside_620764704 = nimCopy(null, things_620764700[chckIndx(1, 0, (things_620764700).length - 1)], NTI687865860);
    var left_620764705 = nimCopy(null, things_620764700[chckIndx(0, 0, (things_620764700).length - 1)], NTI687865860);
    var right_620764706 = nimCopy(null, things_620764700[chckIndx(2, 0, (things_620764700).length - 1)], NTI687865860);
    if ((1 < height_687865900(inside_620764704))) {
    left_620764705 = nimCopy(left_620764705, bigDelimiter_620757000(left_620764705.rows[chckIndx(0, 0, (left_620764705.rows).length - 1)], height_687865900(inside_620764704), chckRange(inside_620764704.baseline, 0, 2147483647)), NTI687865860);
    right_620764706 = nimCopy(right_620764706, bigDelimiter_620757000(right_620764706.rows[chckIndx(0, 0, (right_620764706.rows).length - 1)], height_687865900(inside_620764704), chckRange(inside_620764704.baseline, 0, 2147483647)), NTI687865860);
    }
    
    result_620764703 = nimCopy(result_620764703, join_687866063([nimCopy(null, left_620764705, NTI687865860), nimCopy(null, inside_620764704, NTI687865860), nimCopy(null, right_620764706, NTI687865860)]), NTI687865860);

  return result_620764703;

}

function HEX3Aanonymous_620765167(sup_620765183) {
  var result_620765186 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620765186 = nimCopy(result_620765186, withFlag_687866861(sup_620765183, 7), NTI687865860);

  return result_620765186;

}

function HEX3Aanonymous_620766075(x_620766095) {
  var result_620766098 = [];

    result_620766098 = nimCopy(null, [nimCopy(null, x_620766095, NTI620763141)], NTI620763664);

  return result_620766098;

}

function HEX3Aanonymous_620765579(x_620765599) {
  var result_620765602 = [];

    result_620765602 = nimCopy(null, [x_620765599], NTI620763254);

  return result_620765602;

}

function HEX3Aanonymous_620766274(x_620766371) {
  var result_620766374 = [];

    var resultHEX60gensym174_620766383 = newSeq_620766283(0);
    Label1: do {
      var xHEX60gensym174_620766387 = [];
      var i_620767750 = 0;
      var L_620767751 = (x_620766371).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_620767750 < L_620767751)) break Label3;
            xHEX60gensym174_620766387 = x_620766371[chckIndx(i_620767750, 0, (x_620766371).length - 1)];
            var a_620766388 = nimCopy(null, resultHEX60gensym174_620766383, NTI620764049);
            var b_620766389 = nimCopy(null, xHEX60gensym174_620766387, NTI620763103);
            resultHEX60gensym174_620766383 = nimCopy(null, HEX26_620766318(a_620766388, b_620766389), NTI620764072);
            i_620767750 = addInt(i_620767750, 1);
            if (!(((x_620766371).length == L_620767751))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_620766374 = nimCopy(null, resultHEX60gensym174_620766383, NTI620764049);

  return result_620766374;

}

function HEX3Aanonymous_620766460(primes_620766479) {
  var result_620766482 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620766482 = nimCopy(result_620766482, withFlag_687866861(toTextRect_687865909(nsuRepeatStr(makeNimstrLit("\xE2\x80\xB2"), chckRange((primes_620766479).length, 0, 2147483647)), 0, 0), 7), NTI687865860);

  return result_620766482;

}

function HEX3Aanonymous_620766570(sub_620766586) {
  var result_620766589 = ({rows: [], baseline: 0, width: 0, flag: 0});

    result_620766589 = nimCopy(result_620766589, withFlag_687866861(sub_620766586, 6), NTI687865860);

  return result_620766589;

}

function HEX3Aanonymous_620767007(x_620767027) {
  var result_620767030 = [];

    result_620767030 = nimCopy(null, [nimCopy(null, x_620767027, NTI687865860)], NTI620759450);

  return result_620767030;

}

function HEX3Aanonymous_620766683(x_620766703) {
  var result_620766706 = [];

    result_620766706 = nimCopy(null, [nimCopy(null, x_620766703, NTI687865860)], NTI620759450);

  return result_620766706;

}

function HEX3Aanonymous_620766738(x_620766758) {
  var result_620766761 = [];

    result_620766761 = nimCopy(null, [nimCopy(null, x_620766758, NTI687865860)], NTI620759450);

  return result_620766761;

}

function HEX3Aanonymous_620766847(x_620766867) {
  var result_620766870 = [];

    result_620766870 = nimCopy(null, [nimCopy(null, x_620766867, NTI687865860)], NTI620759450);

  return result_620766870;

}

function HEX3Aanonymous_620766902(x_620766922) {
  var result_620766925 = [];

    result_620766925 = nimCopy(null, [nimCopy(null, x_620766922, NTI687865860)], NTI620759450);

  return result_620766925;

}

function HEX3Aanonymous_620767085(operands_620767142) {
      var Temporary1;
        var Temporary2;
      var Temporary3;

  var result_620767145 = ({rows: [], baseline: 0, width: 0, flag: 0});

    var base_620767146 = nimCopy(null, operands_620767142[chckIndx(0, 0, (operands_620767142).length - 1)], NTI687865860);
    var flag_620767147 = base_620767146.flag;
    base_620767146.flag = 0;
    switch ((operands_620767142).length) {
    case 1:
      result_620767145 = nimCopy(result_620767145, base_620767146, NTI687865860);
      break;
    case 2:
      var script_620767151 = nimCopy(null, operands_620767142[chckIndx(1, 0, (operands_620767142).length - 1)], NTI687865860);
      if ((ConstSet131[flag_620767147] != undefined)) {
      if ((script_620767151.flag == 7)) {
      Temporary1 = stack_687866775([nimCopy(null, script_620767151, NTI687865860), nimCopy(null, base_620767146, NTI687865860)], addInt(base_620767146.baseline, height_687865900(script_620767151)), 0);
      }
      else {
      Temporary1 = stack_687866775([nimCopy(null, base_620767146, NTI687865860), nimCopy(null, script_620767151, NTI687865860)], base_620767146.baseline, 0);
      }
      
      result_620767145 = nimCopy(result_620767145, Temporary1, NTI687865860);
      }
      else {
        if ((script_620767151.flag == 7)) {
        Temporary2 = addInt(base_620767146.baseline, height_687865900(script_620767151));
        }
        else {
        Temporary2 = subInt(base_620767146.baseline, height_687865900(base_620767146));
        }
        
        script_620767151.baseline = Temporary2;
        result_620767145 = nimCopy(result_620767145, HEX26_687866713(base_620767146, script_620767151), NTI687865860);
      }
      
      break;
    case 3:
      if ((operands_620767142[chckIndx(1, 0, (operands_620767142).length - 1)].flag == 7)) {
      Temporary3 = {Field0: nimCopy(null, operands_620767142[chckIndx(1, 0, (operands_620767142).length - 1)], NTI687865860), Field1: nimCopy(null, operands_620767142[chckIndx(2, 0, (operands_620767142).length - 1)], NTI687865860)};
      }
      else {
      Temporary3 = {Field0: nimCopy(null, operands_620767142[chckIndx(2, 0, (operands_620767142).length - 1)], NTI687865860), Field1: nimCopy(null, operands_620767142[chckIndx(1, 0, (operands_620767142).length - 1)], NTI687865860)};
      }
      
      var colontmp__620767762 = nimCopy(null, Temporary3, NTI620764784);
      var sup_620767168 = nimCopy(null, colontmp__620767762["Field0"], NTI687865860);
      var sub_620767169 = nimCopy(null, colontmp__620767762["Field1"], NTI687865860);
      if ((ConstSet132[flag_620767147] != undefined)) {
      result_620767145 = nimCopy(result_620767145, stack_687866775([nimCopy(null, sup_620767168, NTI687865860), nimCopy(null, base_620767146, NTI687865860), nimCopy(null, sub_620767169, NTI687865860)], addInt(base_620767146.baseline, height_687865900(sup_620767168)), 0), NTI687865860);
      }
      else {
        result_620767145 = nimCopy(result_620767145, HEX26_687866713(base_620767146, stack_687866775([extendDown_687865996(sup_620767168, height_687865900(base_620767146)), nimCopy(null, sub_620767169, NTI687865860)], addInt(base_620767146.baseline, height_687865900(sup_620767168)), 1)), NTI687865860);
      }
      
      break;
    default: 
      break;
    }
    if ((ConstSet133[flag_620767147] != undefined)) {
    result_620767145.flag = flag_620767147;
    }
    

  return result_620767145;

}
var ws_620760351 = map_620760294(HEX26_620760067(map_620759830(HEX2A_620759204(whitespace_1090520135, HEX2EHEX2E_654312275(0, 2147483647).a), HEX3Aanonymous_620760010), HEX2A_620759662(HEX7C_620759560(map_620759340(whitespace_1090520135, HEX3Aanonymous_620759514), nop_620759212()), subInt(HEX2EHEX2E_654312275(0, 2147483647).b, HEX2EHEX2E_654312275(0, 2147483647).a))), HEX3Aanonymous_620760209);
var atom_620760354 = [{body: null}];
var expr_620761692 = map_620761635(map_620761549(HEX26_620761292(map_620761055(HEX2A_620760399(atom_620760354[0], HEX2EHEX2E_654312275(0, 2147483647).a), HEX3Aanonymous_620761235), HEX2A_620760887(HEX7C_620760785(map_620760553(atom_620760354[0], HEX3Aanonymous_620760739), nop_620760407()), subInt(HEX2EHEX2E_654312275(0, 2147483647).b, HEX2EHEX2E_654312275(0, 2147483647).a))), HEX3Aanonymous_620761434), HEX3Aanonymous_620761614);
var alpha_620761715 = HEX7C_1090520154(c_1090519479(HEX2EHEX2E_637534344(65, 90)), c_1090519479(HEX2EHEX2E_637534344(97, 122)));
var digit_620761807 = map_620761750(c_1090519479(HEX2EHEX2E_637534344(48, 57)), HEX3Aanonymous_620761729);
var sHEX60gensym99_620762737 = map_620762702(fontsByName_637534222, HEX3Aanonymous_620761859);
if (!((0 < (sHEX60gensym99_620762737).length))) {
failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(895, 10) `s`gensym99.len > 0` Can\'t fold empty sequences"));
}

var resultHEX60gensym99_620762747 = [null];
resultHEX60gensym99_620762747[0] = sHEX60gensym99_620762737[chckIndx(0, 0, (sHEX60gensym99_620762737).length - 1)];
Label9: do {
  var iHEX60gensym99_620762755 = [0];
  var colontmp__620767370 = 0;
  colontmp__620767370 = (sHEX60gensym99_620762737).length;
  var i_620767371 = 1;
  Label10: do {
      Label11: while (true) {
      if (!(i_620767371 < colontmp__620767370)) break Label11;
        iHEX60gensym99_620762755[0] = i_620767371;
        var a_620762756 = resultHEX60gensym99_620762747[0];
        var b_620762757 = sHEX60gensym99_620762737[chckIndx(iHEX60gensym99_620762755[0], 0, (sHEX60gensym99_620762737).length - 1)];
        resultHEX60gensym99_620762747[0] = HEX7C_620762766(a_620762756, b_620762757);
        i_620767371 = addInt(i_620767371, 1);
      }
  } while (false);
} while (false);
var latinLetter_620762844 = HEX7C_620762766(map_620761750(alpha_620761715, HEX3Aanonymous_620761816), resultHEX60gensym99_620762747[0]);
var bigOp_620762845 = lookupTableParser_620758564(bigOperators_637534219, 3);
var binaryOp_620762846 = lookupTableParser_620758564(binaryOperators_637534220, 2);
var delimiter_620762847 = lookupTableParser_620758564(delimiters_637534221, 0);
var otherLetter_620762848 = lookupTableParser_620758564(letters_637534412, 1);
var punct_620762849 = lookupTableParser_620758564(punctuation_637534413, 8);
var symbol_620762850 = lookupTableParser_620758564(symbols_637534435, 0);
var textOp_620762851 = lookupTableParser_620758564(textOperators_637534436, 4);
var sHEX60gensym107_620763182 = map_620763155(simpleDiacritics_637534434, HEX3Aanonymous_620762860);
var nHEX60gensym107_620763186 = (sHEX60gensym107_620763182).length;
if (!((0 < nHEX60gensym107_620763186))) {
failedAssertImpl_218103864(makeNimstrLit("sequtils.nim(965, 10) `n`gensym107 > 0` Can\'t fold empty sequences"));
}

var resultHEX60gensym107_620763192 = [sHEX60gensym107_620763182[chckIndx(subInt(nHEX60gensym107_620763186, 1), 0, (sHEX60gensym107_620763182).length - 1)]];
Label12: do {
  var iHEX60gensym107_620763198 = [0];
  var colontmp__620767374 = 0;
  colontmp__620767374 = subInt(nHEX60gensym107_620763186, 2);
  var res_620767376 = colontmp__620767374;
  Label13: do {
      Label14: while (true) {
      if (!(0 <= res_620767376)) break Label14;
        iHEX60gensym107_620763198[0] = res_620767376;
        var a_620763199 = sHEX60gensym107_620763182[chckIndx(iHEX60gensym107_620763198[0], 0, (sHEX60gensym107_620763182).length - 1)];
        var b_620763200 = resultHEX60gensym107_620763192[0];
        resultHEX60gensym107_620763192[0] = HEX7C_620762766(a_620763199, b_620763200);
        res_620767376 = subInt(res_620767376, 1);
      }
  } while (false);
} while (false);
var simpleDiacritic_620763213 = resultHEX60gensym107_620763192[0];
var frac_620763627 = HEX3EHEX3E_620763552(HEX7C_620758944(HEX7C_620758944(HEX7C_620758944(s_1090519151(makeNimstrLit("\\frac")), s_1090519151(makeNimstrLit("\\tfrac"))), s_1090519151(makeNimstrLit("\\dfrac"))), s_1090519151(makeNimstrLit("\\cfrac"))), map_620761635(HEX26_620763378(map_620760553(atom_620760354[0], HEX3Aanonymous_620763274), map_620760553(atom_620760354[0], HEX3Aanonymous_620763329)), HEX3Aanonymous_620763473));
var binom_620763859 = HEX3EHEX3E_620763552(HEX7C_620758944(HEX7C_620758944(HEX7C_620758944(s_1090519151(makeNimstrLit("\\binom")), s_1090519151(makeNimstrLit("\\tbinom"))), s_1090519151(makeNimstrLit("\\dbinom"))), s_1090519151(makeNimstrLit("\\cbinom"))), map_620761635(HEX26_620763378(map_620760553(atom_620760354[0], HEX3Aanonymous_620763688), map_620760553(atom_620760354[0], HEX3Aanonymous_620763743)), HEX3Aanonymous_620763813));
var boxed_620763960 = HEX3EHEX3E_620763552(s_1090519151(makeNimstrLit("\\boxed")), map_620763088(atom_620760354[0], HEX3Aanonymous_620763868));
var sqrt_620764299 = HEX3EHEX3E_620763552(s_1090519151(makeNimstrLit("\\sqrt")), map_620763088(atom_620760354[0], HEX3Aanonymous_620763969));
var leftright_620764714 = map_620761635(HEX3EHEX3E_620764598(HEX3EHEX3E_620761876(s_1090519151(makeNimstrLit("\\left")), ws_620760351), HEX26_620763378(HEX26_620763378(map_620760553(delimiter_620762847, HEX3Aanonymous_620764350), map_620760553(HEX3EHEX3E_620762984(ws_620760351, expr_620761692), HEX3Aanonymous_620764405)), map_620760553(HEX3EHEX3E_620762984(HEX3EHEX3E_620761876(s_1090519151(makeNimstrLit("\\right")), ws_620760351), delimiter_620762847), HEX3Aanonymous_620764528))), HEX3Aanonymous_620764681);
var bracedExpr_620764881 = HEX3CHEX3C_620764806(HEX3EHEX3E_620764723(c_1090519273(123), expr_620761692), c_1090519273(125));
var atom1_620765145 = HEX3CHEX3C_620765070(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(HEX7C_620762766(bracedExpr_620764881, leftright_620764714), digit_620761807), latinLetter_620762844), otherLetter_620762848), bigOp_620762845), binaryOp_620762846), delimiter_620762847), punct_620762849), symbol_620762850), textOp_620762851), simpleDiacritic_620763213), frac_620763627), binom_620763859), sqrt_620764299), boxed_620763960), ws_620760351);
var superscript_620766548 = HEX7C_620762766(map_620763088(HEX3EHEX3E_620764723(c_1090519273(94), atom1_620765145), HEX3Aanonymous_620765167), map_620766487(map_620766395(HEX26_620766132(map_620765895(HEX2A_620765242(c_1090519273(39), HEX2EHEX2E_654312275(1, 2147483647).a), HEX3Aanonymous_620766075), HEX2A_620765727(HEX7C_620765625(map_620765405(c_1090519273(39), HEX3Aanonymous_620765579), nop_620765250()), subInt(HEX2EHEX2E_654312275(1, 2147483647).b, HEX2EHEX2E_654312275(1, 2147483647).a))), HEX3Aanonymous_620766274), HEX3Aanonymous_620766460));
var subscript_620766597 = map_620763088(HEX3EHEX3E_620764723(c_1090519273(95), atom1_620765145), HEX3Aanonymous_620766570);
atom_620760354[0].body = map_620761635(HEX26_620763378(map_620760553(atom1_620765145, HEX3Aanonymous_620767007), HEX7C_620760785(HEX7C_620760785(HEX26_620763378(map_620760553(superscript_620766548, HEX3Aanonymous_620766683), map_620760553(HEX7C_620762766(subscript_620766597, nop_620766607()), HEX3Aanonymous_620766738)), HEX26_620763378(map_620760553(subscript_620766597, HEX3Aanonymous_620766847), map_620760553(HEX7C_620762766(superscript_620766548, nop_620766607()), HEX3Aanonymous_620766902))), nop_620760407())), HEX3Aanonymous_620767085).body;
var completeExpr_620767269 = HEX3CHEX3C_620767194(expr_620761692, eof_1090520133);

function HEX24_687865888(rect_687865889) {
  var result_687865890 = [];

    result_687865890 = nimCopy(null, nsuJoinSep(rect_687865889.rows, makeNimstrLit("\x0A")), NTI33554439);

  return result_687865890;

}

function render_620767766(latex_620767767) {
    var Temporary1;
    var Temporary2;

  var result_620767768 = [];

    var parsed_620767781 = parse_620760599(completeExpr_620767269, latex_620767767);
    if ((parsed_620767781.kind == 0)) {
    var Temporary2 = parsed_620767781;
    if (ConstSet137[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'value\' is not accessible for type \'ParseResult\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519061)); }
    Temporary1 = HEX24_687865888(Temporary2.value);
    }
    else {
      raiseException({message: makeNimstrLit("Can\'t parse expression"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_620767768 = nimCopy(null, Temporary1, NTI33554439);

  return result_620767768;

}

function matext(latex_486539267) {
  var result_486539268 = null;

    result_486539268 = toJSStr(render_620767766(cstrToNimstr(latex_486539267)));

  return result_486539268;

}
export default matext;
